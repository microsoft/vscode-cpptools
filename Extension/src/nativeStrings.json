{
    "searching_include_path": "Searching include path...",
    "include_not_found_in_browse_path": "Include file not found in browse.path.",
    "update_browse_path": "Edit \"browse.path\" setting",
    "add_to_include_path": "Add to \"includePath\": {0}",
    "add_missing_include_path": {
        "text": "Add '{0}'",
        "hint": "{0} is C++ code to add, such as '#include <string>'"
    },
    "edit_include_path": "Edit \"includePath\" setting",
    "disable_error_squiggles": "Disable error squiggles",
    "enable_error_squiggles": "Enable all error squiggles",
    "include_errors_update_include_path_squiggles_disables": "#include errors detected. Please update your includePath. Squiggles are disabled for this translation unit ({0}).",
    "include_errors_update_include_path_intellisense_disabled": "#include errors detected. Please update your includePath. IntelliSense features for this translation unit ({0}) will be provided by the Tag Parser.",
    "include_errors_update_compile_commands_or_include_path_intellisense_disabled": "#include errors detected. Consider updating your compile_commands.json or includePath. IntelliSense features for this translation unit ({0}) will be provided by the Tag Parser.",
    "could_not_parse_compile_commands": "\"{0}\" could not be parsed. 'includePath' from c_cpp_properties.json in folder '{1}' will be used instead.",
    "could_not_find_compile_commands": "\"{0}\" could not be found. 'includePath' from c_cpp_properties.json in folder '{1}' will be used instead.",
    "file_not_found_in_path": "\"{0}\" not found in \"{1}\". 'includePath' from c_cpp_properties.json in folder '{2}' will be used for this file instead.",
    "database_reset": "The IntelliSense database was successfully reset.",
    "send_response_failed": "Failed to send response to client: {0}",
    "read_response_failed": "Failed to read response from server: {0}",
    "send_request_failed": "Failed to send request to server: {0}",
    "request_wait_error": "Unexpected error while waiting for requests: {0}",
    "errored_with": "{0} errored with: {1}",
    "file_open_failed": "Failed to open the file {0}",
    "default_query_failed": "Failed to query default include paths and defines for {0}.",
    "failed_call": "Failed calling {0}",
    "quick_info_failed": "Quick info operation failed: {0}",
    "create_intellisense_client_failed": "Failed to create IntelliSense client: {0}",
    "intellisense_spawn_failed": "Failed to spawn IntelliSense process: {0}",
    "browse_engine_update_thread_join_failed": "Error calling browse_engine_update_thread.join(): {0}",
    "already_open_different_casing": "This file ({0}) is already opened in the editor but with a different casing. IntelliSense features will be disabled on this copy of the file.",
    "intellisense_client_disconnected": "IntelliSense client has disconnected from the server - {0}",
    "formatting_failed": "Formatting failed:",
    "database_add_file_failed": "Unable to add file to database, error = {0}: {1}",
    "reset_timestamp_failed": "Failed to reset timestamp during abort, error = {0}: {1}",
    "update_timestamp_failed": "Unable to update timestamp, error = {0}: {1}",
    "finalize_updates_failed": "Unable to finalize updates for file, error = {0}: {1}",
    "not_directory_with_mode": "{0} is not a directory (st_mode={1})",
    "retrieve_fs_info_failed": "Unable to retrieve file system information for {0}. error = {1}",
    "not_directory": "{0} is not a directory",
    "file_discovery_aborted": "File discovery was aborted",
    "aborting_tag_parse": "Aborting tag parse of {0} and dependencies",
    "aborting_tag_parse_at_root": "Aborting tag parse at root",
    "unable_to_retrieve_to_reset_timestamps": "Unable to retrieve DB records to reset timestamps: error = {0}",
    "failed_to_reset_timestamps_for": "Failed to reset timestamp for {0}: error = {1}",
    "no_suitable_complier": "No suitable compiler found. Please set the \"compilerPath\" in c_cpp_properties.json.",
    "compiler_include_not_found": "Compiler include path not found: {0}",
    "intellisense_not_responding": "IntelliSense engine is not responding. Using the Tag Parser instead.",
    "tag_parser_will_be_used": "Tag Parser will be used for IntelliSense operations in: {0}",
    "error_squiggles_disabled_in": "Error squiggles will be disabled in: {0}",
    "processing_folder_nonrecursive": "Processing folder (non-recursive): {0}",
    "processing_folder_recursive": "Processing folder (recursive): {0}",
    "file_exclude": "File exclude: {0}",
    "search_exclude": "Search exclude: {0}",
    "discovery_files_processed": "Discovering files: {0} file(s) processed",
    "files_removed_from_database": "{0} file(s) removed from database",
    "parsing_files_processed": "Parsing: {0} files(s) processed",
    "shutting_down_intellisense": "Shutting down IntelliSense server: {0}",
    "resetting_intellisense": "Resetting IntelliSense server: {0}",
    "code_browsing_initialized": "Code browsing service initialized",
    "folder_will_be_indexed": "Folder: {0} will be indexed",
    "populate_include_completion_cache": "Populate include completion cache.",
    "discovering_files": "Discovering files...",
    "done_discovering_files": "Done discovering files.",
    "parsing_open_files_elipsis": "Parsing open files...",
    "done_parsing_open_files": "Done parsing open files.",
    "parsing_remaining_files": "Parsing remaining files...",
    "done_parsing_remaining_files": "Done parsing remaining files.",
    "using_configuration": "Using configuration: \"{0}\"",
    "include_path_suggestions_discovered": "{0} include path suggestion(s) discovered.",
    "checking_for_syntax_errors": "Checking for syntax errors: {0}",
    "intellisense_engine_is": "IntelliSense Engine = {0}.",
    "will_use_tag_parser_when_includes_dont_resolve": "The extension will use the Tag Parser for IntelliSense when #includes don't resolve.",
    "autocomplete_is_enabled": "Autocomplete is enabled.",
    "autocomplete_is_disabled": "Autocomplete is disabled.",
    "hover_is_enabled": "Hover is enabled.",
    "hover_is_disabled": "Hover is disabled.",
    "enhanced_colorization_is_enabled": "Enhanced Colorization is enabled.",
    "error_squiggles_disabled": "Error squiggles are disabled.",
    "error_squiggles_enabled": "Error squiggles are enabled.",
    "error_squiggles_enabled_if_all_headers_resolve": "Error squiggles are enabled if all header dependencies are resolved.",
    "replaced_placeholder_file_record": "Replaced placeholder file record",
    "tag_parsing_file": "tag parsing file: {0}",
    "tag_parsing_error": "tag parsing error (this can be ignored unless symbols can't be found):",
    "reset_timestamp_for": "Reset time stamp for {0}",
    "remove_file_failed": "Failed to remove file: {0}",
    "regex_parse_error": "Regex parse error - vscode pattern: {0}, regex: {1}, error message: {2}",
    "terminating_child_process": "terminating child process: {0}",
    "still_alive_killing": "still alive, killing...",
    "giving_up": "giving up",
    "not_exited_yet": "not exited yet. Will sleep for {0} milliseconds and try again.",
    "failed_to_spawn_process": "Failed to spawn process. Error: {0} ({1})",
    "offering_completion": "Offering completion",
    "compiler_on_machine": "Attempting to get defaults from compiler found on the machine: '{0}'",
    "unable_to_resolve_include_path": "Unable to resolve include path: {0}",
    "error_searching_for_intellisense_client": "Error searching for IntelliSense client: {0}",
    "intellisense_client_not_available_quick_info": "IntelliSense client not available, using Tag Parser for quick info.",
    "tag_parser_quick_info": "using Tag Parser for quick info",
    "closing_communication_channel": "Closing the communication channel.",
    "sending_compilation_args": "sending compilation args for {0}",
    "include_label": "include: {0}",
    "framework_label": "framework: {0}",
    "define_label": "define: {0}",
    "preinclude_label": "preinclude: {0}",
    "other_label": "other: {0}",
    "sending_count_changes_to_server": "sending {0} changes to server",
    "invalid_open_file_instance": "Invalid opened file instance. Ignoring IntelliSense message for file {0}.",
    "idle_loop_reparsing_active_document": "idle loop: reparsing the active document",
    "intellisense_client_currently_disconnected": "IntelliSense client is currently disconnected",
    "request_cancelled": "Request canceled: {0}",
    "intellisense_client_not_available_go_to_definition": "IntelliSense client not available, using Tag Parser for go to definition.",
    "error_squiggle_count": "Error squiggle count: {0}",
    "queueing_update_intellisense": "Queueing IntelliSense update for files in translation unit of: {0}",
    "formatting_document": "Formatting document: {0}",
    "formatting_input_label": "Formatting input:",
    "formatting_raw_output_label": "Formatting raw output:",
    "formatting_diff_before_cursor": "Formatting diffed output before cursor:",
    "formatting_diff_after_cursor": "Formatting diffed output after cursor:",
    "formatting_diff": "Formatting diffed output:",
    "disable_inactive_regions": "Disable inactive region colorization",
    "error_limit_exceeded": "Error limit exceeded, {0} error(s) not reported.",
    "include_errors_update_compile_commands_or_include_path_squiggles_disabled": "#include errors detected. Consider updating your compile_commands.json or includePath. Squiggles are disabled for this translation unit ({0}).",
    "cannot_reset_database": "The IntelliSense database could not be reset. To manually reset, close all VS Code instances and then delete this file: {0}",
    "formatting_failed_see_output": "Formatting failed. See the output window for details.",
    "populating_include_completion_cache": "Populating include completion cache.",
    "discovering_files_count": "Discovering files: {0}",
    "parsing_open_files": "Parsing open files",
    "tag_parser_initializing": "Tag parser initializing",
    "parsing_paused": "Workspace parsing paused",
    "parsing_files": "Parsing workspace files: {0}",
    "discovering_files_count_progress": "Discovering files: {0} / {1} ({2}%)",
    "parsing_files_progress": "Parsing workspace files: {0} / {1} ({2}%)",
    "cant_find_or_run_process": "Can't find or run process_name",
    "child_exec_failed": "Child exec failed {0}",
    "could_not_communicate_with_child_process": "Could not communicate with child process!",
    "arg_failed": "{0} failed",
    "failed_to_set_flag": "Failed to set {0} flag",
    "unable_to_create": "Unable to create {0}!",
    "failed_to_set_stdout_flag": "Failed to set stdin {0} flag",
    "failed_to_set_stdin_flag": "Failed to set stdout {0} flag",
    "failed_to_set_stderr_flag": "Failed to set stderr {0} flag",
    "unable_to_start_child_process": "Unable to start child process!",
    "timed_out_attempting_to_communicate_with_process": "Timed out attempting to communicate with process!",
    "process_failed_to_run": "Process has failed to run",
    "compiler_in_compilerpath_not_found": "Specified compiler was not found: {0}",
    "config_data_invalid": "Config data invalid, {0}",
    "cmake_executable_not_found": "CMake executable not found at {0}",
    "no_args_provider": "No args provider",
    "invalid_file_path": "Invalid file path {0}",
    "cant_create_intellisense_client_for": "Can't create IntelliSense client for {0}",
    "suffix_declaration": "declaration",
    "suffix_type_alias": "type alias",
    "fallback_to_32_bit_mode": "Compiler does not support 64-bit. Falling back to 32-bit intelliSenseMode.",
    "fallback_to_64_bit_mode": "Compiler does not support 32-bit. Falling back to 64-bit intelliSenseMode.",
    "fallback_to_32_bit_mode2": "Failed to query compiler. Falling back to 32-bit intelliSenseMode.",
    "fallback_to_64_bit_mode2": "Failed to query compiler. Falling back to 64-bit intelliSenseMode.",
    "fallback_to_no_bitness": "Failed to query compiler. Falling back to no bitness.",
    "intellisense_client_creation_aborted": "IntelliSense client creation aborted: {0}",
    "include_errors_config_provider_intellisense_disabled ": "#include errors detected based on information provided by the configurationProvider setting. IntelliSense features for this translation unit ({0}) will be provided by the Tag Parser.",
    "include_errors_config_provider_squiggles_disabled ": "#include errors detected based on information provided by the configurationProvider setting. Squiggles are disabled for this translation unit ({0}).",
    "preprocessor_keyword": {
        "text": "preprocessor keyword",
        "hint": "Refers to C/C++ processor keywords"
    },
    "c_keyword": "C keyword",
    "cpp_keyword": "C++ keyword",
    "overload": {
        "text": "+1 overload",
        "hint": "Refers to 'overloaded' function in C++. This is part of a description indicating there is 1 additional overload of a specified function."
    },
    "overloads": {
        "text": "+%d overloads",
        "hint": "Refers to 'overloaded' functions in C++. This is part of a description indicating there are N additional overloads of a specified function.  %d is replaced with that number."
    },
    "specialization": {
        "text": "+1 specialization",
        "hint": "Refers to a C++ template specialization. This is part of a description indicating there is 1 additional specialization of a function."
    },
    "specializations": {
        "text": "+%d specializations",
        "hint": "Refers to C++ template specializations. This is part of a description indicating there are N additional specializations of a function.  %d is replaced with that number."
    },
    "intellisense_configuration": {
        "text": "Note: IntelliSense is not fully configured. Use the 'Select IntelliSense Configuration...' command to finish configuration."
    },
    "select_intellisense_configuration": {
        "text": "Select an IntelliSense configuration to locate system headers"
    },
    "expands_to": "Expands to:",
    "attention_label": "Attention:",
    "author_label": "Author:",
    "authors_label": "Authors:",
    "bug_label": "Bug:",
    "copyright_label": "Copyright:",
    "deprecated_label": "Deprecated:",
    "date_label": "Date:",
    "details_label": "Details:",
    "exceptions_label": {
        "text": "Exceptions:",
        "hint": "This label is for describing the exceptions thrown by a function. Usage example: Exception: std::out_of_range parameter is out of range."
    },
    "invariant_label": "Invariant:",
    "file_label": "File:",
    "note_label": "Note:",
    "parameters_label": "Parameters:",
    "pre_label": "Precondition:",
    "post_label": "Postcondition:",
    "remark_label": "Remark:",
    "remarks_label": "Remarks:",
    "result_label": "Result:",
    "return_label": "Return:",
    "returns_label": {
        "text": "Returns:",
        "hint": "This label is for the return value description for a function. Usage example: 'Returns: Area of a shape.'"
    },
    "sa_label": "See also:",
    "since_label": "Since:",
    "template_parameters_label": "Template Parameters:",
    "test_label": "Test:",
    "todo_label": "TODO:",
    "version_label": "Version:",
    "warning_label": "Warning:",
    "compiler_query_command_line": "Compiler query command line: {0}",
    "c_compiler_from_compiler_path": "Attempting to get defaults from C compiler in \"compilerPath\" property: '{0}'",
    "cpp_compiler_from_compiler_path": "Attempting to get defaults from C++ compiler in \"compilerPath\" property: '{0}'",
    "c_compiler_from_compile_commands": "Attempting to get defaults from C compiler in compile_commands.json file: '{0}'",
    "cpp_compiler_from_compile_commands": "Attempting to get defaults from C++ compiler in compile_commands.json file: '{0}'",
    "c_intellisense_mode_changed": "For C source files, IntelliSenseMode was changed from \"{0}\" to \"{1}\".",
    "cpp_intellisense_mode_changed": "For C++ source files, IntelliSenseMode was changed from \"{0}\" to \"{1}\".",
    "c_std_version_changed": "For C source files, the cStandard was changed from \"{0}\" to \"{1}\".",
    "cpp_std_version_changed": "For C++ source files, the cppStandard was changed from \"{0}\" to \"{1}\".",
    "c_intellisense_mode_and_std_version_changed": "For C source files, IntelliSenseMode was changed from \"{0}\" to \"{1}\" and cStandard was changed from \"{2}\" to \"{3}\".",
    "cpp_intellisense_mode_and_std_version_changed": "For C++ source files, IntelliSenseMode was changed from \"{0}\" to \"{1}\" and cppStandard changed from \"{2}\" to \"{3}\".",
    "c_intellisense_mode_changed_with_path": "For C source files, IntelliSenseMode was changed from \"{0}\" to \"{1}\" based on compiler args and querying compilerPath: \"{2}\"",
    "cpp_intellisense_mode_changed_with_path": "For C++ source files, IntelliSenseMode was changed from \"{0}\" to \"{1}\" based on compiler args and querying compilerPath: \"{2}\"",
    "c_std_version_changed_with_path": "For C source files, the cStandard was changed from \"{0}\" to \"{1}\" based on compiler args and querying compilerPath: \"{2}\"",
    "cpp_std_version_changed_with_path": "For C++ source files, the cppStandard was changed from \"{0}\" to \"{1}\" based on compiler args and querying compilerPath: \"{2}\"",
    "c_intellisense_mode_and_std_version_changed_with_path": "For C source files, IntelliSenseMode was changed from \"{0}\" to \"{1}\" and cStandard was changed from \"{2}\" to \"{3}\" based on compiler args and querying compilerPath: \"{4}\"",
    "cpp_intellisense_mode_and_std_version_changed_with_path": "For C++ source files, IntelliSenseMode was changed from \"{0}\" to \"{1}\" and cppStandard changed from \"{2}\" to \"{3}\" based on compiler args and querying compilerPath: \"{4}\"",
    "compiler_path_changed": "Unable to resolve configuration with compilerPath \"{0}\".  Using \"{1}\" instead.",
    "compiler_path_invalid": "Unable to resolve configuration with compilerPath: \"{0}\"",
    "compiler_path_empty": "Skipping query of compiler due to explicitly empty compilerPath",
    "msvc_intellisense_specified": "MSVC intelliSenseMode specified.  Configuring for compiler cl.exe.",
    "unable_to_configure_cl_exe": "Unable to configure for compiler cl.exe.",
    "querying_compiler_default_target": "Querying compiler's default target using command line: \"{0}\" {1}",
    "compiler_default_target": "Compiler returned default target value: {0}",
    "c_querying_compiler_default_standard": "Querying compiler for default C language standard using command line: {0}",
    "cpp_querying_compiler_default_standard": "Querying compiler for default C++ language standard using command line: {0}",
    "detected_language_standard_version": "Detected language standard version: {0}",
    "unhandled_default_target_detected": "Unhandled default compiler target value detected: {0}",
    "unhandled_target_arg_detected": "Unhandled target argument value detected: {0}",
    "memory_limit_shutting_down_intellisense": "Shutting down IntelliSense server: {0}. Memory usage is {1} MB and has exceeded the {2} MB limit.",
    "failed_to_query_for_standard_version": "Failed to query compiler at path \"{0}\" for default standard versions.  Compiler querying is disabled for this compiler.",
    "unrecognized_language_standard_version": "Compiler query returned an unrecognized language standard version.  The latest supported version will be used instead.",
    "intellisense_process_crash_detected": "IntelliSense process crash detected.",
    "intellisense_feature_crash_detected": {
        "text": "IntelliSense process crash detected: {0}",
        "hint": "`{0}` will be substituted with `<feature name>`."
    },
    "return_values_label": {
        "text": "Return values:",
        "hint": "This label is for the return values description for a function. Usage example: 'Return values: 1 if key is found. 2 if input can't be read. 3 if input is empty.'"
    },
    "nvcc_compiler_not_found": "Unable to locate nvcc compiler: {0}",
    "nvcc_host_compiler_not_found": "Unable to locate nvcc host compiler: {0}",
    "invoking_nvcc": "Invoking nvcc with command line: {0}",
    "nvcc_host_compile_command_not_found": "Unable to find host compile command in output of nvcc.",
    "unable_to_locate_forced_include": "Unable to locate forced include: {0}",
    "inline_macro": {
        "text": "Inline macro",
        "hint": "'Inline' is a command and not an adjective, i.e. like 'Expand macro'."
    },
    "unable_to_access_browse_database": "Unable to access browse database. ({0})",
    "default_compiler_path_modified_explicit_intellisense_mode": "IntelliSenseMode was changed because it didn't match the detected compiler.  Consider setting \"compilerPath\" instead.  Set \"compilerPath\" to \"\" to disable detection of system includes and defines.",
    "remove_all_code_analysis_problems": "Remove all code analysis problems",
    "multiple_locations_note": "(Multiple locations)",
    "folder_tag": "Folder",
    "file_tag": "File",
    "compiler_default_language_standard_version_old": "Compiler returned default language standard version: {0}. Since this version is old, will try to use newer version {1} as default.",
    "unexpected_output_from_clang_tidy": "Unexpected output from clang-tidy: {0}. Expected: {1}.",
    "generate_doxygen_comment": "Generate Doxygen comment",
    "offer_create_declaration": {
        "text": "Create declaration of '{0}' in {1}",
        "hint": "{0} is the name of a C/C++ function, {1} is a file name."
    },
    "offer_create_definition": {
        "text": "Create definition of '{0}' in {1}",
        "hint": "{0} is the name of a C/C++ function, {1} is a file name."
    },
    "function_definition_not_found": {
        "text": "Function definition for '{0}' not found.",
        "hint": "{0} is the name of a C/C++ function."
    },
    "cm_attributes": {
        "text": "Attributes",
        "hint": "'Attributes' is a C++ specifier."
    },
    "cm_bases": {
        "text": "Bases",
        "hint": "'Bases' are a C++ class type."
    },
    "cm_classes": {
        "text": "Classes"
    },
    "cm_coclasses": {
        "text": "CoClasses"
    },
    "cm_delegates": {
        "text": "Delegates"
    },
    "cm_enums": {
        "text": "Enums"
    },
    "cm_events": {
        "text": "Events"
    },
    "cm_functions": {
        "text": "Functions"
    },
    "cm_importdirectives": {
        "text": "Import directives"
    },
    "cm_importlibstatements": {
        "text": "ImportLib statements"
    },
    "cm_importstatements": {
        "text": "Import statements"
    },
    "cm_includedirectives": {
        "text": "Include directives"
    },
    "cm_interfaces": {
        "text": "Interfaces"
    },
    "cm_libraries": {
        "text": "Libraries"
    },
    "cm_macros": {
        "text": "Macros"
    },
    "cm_maps": {
        "text": "Maps"
    },
    "cm_mapentries": {
        "text": "Map entries"
    },
    "cm_miscellaneous": {
        "text": "Miscellaneous"
    },
    "cm_namespaces": {
        "text": "Namespaces"
    },
    "cm_parameters": {
        "text": "Parameters"
    },
    "cm_properties": {
        "text": "Properties"
    },
    "cm_structs": {
        "text": "Structs"
    },
    "cm_todo_insert_return": {
        "text": "TODO: insert return statement here"
    },
    "cm_typedefs": {
        "text": "Typedefs"
    },
    "cm_unions": {
        "text": "Unions"
    },
    "cm_usingaliases": {
        "text": "Using aliases"
    },
    "cm_usingdirectives": {
        "text": "Using directives"
    },
    "cm_variables": {
        "text": "Variables"
    },
    "cm_addfunction": {
        "text": "Automatic add function"
    },
    "e_com_virtual_redundant": {
        "text": "vsCMFunctionVirtual is redundant and must not be specified when with vsCMFunctionComMethod.",
        "hint": "Do not localize 'vsCMFunctionVirtual' and 'vsCMFunctionComMethod', they are code implementation."
    },
    "e_static_com_method": {
        "text": "vsCMFunctionComMethod cannot be static.",
        "hint": "Do not localize 'vsCMFunctionComMethod', it is code implementation."
    },
    "e_invalid_ftype": {
        "text": "Invalid C/C++ file: '%s'.",
        "hint": "%s is the invalid file."
    },
    "e_fname_to_long": {
        "text": "File name too long: '%s'.",
        "hint": "%s is the file that has a long name."
    },
    "e_create_file": {
        "text": "Cannot create file '%s'.",
        "hint": "%s is the file that could not be created."
    },
    "e_access_file": {
        "text": "Cannot access directory or file '%s' for writing.",
        "hint": "%s is the directory or file that could not be accessed for writing."
    },
    "e_invalid_pathname": {
        "text": "Invalid file path: '%s'.",
        "hint": "%s is the file that has an invalid path."
    },
    "e_cm_file_not_in_project": {
        "text": "File '%s' was not found.",
        "hint": "%s is the file that was not found."
    },
    "refactor_create_declaration_definition_failed": {
        "text": "Create Declaration / Definition failed: %s",
        "hint": "The operation 'Create Declaration / Definition' on a function was not successful. %s is the error info that has a period at the end of the string."
    },
    "refactor_create_default_delete": {
        "text": "Unable to create function '%s'. Creating defaulted or deleted functions is not supported.",
        "hint": "%s is the function that could not be created."
    },
    "refactor_function_not_created": {
        "text": "Unable to create function '%s'.",
        "hint": "%s is the function that could not be created."
    },
    "refactor_ambiguous_locations": {
        "text": "Unable to find an unambiguous location for function '%s'.",
        "hint": "%s is the function for the unambiguous location."
    },
    "refactor_file_not_in_project": {
        "text": "File '%s' was not found.",
        "hint": "%s is the file that was not found."
    },
    "refactor_not_class_namespace": {
        "text": "Could not find class or namespace '%s'.",
        "hint": "%s is the class or namespace code that could not be found."
    },
    "refactor_operation_unsupported": {
        "text": "The operation is not supported for '%s'.",
        "hint": "%s is the function that is not supported for an operation that involves automatically generating code."
    },
    "unknown_error": "Unknown error.",
    "run_select_intellisense_configuration": {
        "text": "Please run the 'Select IntelliSense Configuration...' command to locate your system headers."
    },
    "offer_copy_declaration": {
        "text": "Copy declaration of '{0}'",
        "hint": "{0} is the name of a C/C++ function."
    },
    "offer_copy_definition": {
        "text": "Copy definition of '{0}'",
        "hint": "{0} is the name of a C/C++ function."
    },
    "refactor_copy_declaration_definition_failed": {
        "text": "Copying Declaration / Definition to clipboard failed: %s",
        "hint": "The operation 'Copy Declaration / Definition' on a function was not successful. %s is the error info that has a period at the end of the string."
    },
    "refactor_extract_to_function": "Extract to function",
    "refactor_extract_to_free_function": "Extract to free function",
    "refactor_extract_to_member_function_in": {
        "text": "Extract to member function in '{0}'",
        "hint": "{0} is the name of the struct or class the member function belongs to, e.g. 'class Foo'."
    },
    "refactor_extract_outsidefunc": "The selected text is not inside a function.",
    "refactor_extract_multifunc": "The selected text cannot span different functions.",
    "refactor_extract_variable": "Variable '%s' is declared in the selected region and then used below it.",
    "refactor_extract_macro": "Preprocessor macro '%s' is used below the selected region.",
    "refactor_extract_inactive": "The selected region spans an inactive preprocessor block.",
    "refactor_extract_no_il": "The selected region does not contain any code that can be extracted.",
    "refactor_extract_entirefunc": "The selected region is not entirely within the function's body.",
    "refactor_extract_errors_selection": "The selection contains IntelliSense errors.",
    "refactor_extract_reference_c_code": {
        "text": "'%s' is not declared within the selected code, but is being modified. C code cannot pass arguments by reference.",
        "hint": "%s is the name of a variable."
    },
    "refactor_extract_reference_return_c_code": "The function would have to return a value by reference. C code cannot return references.",
    "refactor_extract_xborder_jump": "Jumps between the selected code and the surrounding code are present.",
    "refactor_extract_missing_return": "In the selected code, some control paths exit without setting the return value. This is supported only for scalar, numeric, and pointer return types.",
    "expand_selection": "Expand selection (to enable 'Extract to function')",
    "file_not_found_in_path2": "\"{0}\" not found in compile_commands.json files. 'includePath' from c_cpp_properties.json in folder '{1}' will be used for this file instead."
}
