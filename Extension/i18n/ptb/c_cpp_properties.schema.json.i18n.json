/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.name": "Identificador de configuração. `Mac`,` Linux` e `Win32` são identificadores especiais para configurações que serão selecionadas automaticamente nessas plataformas, mas o identificador pode ser qualquer coisa.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerPath": "Caminho completo do compilador usado, por exemplo, `/usr/bin/gcc`, para habilitar um IntelliSense mais preciso.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerArgs": "Argumentos do compilador para modificar as inclusões ou definições usadas, por exemplo, `-nostdinc++`, `-m32`, etc.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cStandard": "Versão do padrão da linguagem C a ser usada para o IntelliSense. Observação: os padrões GNU são usados apenas para consultar o compilador de conjunto para obter definições GNU e o IntelliSense emulará a versão padrão do C equivalente.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cppStandard": "Versão do padrão da linguagem C++ a ser usada para o IntelliSense. Observação: os padrões GNU são usados apenas para consultar o compilador de conjunto para obter definições de GNU e o IntelliSense emulará a versão do C++ padrão equivalente.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compileCommands": "Caminho completo para o arquivo `compile_commands.json` para o espaço de trabalho.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.includePath": "Uma lista de caminhos para o mecanismo IntelliSense usar ao pesquisar cabeçalhos incluídos. A pesquisa nesses caminhos não é recursiva. Especifique `**` para indicar pesquisa recursiva. Por exemplo, `${workspaceFolder}/**` irá pesquisar em todos os subdiretórios enquanto `${workspaceFolder}` não irá. Normalmente, isso não deve incluir inclusões de sistema; em vez disso, defina `C_Cpp.default.compilerPath`.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.macFrameworkPath": "Uma lista de caminhos para o mecanismo IntelliSense usar durante a pesquisa de cabeçalhos incluídos por meio das estruturas Mac. Compatível somente com configurações do Mac.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.windowsSdkVersion": "A versão do SDK do Windows inclui o caminho a ser usado no Windows, por exemplo, `10.0.17134.0`.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.defines": "Uma lista de definições de pré-processador para o mecanismo IntelliSense usar durante a análise de arquivos. Opcionalmente, use `=` para definir um valor, por exemplo `VERSÃO=1`.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.intelliSenseMode": "O modo IntelliSense para usar esse mapeamento para uma plataforma e variante de arquitetura do MSVC, gcc ou Clang. Se não for definido ou se for definido como `${default}`, a extensão irá escolher o padrão para aquela plataforma. O padrão do Windows é `windows-msvc-x64`, o padrão do Linux é` linux-gcc-x64`, e o padrão do macOS é `macos-clang-x64`. Os modos IntelliSense que especificam apenas variantes `<compiler>-<architecture>` (por exemplo, `gcc-x64`) são modos legados e são convertidos automaticamente para as variantes`<platform>-<compiler>-<architecture>`com base no host plataforma.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.forcedInclude": "Uma lista de arquivos que devem ser incluídos antes de qualquer arquivo de inclusão em uma unidade de tradução.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.configurationProvider": "A ID de uma extensão do VS Code que pode fornecer informações de configuração do IntelliSense para arquivos de origem.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.mergeConfigurations": "Defina como `true` para mesclar os caminhos de inclusão, definições e inclusões forçadas com aqueles de um provedor de configuração.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.limitSymbolsToIncludedHeaders": "Defina como `true` para processar somente os arquivos incluídos direta ou indiretamente como cabeçalhos. Defina como `false` para processar todos os arquivos sob os caminhos de inclusão especificados.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.databaseFilename": "Caminho para o banco de dados de símbolo gerado. Se um caminho relativo for especificado, ele será criado em relação ao local de armazenamento padrão do workspace.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.path": "Uma lista de caminhos a serem usados ​​para indexação e análise de símbolos do espaço de trabalho (para uso por 'Ir para a definição', 'Localizar Tudo todas as referências', etc.). A pesquisa nesses caminhos é recursiva por padrão. Especifique `*` para indicar pesquisa não recursiva. Por exemplo, `${workspaceFolder}` irá pesquisar em todos os subdiretórios enquanto `${workspaceFolder}/*` não irá.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.customConfigurationVariables": "Variáveis ​​personalizadas que podem ser consultadas através do comando `${cpptools: activeConfigCustomVariable}` para usar para as variáveis ​​de entrada em `launch.json` ou` tasks.json`.",
	"c_cpp_properties.schema.json.definitions.env": "Variáveis ​​personalizadas que podem ser reutilizadas em qualquer lugar neste arquivo usando a sintaxe `${variável}` ou `${env:variável}`.",
	"c_cpp_properties.schema.json.definitions.version": "Versão do arquivo de configuração. Esta propriedade é gerenciada pela extensão. Não a altere.",
	"c_cpp_properties.schema.json.definitions.enableConfigurationSquiggles": "Controla se a extensão reportará erros detectados em `c_cpp_properties.json`."
}