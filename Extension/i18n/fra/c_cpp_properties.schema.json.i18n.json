/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.name": "Identificateur de configuration. `Mac`, `Linux` et `Win32` sont des identificateurs spéciaux pour les configurations qui sont automatiquement sélectionnées sur ces plateformes, mais l'identificateur peut avoir n'importe quelle valeur.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerPath": "Chemin complet du compilateur utilisé, par ex., `/usr/bin/gcc`, pour améliorer la précision d'IntelliSense.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerArgs": "Arguments du compilateur permettant de modifier les inclusions ou les définitions utilisées, par exemple, `-nostdinc++`, `-m32`, etc.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cStandard": "Version de la norme de langage C à utiliser pour IntelliSense. Remarque : Les normes GNU sont utilisées uniquement pour interroger le compilateur défini afin d'obtenir les définitions GNU. IntelliSense émule la version C normalisée équivalente.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cppStandard": "Version de la norme de langage C++ à utiliser pour IntelliSense. Remarque : Les normes GNU sont utilisées uniquement pour interroger le compilateur défini afin d'obtenir les définitions GNU. IntelliSense émule la version C++ normalisée équivalente.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compileCommands": "Chemin complet du fichier `compile_commands.json` pour l'espace de travail.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.includePath": "Liste des chemins d’accès à utiliser par le moteur IntelliSense lors de la recherche d’en-têtes inclus. La recherche sur ces chemins d’accès n’est pas récursive. Spécifiez `**` pour indiquer une recherche récursive. Par exemple, `${workspaceFolder}/**` effectue une recherche dans tous les sous-répertoires, contrairement à `${workspaceFolder}`. En règle générale, cela ne doit pas inclure les éléments système ; au lieu de cela, définissez `C_Cpp.default.compilerPath`.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.macFrameworkPath": "Liste de chemins que le moteur IntelliSense doit utiliser pour la recherche des en-têtes inclus dans les frameworks Mac. Prise en charge uniquement sur la configuration Mac.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.windowsSdkVersion": "Version du chemin d'inclusion du SDK Windows à utiliser sur Windows, par ex., `10.0.17134.0`.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.defines": "Liste des définitions de préprocesseur que le moteur IntelliSense doit utiliser pendant l'analyse des fichiers. Vous pouvez aussi utiliser `=` pour définir une valeur, par ex., `VERSION=1`.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.intelliSenseMode": "Mode IntelliSense à utiliser, qui est mappé à une variante de plateforme et d'architecture de MSVC, gcc ou Clang. En l'absence de valeur définie, ou si la valeur est `${default}`, l'extension choisit la valeur par défaut pour cette plateforme. Pour Windows, la valeur par défaut est `windows-msvc-x64`. Pour Linux, la valeur par défaut est `linux-gcc-x64`. Pour macOS, la valeur par défaut est `macos-clang-x64`. Les modes IntelliSense qui spécifient uniquement les variantes `<compilateur>-<architecture>` (par exemple `gcc-x64`) sont des modes hérités. Ils sont convertis automatiquement en variantes `<plateforme>-<compilateur>-<architecture>` en fonction de la plateforme hôte.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.forcedInclude": "Liste des fichiers qui doivent être inclus avant tout fichier d'inclusion dans une unité de traduction.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.configurationProvider": "ID d'une extension VS Code pouvant fournir des informations de configuration IntelliSense pour les fichiers sources.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.mergeConfigurations": "Affectez la valeur `true` pour fusionner les chemins d’accès, les définitions et les éléments obligatoires avec ceux d’un fournisseur de configuration.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.limitSymbolsToIncludedHeaders": "Défini sur `true` pour traiter uniquement les fichiers directement ou indirectement inclus en tant qu’en-têtes. Défini sur `false` pour traiter tous les fichiers sous les chemins d’accès Include spécifiés.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.databaseFilename": "Chemin de la base de données de symboles générée. Si un chemin relatif est spécifié, il est relatif à l'emplacement de stockage par défaut de l'espace de travail.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.path": "Liste de chemins à utiliser pour l'indexation et l'analyse des symboles d'espace de travail (à utiliser par 'Atteindre la définition', 'Rechercher toutes les références', etc.). La recherche sur ces chemins est récursive par défaut. Spécifiez `*` pour indiquer une recherche non récursive. Par exemple, `${workspaceFolder}` permet d'effectuer une recherche parmi tous les sous-répertoires, ce qui n'est pas le cas de `${workspaceFolder}/*`.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.customConfigurationVariables": "Variables personnalisées qui peuvent être interrogées par le biais de la commande `${cpptools:activeConfigCustomVariable}` à utiliser pour les variables d'entrée dans `launch.json` ou `tasks.json`.",
	"c_cpp_properties.schema.json.definitions.env": "Variables personnalisées qui peuvent être réutilisées n'importe où dans ce fichier en utilisant la syntaxe `${variable}` ou `${env:variable}`.",
	"c_cpp_properties.schema.json.definitions.version": "Version du fichier de configuration. Cette propriété est gérée par l'extension. Ne la changez pas.",
	"c_cpp_properties.schema.json.definitions.enableConfigurationSquiggles": "Contrôle si l'extension signale les erreurs détectées dans `c_cpp_properties.json`."
}