/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"c_cpp.capabilities.untrustedWorkspaces.description": "Plusieurs paramètres peuvent provoquer l'exécution de processus locaux à l'espace de travail, par exemple C_Cpp.clang_format_path, C_Cpp.codeAnalysis.clangTidy.path, C_Cpp.addNodeAddonIncludePaths, C_Cpp.default.compilerPath, C_Cpp.default.configurationProvider, et C_Cpp.default.compileCommands, et les propriétés équivalentes dans c_cpp_properties.json.",
	"c_cpp.command.configurationSelect.title": "Sélectionner une configuration...",
	"c_cpp.command.configurationProviderSelect.title": "Changer le fournisseur de configuration...",
	"c_cpp.command.configurationEditJSON.title": "Modifier les configurations (JSON)",
	"c_cpp.command.configurationEditUI.title": "Modifier les configurations (IU)",
	"c_cpp.command.switchHeaderSource.title": "Basculer l'en-tête/la source",
	"c_cpp.command.enableErrorSquiggles.title": "Activer les tildes d'erreur",
	"c_cpp.command.disableErrorSquiggles.title": "Désactiver les tildes d'erreur",
	"c_cpp.command.toggleIncludeFallback.title": "Activer/désactiver le basculement du moteur IntelliSense en cas d'erreurs d'inclusion",
	"c_cpp.command.toggleDimInactiveRegions.title": "Activer/désactiver la colorisation des régions inactives",
	"c_cpp.command.resetDatabase.title": "Réinitialiser la base de données IntelliSense",
	"c_cpp.command.takeSurvey.title": "Répondre à l'enquête",
	"c_cpp.command.restartIntelliSenseForFile.title": "Redémarrer IntelliSense pour le fichier actif",
	"c_cpp.command.logDiagnostics.title": "Journaliser les diagnostics",
	"c_cpp.command.referencesViewGroupByType.title": "Regrouper par type référence",
	"c_cpp.command.referencesViewUngroupByType.title": "Dissocier par type référence",
	"c_cpp.command.rescanWorkspace.title": "Réanalyser l'espace de travail",
	"c_cpp.command.vcpkgClipboardInstallSuggested.title": "Copier la commande vcpkg install dans le Presse-papiers",
	"c_cpp.command.vcpkgOnlineHelpSuggested.title": "Visiter la page d'aide de vcpkg",
	"c_cpp.command.generateEditorConfig.title": "Générer le contenu d'EditorConfig à partir des paramètres de format VC",
	"c_cpp.command.GoToNextDirectiveInGroup.title": "Accéder à la directive de préprocesseur suivante dans le groupe conditionnel",
	"c_cpp.command.GoToPrevDirectiveInGroup.title": "Accéder à la directive de préprocesseur précédente dans le groupe conditionnel",
	"c_cpp.command.RunCodeAnalysisOnActiveFile.title": "Exécuter Code Analysis sur le fichier actif",
	"c_cpp.command.RunCodeAnalysisOnOpenFiles.title": "Exécuter une analyse de code sur Ouvrir les fichiers",
	"c_cpp.command.RunCodeAnalysisOnAllFiles.title": "Exécuter une analyse de code sur Tous les fichiers",
	"c_cpp.command.RemoveAllCodeAnalysisProblems.title": "Effacer tous les problèmes d’analyse du code",
	"c_cpp.command.BuildAndDebugFile.title": "Déboguer le fichier C/C++",
	"c_cpp.command.BuildAndRunFile.title": "Exécuter le fichier C/C++",
	"c_cpp.command.AddDebugConfiguration.title": "Ajouter une configuration de débogage",
	"c_cpp.configuration.maxConcurrentThreads.markdownDescription": "Nombre maximal de threads simultanés à utiliser pour le traitement du service de langage. La valeur est un indicateur et ne peut pas toujours être utilisée. La valeur par défaut de `null` (vide) utilise le nombre de processeurs logiques disponibles.",
	"c_cpp.configuration.maxCachedProcesses.markdownDescription": "Nombre maximal de processus mis en cache à utiliser pour le traitement du service de langage. La valeur par défaut de `null` (vide) utilise deux fois plus de processeurs logiques disponibles.",
	"c_cpp.configuration.maxMemory.markdownDescription": "Mémoire maximale (en Mo) disponible pour le traitement du service de langage. Moins de processus seront mis en cache et exécutés simultanément après le dépassement de cette utilisation de la mémoire. La valeur par défaut de `null` (vide) utilise la mémoire libre du système.",
	"c_cpp.configuration.intelliSense.maxCachedProcesses.markdownDescription": "Nombre maximal de processus IntelliSense pour continuer à s’exécuter. La valeur par défaut de `null` (vide) utilise la valeur héritée de `#C_Cpp.maxCachedProcesses#`.",
	"c_cpp.configuration.intelliSense.maxMemory.markdownDescription": "Les anciens processus IntelliSense s’arrêteront avant la création de nouveaux processus après le dépassement de cette utilisation de mémoire (en Mo). La valeur par défaut de `null` (vide) utilise la valeur héritée de `#C_Cpp.maxMemory#`.",
	"c_cpp.configuration.references.maxConcurrentThreads.markdownDescription": "Nombre maximal de threads simultanés à utiliser pour 'Rechercher toutes les références' et 'Renommer'. La valeur par défaut de `null` (vide) utilise la valeur héritée de `#C_Cpp.maxConcurrentThreads#`.",
	"c_cpp.configuration.references.maxCachedProcesses.markdownDescription": "Nombre maximal de processus à conserver en mémoire pour « Rechercher toutes les références » et « Renommer ». La valeur par défaut de `0` désactive cette fonctionnalité. La valeur de `null` (vide) utilise la valeur héritée de `#C_Cpp.maxCachedProcesses#`.",
	"c_cpp.configuration.references.maxMemory.markdownDescription": "Moins de processus \"Rechercher toutes les références\" et \"Renommer\" seront mis en cache et exécutés simultanément après que cette utilisation de la mémoire (en Mo) soit dépassée. La valeur par défaut de `null` (vide) utilise la valeur héritée de `#C_Cpp.maxMemory#`.",
	"c_cpp.configuration.codeAnalysis.maxConcurrentThreads.markdownDescription": "Le nombre maximum de threads simultanés à utiliser pour l'analyse de code. La valeur par défaut de `null` (vide) utilise la moitié de la valeur héritée de `#C_Cpp.maxConcurrentThreads#`.",
	"c_cpp.configuration.codeAnalysis.maxMemory.markdownDescription": "Moins de processus d’analyse du code s’exécuteront simultanément après le dépassement de cette utilisation de la mémoire (en Mo). La valeur par défaut de `null` (vide) utilise la valeur héritée de `#C_Cpp.maxMemory#`.",
	"c_cpp.configuration.codeAnalysis.updateDelay.markdownDescription": "Contrôle le délai en millisecondes avant le début du traitement de l’analyse du code après le déclenchement d’un enregistrement à partir d’une modification quand `#files.autoSave#` a la valeur `afterDelay` et `#C_Cpp.codeAnalysis.runAutomatically#` a la valeur `true`.",
	"c_cpp.configuration.codeAnalysis.exclude.markdownDescription": "Configurez des modèles Glob pour exclure des dossiers et des fichiers pour l’analyse du code. Les fichiers qui ne se trouvent pas dans le dossier de l’espace de travail sont toujours exclus. Hérite des valeurs de `#files.exclude#` et `#C_Cpp.files.exclude#`. En savoir plus sur les modèles Glob [ici](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).",
	"c_cpp.configuration.codeAnalysis.excludeBoolean.markdownDescription": "Le modèle global pour la correspondance des chemins de fichiers. Définissez-le à `true` ou `false` pour activer ou désactiver le motif.",
	"c_cpp.configuration.codeAnalysis.excludeWhen.markdownDescription": "Vérification supplémentaire des frères d'un fichier correspondant. Utilisez `$(basename)` comme variable pour le nom de fichier correspondant.",
	"c_cpp.configuration.codeAnalysis.runAutomatically.markdownDescription": "Si la valeur est `true`, l’analyse du code s’exécute automatiquement sur un fichier une fois qu’il est ouvert ou enregistré.",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showDisable.markdownDescription": "Si la valeur est « true », l’action de code « Désactiver » s’affiche lorsqu’elle est disponible (lors de la prochaine exécution de l’analyse du code). Lorsque l’action de code « Désactiver » est utilisée, elle ajoute le code d’avertissement au paramètre « C_Cpp.codeAnalysis.clangTidy.checks.disabled ».",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showDocumentation.markdownDescription": "Si la valeur est « true », l’action de code « Afficher la documentation pour » s’affiche lorsqu’elle est disponible (lors de la prochaine exécution de l’analyse du code).",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.description": "Contrôle les options d’action de code de problème d’analyse du code « Effacer » disponibles. La modification du paramètre pour afficher plus d’options peut nécessiter une nouvelle exécution de l’analyse du code.",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.None.description": "N’afficher aucune action de code « Effacer ».",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.AllOnly.description": "Affichez uniquement l’action de code « Effacer tout » (ou « Effacer tous les <type> » s’il n’y a qu’un seul type ou « Effacer ceci » s’il n’y a qu’un seul problème).",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.AllAndAllType.description": "Afficher l’action de code « Effacer tout » (s’il existe plusieurs types de problèmes) et l’action de code « Effacer tous les <type> » (ou « Effacer ceci » s’il n’y a qu’un seul problème pour le <type>)",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.AllAndAllTypeAndThis.description": "Afficher l’option « Effacer tout » (s’il existe plusieurs types de problèmes), « Effacer tous les <type> » (s’il existe plusieurs problèmes pour le <type>) et les actions de code « Effacer ceci »",
	"c_cpp.configuration.codeAnalysis.clangTidy.enabled.markdownDescription": "Si la valeur est `true`, l’analyse du code à l’aide de `clang-tidy` est activée et s’exécute automatiquement si `#C_Cpp.codeAnalysis.runAutomatically#` a la valeur `true` (valeur par défaut).",
	"c_cpp.configuration.codeAnalysis.clangTidy.path.markdownDescription": "Le chemin complet de l'exécutable `clang-tidy`. S'il n'est pas spécifié, et que `clang-tidy` est disponible dans le chemin de l'environnement, il sera utilisé. S'il n'est pas trouvé dans le chemin de l'environnement, le `clang-tidy` fourni avec l'extension sera utilisé.",
	"c_cpp.configuration.codeAnalysis.clangTidy.config.markdownDescription": "Spécifie une configuration `clang-tidy` au format YAML/JSON : `{Checks: '-*,clang-analyzer-*', CheckOptions: [{clé : x, valeur : y}]}`. Quand la valeur est vide, `clang-tidy` tente de trouver un fichier nommé `.clang-tidy` pour chaque fichier source dans ses répertoires parents.",
	"c_cpp.configuration.codeAnalysis.clangTidy.fallbackConfig.markdownDescription": "Spécifie une configuration `clang-tidy` au format YAML/JSON à utiliser comme secours quand `#C_Cpp.codeAnalysis.clangTidy.config#` n’est pas défini et qu’aucun fichier `.clang-tidy` n’est trouvé : `{Checks: '-*,clang-analyzer-*', CheckOptions: [{clé : x, valeur : y}]}`.",
	"c_cpp.configuration.codeAnalysis.clangTidy.headerFilter.markdownDescription": "Expression régulière étendue POSIX (ERE) correspondant aux noms des en-têtes à partir des diagnostics de sortie. Les diagnostics du fichier principal de chaque unité de traduction sont toujours affichés. La variable `${workspaceFolder}` est prise en charge (et est utilisée comme valeur de secours par défaut si aucun fichier `.clang-tidy` n’existe). Si cette option n’est pas `null` (vide), elle remplace l’option `HeaderFilterRegex` dans un fichier `.clang-tidy`, le cas échéant.",
	"c_cpp.configuration.codeAnalysis.clangTidy.args.markdownDescription": "Arguments de ligne de commande supplémentaires à passer à `clang-tidy`. Ces paramètres sont prioritaires sur les paramètres équivalents `C_Cpp.codeAnalysis.clangTidy.*`.",
	"c_cpp.configuration.codeAnalysis.clangTidy.useBuildPath.markdownDescription": "Si « true » et « compileCommands » sont définis, l’argument « -p=<build-path> » est passé à « clang-tidy » au lieu de passer les arguments de build après « -- ». Cela peut ne pas fonctionner si les variables d’environnement ne sont pas définies de façon à trouver les fichiers Include du système.",
	"c_cpp.configuration.codeAnalysis.clangTidy.checks.enabled.markdownDescription": "Liste des vérifications `clang-tidy` activées. Les valeurs sont ajoutées aux `Checks` dans un fichier `.clang-tidy` ou `#C_Cpp.codeAnalysis.clangTidy.config#`, le cas échéant. La vérification par défaut `clang-analyzer-*` est toujours utilisée, sauf si elle est explicitement désactivée.",
	"c_cpp.configuration.codeAnalysis.clangTidy.checks.disabled.markdownDescription": "Liste des vérifications `clang-tidy` désactivées. Les valeurs sont ajoutées aux `Checks` dans un fichier `.clang-tidy` ou `#C_Cpp.codeAnalysis.clangTidy.config#`, le cas échéant.",
	"c_cpp.configuration.formatting.description": "Configure le moteur de mise en forme.",
	"c_cpp.configuration.formatting.clangFormat.markdownDescription": "`clang-format` sera utilisé pour mettre en forme le code.",
	"c_cpp.configuration.formatting.vcFormat.markdownDescription": "Le moteur de mise en forme de Visual C++ est utilisé pour la mise en forme du code.",
	"c_cpp.configuration.formatting.Default.markdownDescription": "Par défaut, `clang-format` sera utilisé pour formater le code. Cependant, le moteur de formatage Visual C++ sera utilisé si un fichier `.editorconfig` avec des paramètres pertinents est trouvé près du code à formater et que `#C_Cpp.clang_format_style#` est la valeur par défaut : `file`.",
	"c_cpp.configuration.formatting.Disabled.markdownDescription": "La mise en forme du code va être désactivée.",
	"c_cpp.configuration.vcFormat.indent.braces.markdownDescription": "Les accolades sont indentées de la quantité spécifiée dans le paramètre `#editor.tabSize#`.",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.description": "Détermine par rapport à quoi la nouvelle ligne est mise en retrait.",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.outermostParenthesis.description": "Mettez en retrait une nouvelle ligne par rapport à la parenthèse ouvrante la plus extérieure.",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.innermostParenthesis.description": "Mettez en retrait une nouvelle ligne par rapport à la parenthèse ouvrante la plus intérieure.",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.statementBegin.description": "Mettez en retrait une nouvelle ligne par rapport au début de l'instruction actuelle.",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.markdownDescription": "Lorsqu'une nouvelle ligne est tapée, elle est alignée sous la parenthèse ouvrante ou en fonction de `#C_Cpp.vcFormat.indent.multiLineRelativeTo#`.",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.alignToParenthesis.markdownDescription": "La nouvelle ligne est alignée sous la parenthèse ouvrante.",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.indent.markdownDescription": "La nouvelle ligne est indentée en fonction de `#C_Cpp.vcFormat.indent.multiLineRelativeTo#`.",
	"c_cpp.configuration.vcFormat.indent.preserveWithinParentheses.description": "Dans le code existant, conservez l'alignement existant de la mise en retrait des nouvelles lignes entre parenthèses.",
	"c_cpp.configuration.vcFormat.indent.caseLabels.markdownDescription": "Les étiquettes sont indentées par rapport aux instructions de commutation de la quantité spécifiée dans le paramètre `#editor.tabSize#`.",
	"c_cpp.configuration.vcFormat.indent.caseContents.markdownDescription": "Le code à l’intérieur d’un bloc `case` est mis en retrait par rapport à son étiquette en fonction de la quantité spécifiée dans le paramètre `#editor.tabSize#`.",
	"c_cpp.configuration.vcFormat.indent.caseContentsWhenBlock.markdownDescription": "Mettez en retrait les accolades qui suivent une instruction case en fonction de la quantité spécifiée dans le paramètre `#editor.tabSize#`.",
	"c_cpp.configuration.vcFormat.indent.lambdaBracesWhenParameter.markdownDescription": "Mettre en retrait les accolades des expressions lambda utilisées comme paramètres de fonction par rapport au début de l’instruction par la quantité spécifiée dans le paramètre `#editor.tabSize#`.",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.description": "Position des étiquettes goto.",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.oneLeft.markdownDescription": "Positionne les étiquettes goto à gauche de l'indentation actuelle du code, de la quantité spécifiée dans le paramètre `#editor.tabSize#`.",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.leftmostColumn.markdownDescription": "Placez les étiquettes goto sur le bord le plus à gauche du code.",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.none.markdownDescription": "Les étiquettes goto ne sont pas mises en forme.",
	"c_cpp.configuration.vcFormat.indent.preprocessor.description": "Position des directives de préprocesseur.",
	"c_cpp.configuration.vcFormat.indent.preprocessor.oneLeft.markdownDescription": "Les directives de préprocesseur sont positionnées à gauche de la mise en retrait du code actuel, selon la quantité spécifiée dans le paramètre `#editor.tabSize#`.",
	"c_cpp.configuration.vcFormat.indent.preprocessor.leftmostColumn.markdownDescription": "Les directives de préprocesseur sont placées sur le bord le plus à gauche du code.",
	"c_cpp.configuration.vcFormat.indent.preprocessor.none.markdownDescription": "Les directives de préprocesseur ne sont pas mises en forme.",
	"c_cpp.configuration.vcFormat.indent.accessSpecifiers.markdownDescription": "Les spécificateurs d'accès sont indentés par rapport aux définitions de classes ou de structures de la quantité spécifiée dans le paramètre `#editor.tabSize#`.",
	"c_cpp.configuration.vcFormat.indent.namespaceContents.markdownDescription": "Le code est mis en retrait par rapport à son espace de noms englobant par la quantité spécifiée dans le paramètre `#editor.tabSize#`.",
	"c_cpp.configuration.vcFormat.indent.preserveComments.description": "La mise en retrait des commentaires ne change pas pendant les opérations de mise en forme.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.namespace.description": "Position des accolades ouvrantes pour les espaces de noms.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.type.description": "Position des accolades ouvrantes pour les définitions de type.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.lambda.description": "Position des accolades ouvrantes pour les fonctions lambda.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.function.description": "Position des accolades ouvrantes pour les fonctions.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.block.description": "Position des accolades ouvrantes pour les blocs de contrôle.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.newLine.description": "Les accolades ouvrantes sont déplacées vers une nouvelle ligne.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.sameLine.description": "Les accolades ouvrantes sont conservées sur la même ligne et un espace est ajouté avant chacune d'elles.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.ignore.description": "Les accolades ouvrantes ne sont pas mises en forme.",
	"c_cpp.configuration.vcFormat.newLine.scopeBracesOnSeparateLines.description": "Placez les accolades ouvrantes et fermantes pour les étendues sur des lignes distinctes.",
	"c_cpp.configuration.vcFormat.newLine.closeBraceSameLine.emptyType.description": "Pour les types vides, déplacez les accolades fermantes sur la même ligne que les accolades ouvrantes.",
	"c_cpp.configuration.vcFormat.newLine.closeBraceSameLine.emptyFunction.description": "Pour les corps de fonction vides, déplacez les accolades fermantes sur la même ligne que les accolades ouvrantes.",
	"c_cpp.configuration.vcFormat.newLine.beforeCatch.markdownDescription": "Placez `catch` et les mots clés similaires sur une nouvelle ligne.",
	"c_cpp.configuration.vcFormat.newLine.beforeElse.markdownDescription": "Placez `else` sur une nouvelle ligne.",
	"c_cpp.configuration.vcFormat.newLine.beforeWhileInDoWhile.markdownDescription": "Placez `while` dans une boucle `do`-`while` sur une nouvelle ligne.",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.description": "Espacement entre les noms de fonction et les parenthèses ouvrantes des listes d'arguments.",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.insert.description": "Ajoutez un espace avant la parenthèse ouvrante d'une fonction.",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.remove.description": "Les espaces avant les parenthèses ouvrantes d'une fonction sont supprimés.",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.ignore.description": "Les espaces sont laissés tels qu'ils ont été entrés.",
	"c_cpp.configuration.vcFormat.space.withinParameterListParentheses.description": "Un espace est ajouté après la parenthèse ouvrante et avant la parenthèse fermante dans les listes de paramètres de fonction.",
	"c_cpp.configuration.vcFormat.space.betweenEmptyParameterListParentheses.description": "Quand une liste de paramètres de fonction est vide, un espace est inséré entre ses parenthèses.",
	"c_cpp.configuration.vcFormat.space.afterKeywordsInControlFlowStatements.description": "Un espace est ajouté entre le mot clé et la parenthèse ouvrante dans les instructions de flux de contrôle.",
	"c_cpp.configuration.vcFormat.space.withinControlFlowStatementParentheses.description": "Un espace est ajouté après la parenthèse ouvrante et avant la parenthèse fermante dans les instructions de flux de contrôle.",
	"c_cpp.configuration.vcFormat.space.beforeLambdaOpenParenthesis.description": "Un espace est ajouté avant la parenthèse ouvrante des listes d'arguments d'expressions lambda.",
	"c_cpp.configuration.vcFormat.space.withinCastParentheses.description": "Un espace est ajouté après la parenthèse ouvrante et avant la parenthèse fermante d'un cast de style C.",
	"c_cpp.configuration.vcFormat.space.afterCastCloseParenthesis.description": "Un espace est ajouté après la parenthèse fermante d'un cast de style C.",
	"c_cpp.configuration.vcFormat.space.withinExpressionParentheses.description": "Un espace est ajouté après la parenthèse ouvrante et avant la parenthèse fermante d'une expression entre parenthèses.",
	"c_cpp.configuration.vcFormat.space.beforeBlockOpenBrace.description": "Un espace est ajouté avant les accolades ouvrantes des blocs d'étendue.",
	"c_cpp.configuration.vcFormat.space.betweenEmptyBraces.description": "Quand les accolades sont vides et situées sur la même ligne, un espace est inséré entre elles.",
	"c_cpp.configuration.vcFormat.space.beforeInitializerListOpenBrace.description": "Un espace est ajouté avant l'accolade ouvrante de l'initialisation uniforme et des listes d'initialiseurs.",
	"c_cpp.configuration.vcFormat.space.withinInitializerListBraces.description": "Un espace est ajouté après l'accolade ouvrante et avant l'accolade fermante de l'initialisation uniforme et des listes d'initialiseurs.",
	"c_cpp.configuration.vcFormat.space.preserveInInitializerList.description": "Les espaces autour des virgules sont conservés dans l'initialisation uniforme et les listes d'initialiseurs.",
	"c_cpp.configuration.vcFormat.space.beforeOpenSquareBracket.description": "Un espace est ajouté avant les crochets ouvrants.",
	"c_cpp.configuration.vcFormat.space.withinSquareBrackets.description": "Un espace est ajouté après le crochet ouvrant et avant le crochet fermant.",
	"c_cpp.configuration.vcFormat.space.beforeEmptySquareBrackets.description": "Lorsque les crochets sont vides, un espace est ajouté avant le crochet ouvrant.",
	"c_cpp.configuration.vcFormat.space.betweenEmptySquareBrackets.description": "Lorsque les crochets sont vides, un espace est inséré entre eux.",
	"c_cpp.configuration.vcFormat.space.groupSquareBrackets.description": "Pour les tableaux multidimensionnels, tout espace entre les crochets est supprimé. Les autres paramètres qui contrôlent l'espace sont remplacés.",
	"c_cpp.configuration.vcFormat.space.withinLambdaBrackets.description": "Un espace est ajouté après le crochet ouvrant et avant le crochet fermant.",
	"c_cpp.configuration.vcFormat.space.betweenEmptyLambdaBrackets.description": "Lorsque les crochets sont vides, un espace est inséré entre eux.",
	"c_cpp.configuration.vcFormat.space.beforeComma.description": "Un espace est ajouté avant chaque virgule.",
	"c_cpp.configuration.vcFormat.space.afterComma.description": "Un espace est ajouté après chaque virgule.",
	"c_cpp.configuration.vcFormat.space.removeAroundMemberOperators.description": "Les espaces autour des opérateurs d'accès aux membres, des opérateurs de pointeur vers membre et des opérateurs de résolution d'étendue sont supprimés.",
	"c_cpp.configuration.vcFormat.space.beforeInheritanceColon.description": "Un espace est ajouté avant le signe deux points pour les types hérités dans les définitions de classe.",
	"c_cpp.configuration.vcFormat.space.beforeConstructorColon.description": "Un espace est ajouté avant le signe deux points dans les définitions de constructeur.",
	"c_cpp.configuration.vcFormat.space.removeBeforeSemicolon.description": "Les espaces sont supprimés avant tous les points-virgules.",
	"c_cpp.configuration.vcFormat.space.insertAfterSemicolon.description": "Un espace est inséré après chaque point-virgule.",
	"c_cpp.configuration.vcFormat.space.removeAroundUnaryOperator.description": "Les espaces entre les opérateurs unaires et les opérandes sont supprimés.",
	"c_cpp.configuration.vcFormat.space.aroundBinaryOperator.description": "Espaces autour des opérateurs binaires.",
	"c_cpp.configuration.vcFormat.space.aroundAssignmentOperator.description": "Espaces autour des opérateurs d’affectation.",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.description": "Espace autour des opérateurs de pointeur et de référence.",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.left.description": "Les opérateurs de pointeur et de référence sont alignés à gauche.",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.center.description": "Ls opérateurs de pointeur et de référence sont centrés.",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.right.description": "Les opérateurs de pointeur et de référence sont alignés à droite.",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.ignore.description": "Les opérateurs de pointeur et de référence ne sont pas mis en forme.",
	"c_cpp.configuration.vcFormat.space.aroundTernaryOperator.description": "Espaces autour des opérateurs conditionnels.",
	"c_cpp.configuration.vcFormat.space.aroundOperators.insert.description": "Un espace est ajouté avant et après l'opérateur.",
	"c_cpp.configuration.vcFormat.space.aroundOperators.remove.description": "Les espaces avant et après l'opérateur sont supprimés.",
	"c_cpp.configuration.vcFormat.space.aroundOperators.ignore.description": "Les espaces sont laissés tels qu'ils ont été entrés.",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.description": "Options d’habillage pour les blocs.",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.oneLiners.markdownDescription": "Un bloc de code complet qui est entré sur une ligne est maintenu sur une ligne, quelles que soient les valeurs des paramètres `C_Cpp.vcFormat.newLine.*`.",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.allOneLineScopes.markdownDescription": "Tout code où les accolades ouvrantes et fermantes sont saisies sur une ligne est maintenu sur une ligne, quelles que soient les valeurs des paramètres `C_Cpp.vcFormat.newLine.*`.",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.never.markdownDescription": "Les blocs de code sont toujours mis en forme en fonction des valeurs des paramètres `C_Cpp.vcFormat.newLine.*`.",
	"c_cpp.configuration.clang_format_path.markdownDescription": "Le chemin complet de l'exécutable `clang-format`. S'il n'est pas spécifié, et que `clang-format` est disponible dans le chemin de l'environnement, il est utilisé. S'il n'est pas trouvé dans le chemin de l'environnement, le `clang-format` fourni avec l'extension sera utilisé.",
	"c_cpp.configuration.clang_format_style.markdownDescription": "Le style de codage prend actuellement en charge : `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`. Utilisez `file` pour charger le style à partir d’un fichier `.clang-format` dans le répertoire actuel ou parent. Utiliser `{clé : valeur, ...}` pour définir des paramètres spécifiques. Par exemple, le style `Visual Studio` est similaire à : `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.",
	"c_cpp.configuration.clang_format_fallbackStyle.markdownDescription": "Nom du style prédéfini utilisé comme secours dans le cas où `clang-format` est appelé avec le style `file`, mais le fichier `.clang-format` est introuvable. Les valeurs possibles sont `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`, `none` ou utilisez `{clé : valeur, ...}` pour définir des paramètres spécifiques. Par exemple, le style `Visual Studio` est similaire à : `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.",
	"c_cpp.configuration.clang_format_sortIncludes.markdownDescription": "S’il est défini, remplace le comportement de tri Include déterminé par le paramètre `SortIncludes`.",
	"c_cpp.configuration.intelliSenseEngine.description": "Contrôle le fournisseur IntelliSense.",
	"c_cpp.configuration.intelliSenseEngine.default.description": "Fournit des résultats contextuels via un processus IntelliSense distinct.",
	"c_cpp.configuration.intelliSenseEngine.tagParser.description": "Fournit des résultats « flous » qui ne sont pas compatibles avec le contexte.",
	"c_cpp.configuration.intelliSenseEngine.disabled.description": "Désactive les fonctionnalités du service de langage C/C++.",
	"c_cpp.configuration.intelliSenseEngineFallback.markdownDescription": "Contrôle si le moteur IntelliSense bascule automatiquement vers l'analyseur de balises pour les unités de traduction qui contiennent des erreurs `#include`.",
	"c_cpp.configuration.autocomplete.markdownDescription": "Contrôle le fournisseur de la saisie semi-automatique. Si la valeur est `Disabled` et que vous voulez utiliser la saisie semi-automatique, vous devez également définir `\"[cpp]\": {\"editor.wordBasedSuggestions\": true}` (et de la même manière pour les langages `c` et `cuda-cpp`).",
	"c_cpp.configuration.autocomplete.default.description": "Utilise le moteur IntelliSense actif.",
	"c_cpp.configuration.autocomplete.disabled.description": "Utilise la saisie semi-automatique basée sur le mot fournie par Visual Studio Code.",
	"c_cpp.configuration.errorSquiggles.description": "Contrôle si les erreurs de compilation suspectes détectées par le moteur IntelliSense seront rapportées à l'éditeur. Il contrôle également si les avertissements d'analyse de code sont signalés si les includes ne peuvent pas être trouvés. Ce paramètre est ignoré par le moteur Tag Parser.",
	"c_cpp.configuration.dimInactiveRegions.description": "Contrôle si les blocs de préprocesseur inactifs ont une couleur différente de celle du code actif. Ce paramètre n'a pas d'effet si IntelliSense est désactivé ou utilise le thème Contraste élevé par défaut.",
	"c_cpp.configuration.inactiveRegionOpacity.markdownDescription": "Contrôle l'opacité des blocs inactifs du préprocesseur. L'échelle est comprise entre `0.1` et `1.0`. Ce paramètre ne s'applique que lorsque la gradation des régions inactives est activée.",
	"c_cpp.configuration.inactiveRegionForegroundColor.description": "Contrôle la coloration de la police des blocs de préprocesseur inactifs. L'entrée se présente sous la forme d'un code de couleur hexadécimal ou d'une couleur de thème valide. Si ce paramètre n'est pas défini, la valeur par défaut est le schéma de coloration de syntaxe de l'éditeur. Ce paramètre s'applique uniquement quand l'estompage des régions inactives est activé.",
	"c_cpp.configuration.inactiveRegionBackgroundColor.description": "Contrôle la coloration d'arrière-plan des blocs de préprocesseur inactifs. L'entrée se présente sous la forme d'un code de couleur hexadécimal ou d'une couleur de thème valide. Si ce paramètre n'est pas défini, la valeur par défaut est Transparent. Ce paramètre s'applique uniquement quand l'estompage des régions inactives est activé.",
	"c_cpp.configuration.loggingLevel.markdownDescription": "La verbosité de la journalisation dans le panneau de sortie. L'ordre des niveaux du moins verbeux au plus verbeux est : `None` < `Error` < `Warning` < `Information` < `Debug`.",
	"c_cpp.configuration.autoAddFileAssociations.markdownDescription": "Contrôle si les fichiers sont automatiquement ajoutés à `#files.associations#` lorsqu'ils sont la cible d'une opération de navigation depuis un fichier C/C++.",
	"c_cpp.configuration.workspaceParsingPriority.markdownDescription": "Contrôle si l'analyse des fichiers de l'espace de travail non actif utilise des dormants pour éviter d'utiliser 100% du CPU. Les valeurs `highest`/`high`/`medium`/`low` correspondent à environ 100/75/50/25% d'utilisation du CPU.",
	"c_cpp.configuration.workspaceSymbols.description": "Symboles à inclure dans les résultats de la requête quand 'Atteindre le symbole dans l'espace de travail' est appelé.",
	"c_cpp.configuration.exclusionPolicy.markdownDescription": "Indique à l’extension quand utiliser le paramètre `#files.exclude#` (et `#C_Cpp.files.exclude#`) lors de la détermination des fichiers qui doivent être ajoutés à la base de données de navigation du code tout en parcourant les chemins d’accès dans le tableau `browse.path`. Si votre paramètre `#files.exclude#` contient uniquement des dossiers, `checkFolders` est le meilleur choix et augmente la vitesse à laquelle l’extension peut initialiser la base de données de navigation du code.",
	"c_cpp.configuration.exclusionPolicy.checkFolders.description": "Les filtres d’exclusion ne seront évalués qu’une seule fois par dossier (les fichiers individuels ne sont pas vérifiés).",
	"c_cpp.configuration.exclusionPolicy.checkFilesAndFolders.description": "Les filtres d'exclusion seront évalués pour chaque fichier et dossier rencontré.",
	"c_cpp.configuration.preferredPathSeparator.markdownDescription": "Caractère utilisé comme séparateur de chemin dans les résultats d'autocomplétion de `#include`.",
	"c_cpp.configuration.simplifyStructuredComments.markdownDescription": "Si la valeur est `true`, les info-bulles de pointage et d'autocomplétion affichent uniquement certaines étiquettes de commentaires structurés. Sinon, tous les commentaires sont affichés.",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.string.markdownDescription": "Modèle qui commence un bloc de commentaires multiligne ou monoligne. Le modèle consécutif a la valeur par défaut ` * ` pour les blocs de commentaires multilignes ou cette chaîne pour les blocs de commentaires monolignes.",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.begin.description": "Modèle qui commence un bloc de commentaires multiligne ou monoligne.",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.continue.description": "Texte à insérer sur la ligne suivante quand vous appuyez sur la touche Entrée dans un bloc de commentaires multiligne ou monoligne.",
	"c_cpp.configuration.commentContinuationPatterns.description": "Définit le comportement de l'éditeur quand vous appuyez sur la touche Entrée dans un bloc de commentaires multiligne ou monoligne.",
	"c_cpp.configuration.configurationWarnings.description": "Détermine si des notifications de fenêtre contextuelle s'affichent quand une extension de fournisseur de configuration ne peut pas fournir la configuration d'un fichier source.",
	"c_cpp.configuration.intelliSenseCachePath.markdownDescription": "Définit le chemin du dossier pour les en-têtes précompilés mis en cache et utilisés par IntelliSense. Le chemin par défaut du cache est `%LocalAppData%/Microsoft/vscode-cpptools` sous Windows, `$XDG_CACHE_HOME/vscode-cpptools/` sous Linux (ou `$HOME/.cache/vscode-cpptools/` si `XDG_CACHE_HOME` n'est pas défini), et `$HOME/Library/Caches/vscode-cpptools/` sous macOS. Le chemin par défaut sera utilisé si aucun chemin n'est spécifié ou si un chemin spécifié est invalide.",
	"c_cpp.configuration.intelliSenseCacheSize.markdownDescription": "Taille maximale de l'espace disque dur par espace de travail en mégaoctets (Mo) pour les en-têtes précompilés mis en cache ; l'utilisation réelle peut fluctuer autour de cette valeur. La taille par défaut est de `5120` Mo. La mise en cache des en-têtes précompilés est désactivée lorsque la taille est de `0`.",
	"c_cpp.configuration.intelliSenseMemoryLimit.markdownDescription": "Limite d’utilisation de la mémoire en mégaoctets (Mo) d’un processus IntelliSense. La valeur par défaut est `4096` et la valeur maximale est `16384`. L’extension arrête et redémarre un processus IntelliSense lorsqu’elle dépasse la limite.",
	"c_cpp.configuration.intelliSenseUpdateDelay.description": "Contrôle le délai en millisecondes avant que la mise à jour d'IntelliSense ne commence après une modification.",
	"c_cpp.configuration.default.includePath.markdownDescription": "Valeur à utiliser dans une configuration si `includePath` n’est pas spécifié dans `c_cpp_properties.json`. Si `includePath` est spécifié, ajoutez `${default}` au tableau pour insérer les valeurs de ce paramètre. En règle générale, cela ne doit pas inclure les éléments système ; à la place, définissez `#C_Cpp.default.compilerPath#`.",
	"c_cpp.configuration.default.defines.markdownDescription": "La valeur à utiliser dans une configuration si `defines` n'est pas spécifié, ou les valeurs à insérer si `${default}` est présent dans `defines`.",
	"c_cpp.configuration.default.macFrameworkPath.markdownDescription": "Valeur à utiliser dans une configuration si `macFrameworkPath` n’est pas spécifié, ou les valeurs à insérer si `${default}` est présent dans `macFrameworkPath`.",
	"c_cpp.configuration.default.windowsSdkVersion.markdownDescription": "Version du chemin d'inclusion du SDK Windows à utiliser sur Windows, par ex., `10.0.17134.0`.",
	"c_cpp.configuration.default.compileCommands.markdownDescription": "Valeur à utiliser dans une configuration si `compileCommands` n’est pas spécifié ou défini sur `${default}`.",
	"c_cpp.configuration.default.forcedInclude.markdownDescription": "La valeur à utiliser dans une configuration si `forcedInclude` n'est pas spécifié, ou les valeurs à insérer si `${default}` est présent dans `forcedInclude`.",
	"c_cpp.configuration.default.intelliSenseMode.markdownDescription": "Valeur à utiliser dans une configuration si `intelliSenseMode` n’est pas spécifié ou défini sur `${default}`.",
	"c_cpp.configuration.default.compilerPath.markdownDescription": "Valeur à utiliser dans une configuration si `compilerPath` n'est pas spécifié ou est défini sur `${default}`.",
	"c_cpp.configuration.default.compilerArgs.markdownDescription": "Valeur à utiliser dans la configuration si `compilerArgs` n’est pas spécifié ou défini sur `${default}`.",
	"c_cpp.configuration.default.cStandard.markdownDescription": "Valeur à utiliser dans une configuration si `cStandard` n'est pas spécifié ou est défini sur `${default}`.",
	"c_cpp.configuration.default.cppStandard.markdownDescription": "La valeur à utiliser dans une configuration si `cppStandard` n'est pas spécifié ou défini à `${default}`.",
	"c_cpp.configuration.default.configurationProvider.markdownDescription": "Valeur à utiliser dans une configuration si `configurationProvider` n'est pas spécifié ou est défini sur `${default}`.",
	"c_cpp.configuration.default.mergeConfigurations.markdownDescription": "Affectez la valeur `true` pour fusionner les chemins d’accès, les définitions et les éléments obligatoires avec ceux d’un fournisseur de configuration.",
	"c_cpp.configuration.default.browse.path.markdownDescription": "Valeur à utiliser dans une configuration si `browse.path` n’est pas spécifié, ou les valeurs à insérer si `${default}` est présent dans browse.path.",
	"c_cpp.configuration.default.browse.databaseFilename.markdownDescription": "La valeur à utiliser dans une configuration si `browse.databaseFilename` n'est pas spécifié ou défini à `${default}`.",
	"c_cpp.configuration.default.browse.limitSymbolsToIncludedHeaders.markdownDescription": "Valeur à utiliser dans une configuration si `browse.limitSymbolsToIncludedHeaders` n'est pas spécifié ou a la valeur `${default}`.",
	"c_cpp.configuration.default.systemIncludePath.markdownDescription": "Valeur à utiliser pour le chemin d'inclusion système. Si cette option est définie, elle remplace le chemin d'inclusion système obtenu via les paramètres `compilerPath` et `compileCommands`.",
	"c_cpp.configuration.default.enableConfigurationSquiggles.markdownDescription": "Contrôle si l'extension signale les erreurs détectées dans `c_cpp_properties.json`.",
	"c_cpp.configuration.default.customConfigurationVariables.markdownDescription": "Valeur à utiliser dans une configuration si `customConfigurationVariables` n'est pas défini, ou valeurs à insérer si `${default}` est présent dans `customConfigurationVariables`.",
	"c_cpp.configuration.updateChannel.markdownDescription": "Définissez la valeur `Insiders` pour télécharger et installer automatiquement les dernières builds Insider de l’extension, qui incluent les fonctionnalités à venir et les correctifs de bogues.",
	"c_cpp.configuration.updateChannel.deprecationMessage": "Ce paramètre est déconseillé. Les extensions en version préliminaire sont désormais disponibles via marketplace.",
	"c_cpp.configuration.default.dotConfig.markdownDescription": "La valeur à utiliser dans une configuration si `dotConfig` n'est pas spécifié, ou la valeur à insérer si `${default}` est présent dans `dotConfig`.",
	"c_cpp.configuration.experimentalFeatures.description": "Contrôle si les fonctionnalités \"expérimentales\" sont utilisables.",
	"c_cpp.configuration.suggestSnippets.markdownDescription": "Si la valeur est `true`, les extraits de code sont fournis par le serveur de langage.",
	"c_cpp.configuration.enhancedColorization.markdownDescription": "Si cette option est activée, le code est colorisé en fonction d'IntelliSense. Ce paramètre s'applique uniquement si `#C_Cpp.intelliSenseEngine#` est défini sur `Default`.",
	"c_cpp.configuration.codeFolding.description": "Si cette fonctionnalité est activée, les plages de pliage de code sont fournies par le serveur de langage.",
	"c_cpp.configuration.vcpkg.enabled.markdownDescription": "Activez les services d'intégration pour le [gestionnaire de dépendances vcpkg](https://aka.ms/vcpkg/).",
	"c_cpp.configuration.addNodeAddonIncludePaths.markdownDescription": "Ajouter les chemins d'inclusion de `nan` et `node-addon-api` quand ils sont des dépendances.",
	"c_cpp.configuration.renameRequiresIdentifier.markdownDescription": "Si `true`, 'Renommer le symbole' exigera un identifiant C/C++ valide.",
	"c_cpp.configuration.autocompleteAddParentheses.markdownDescription": "Si la valeur est `true`, l'autocomplétion ajoute automatiquement `(` après les appels de fonction. Dans ce cas `)` peut également être ajouté, en fonction de la valeur du paramètre `#editor.autoClosingBrackets#`.",
	"c_cpp.configuration.filesExclude.markdownDescription": "Configurer les modèles globaux pour exclure les dossiers (et les fichiers si `#C_Cpp.exclusionPolicy#` est modifié). Ils sont spécifiques à l'extension C/C++ et s'ajoutent à `#files.exclude#`, mais contrairement à `#files.exclude#`, ils s'appliquent également aux chemins en dehors du dossier de l'espace de travail actuel et ne sont pas supprimés de la vue de l'explorateur. Pour en savoir plus sur les modèles globaux, cliquez ici (https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).",
	"c_cpp.configuration.filesExcludeBoolean.markdownDescription": "Le modèle global pour la correspondance des chemins de fichiers. Définissez-le à `true` ou `false` pour activer ou désactiver le motif.",
	"c_cpp.configuration.filesExcludeWhen.markdownDescription": "Vérification supplémentaire des frères d'un fichier correspondant. Utilisez `$(basename)` comme variable pour le nom de fichier correspondant.",
	"c_cpp.configuration.debugger.useBacktickCommandSubstitution.markdownDescription": "Si la valeur est `true`, le remplacement de la commande d'interpréteur de commandes du débogueur utilise un accent grave (`) obsolète.",
	"c_cpp.configuration.legacyCompilerArgsBehavior.markdownDescription": "Activez le comportement antérieur à v1.10.0 pour gérer l’échappement de l’interpréteur de commandes dans les paramètres d’argument du compilateur. L’échappement de l’interpréteur de commandes n’est plus attendu ou pris en charge par défaut dans les tableaux d’arguments commençant dans v1.10.0.",
	"c_cpp.configuration.legacyCompilerArgsBehavior.deprecationMessage": "Ce paramètre est temporaire pour prendre en charge la transition vers le comportement corrigé dans v1.10.0.",
	"c_cpp.contributes.views.cppReferencesView.title": "C/C++ : Autres résultats des références",
	"c_cpp.contributes.viewsWelcome.contents": "Pour en savoir plus sur launch.json, consultez [Configuration du débogage C/C++](https://code.visualstudio.com/docs/cpp/launch-json-reference).",
	"c_cpp.configuration.debugShortcut.description": "Afficher le bouton de lecture « Exécuter et déboguer » et l’engrenage « Ajouter une configuration de débogage » dans la barre de titre de l’éditeur pour les fichiers C++.",
	"c_cpp.debuggers.pipeTransport.description": "Quand ce paramètre est présent, indique au débogueur de se connecter à un ordinateur distant en se servant d'un autre exécutable comme canal de relais d'entrée/de sortie standard entre VS Code et l'exécutable du back-end du débogueur MI (par exemple, gdb).",
	"c_cpp.debuggers.pipeTransport.default.pipeProgram": "entrez le chemin d’accès complet pour le nom du programme de canal, par exemple « /usr/bin/ssh ».",
	"c_cpp.debuggers.pipeTransport.default.debuggerPath": "Chemin complet du débogueur sur la machine cible, par exemple /usr/bin/gdb.",
	"c_cpp.debuggers.pipeTransport.debuggerPath.description": "Chemin complet du débogueur sur la machine cible, par exemple /usr/bin/gdb.",
	"c_cpp.debuggers.pipeTransport.pipeCwd.description": "Chemin complet du répertoire de travail du programme canal.",
	"c_cpp.debuggers.pipeTransport.pipeProgram.description": "Commande canal complète à exécuter.",
	"c_cpp.debuggers.pipeTransport.pipeArgs.description": "Arguments de ligne de commande passés au programme canal pour configurer la connexion.",
	"c_cpp.debuggers.pipeTransport.pipeEnv.description": "Variables d'environnement passées au programme canal.",
	"c_cpp.debuggers.pipeTransport.quoteArgs.description": "Si des arguments individuels de pipeProgram contiennent des caractères tels que des espaces ou des tabulations, doivent-ils être placés entre guillemets? Si la valeur est «false», la commande de débogueur n'est plus automatiquement placée entre guillemets. La valeur par défaut est «true».",
	"c_cpp.debuggers.logging.description": "Indicateurs facultatifs pour déterminer les types de messages à journaliser dans la console de débogage.",
	"c_cpp.debuggers.logging.exceptions.description": "Indicateur facultatif pour déterminer si les messages d'exception doivent être journalisés dans la console de débogage. La valeur par défaut est true.",
	"c_cpp.debuggers.logging.moduleLoad.description": "Indicateur facultatif pour déterminer si les événements de chargement de module doivent être journalisés dans la console de débogage. La valeur par défaut est true.",
	"c_cpp.debuggers.logging.programOutput.description": "Indicateur facultatif pour déterminer si la sortie du programme doit être journalisée dans la console de débogage. La valeur par défaut est true.",
	"c_cpp.debuggers.logging.engineLogging.description": "Indicateur facultatif pour déterminer si les messages du moteur de débogage de diagnostic doivent être journalisés dans la console de débogage. La valeur par défaut est false.",
	"c_cpp.debuggers.logging.trace.description": "Indicateur facultatif pour déterminer si le suivi de commande de l'adaptateur de diagnostic doit être journalisé dans la console de débogage. La valeur par défaut est false.",
	"c_cpp.debuggers.logging.traceResponse.description": "Indicateur facultatif pour déterminer si le suivi de commande et de réponse de l'adaptateur de diagnostic doit être journalisé dans la console de débogage. La valeur par défaut est false.",
	"c_cpp.debuggers.cppvsdbg.logging.threadExit.description": "Indicateur facultatif pour déterminer si les messages indiquant la sortie du thread doivent être journalisés dans la console de débogage. Valeur par défaut : 'false'.",
	"c_cpp.debuggers.cppvsdbg.logging.processExit.description": "Indicateur facultatif pour déterminer si les messages indiquant la sortie du processus cible doivent être journalisés dans la console de débogage. Valeur par défaut : 'true'.",
	"c_cpp.debuggers.text.description": "Commande de débogueur à exécuter.",
	"c_cpp.debuggers.description.description": "Description facultative de la commande.",
	"c_cpp.debuggers.ignoreFailures.description": "Si la valeur est true, les échecs de la commande doivent être ignorés. La valeur par défaut est false.",
	"c_cpp.debuggers.program.description": "Chemin complet du programme exécutable.",
	"c_cpp.debuggers.args.description": "Arguments de ligne de commande passés au programme.",
	"c_cpp.debuggers.cppdbg.type.description": "Type du moteur. Doit être \"cppdbg\".",
	"c_cpp.debuggers.cppvsdbg.type.description": "Type du moteur. Doit être \"cppvsdbg\".",
	"c_cpp.debuggers.targetArchitecture.description": "Architecture de l'élément débogué. Elle est automatiquement détectée, sauf si ce paramètre est défini. Les valeurs autorisées sont x86, arm, arm64, mips, x64, amd64, x86_64.",
	"c_cpp.debuggers.cwd.description": "Répertoire de travail de la cible.",
	"c_cpp.debuggers.setupCommands.description": "Une ou plusieurs commandes GDB/LLDB à exécuter pour configurer le débogueur sous-jacent. Exemple : \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].",
	"c_cpp.debuggers.postRemoteConnectCommands.description": "Une ou plusieurs commandes qui s’exécutent après une connexion à distance à un serveur de débogage.",
	"c_cpp.debuggers.customLaunchSetupCommands.description": "Si ceci est indiqué, les commandes par défaut utilisées pour lancer une cible sont remplacées par d'autres commandes. Par exemple, \"-target-attach\" permet d'attacher un processus cible. Une liste de commandes vide remplace les commandes de lancement, ce qui peut être utile si le débogueur reçoit des options de lancement sous forme d'options de ligne de commande. Exemple : \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].",
	"c_cpp.debuggers.launchCompleteCommand.description": "Commande à exécuter une fois le débogueur entièrement configuré pour déclencher l'exécution du processus cible. Les valeurs autorisées sont \"exec-run\", \"exec-continue\", \"None\". La valeur par défaut est \"exec-run\".",
	"c_cpp.debuggers.cppdbg.visualizerFile.description": "Fichier .natvis à utiliser pendant le débogage de ce processus. Cette option n'est pas compatible avec l'impression en mode Pretty GDB. Consultez également \"showDisplayString\" en cas d'utilisation de ce paramètre.",
	"c_cpp.debuggers.cppdbg.svdPath.description": "Chemin d’accès complet au fichier SVD d’un appareil incorporé",
	"c_cpp.debuggers.cppvsdbg.visualizerFile.description": "Fichier .natvis à utiliser pendant le débogage de ce processus.",
	"c_cpp.debuggers.showDisplayString.description": "Quand un visualizerFile est spécifié, showDisplayString active la chaîne d'affichage. Si vous activez cette option, les performances peuvent être ralenties pendant le débogage.",
	"c_cpp.debuggers.environment.description": "Variables d’environnement à ajouter à l’environnement du programme. Exemple : [ { « nom »: « config », « valeur » : « Débogage » } ], et non [ { « config »: « Débogage » } ].",
	"c_cpp.debuggers.envFile.description": "Chemin absolu d'un fichier contenant des définitions de variable d'environnement. Ce fichier a des paires clé-valeur séparées par un signe égal par ligne. Par exemple, CLÉ=VALEUR.",
	"c_cpp.debuggers.additionalSOLibSearchPath.description": "Liste de répertoires séparés par des points-virgules à utiliser pour rechercher des fichiers .so. Exemple : \"c:\\dir1;c:\\dir2\".",
	"c_cpp.debuggers.MIMode.description": "Indique le débogueur de console auquel MIDebugEngine se connecte. Les valeurs autorisées sont \"gdb\" \"lldb\".",
	"c_cpp.debuggers.miDebuggerPath.description": "Chemin du débogueur MI (par exemple gdb). Si aucune valeur n'est spécifiée, le chemin du débogueur est recherché en premier lieu.",
	"c_cpp.debuggers.miDebuggerArgs.description": "Arguments supplémentaires pour le débogueur MI (par exemple gdb).",
	"c_cpp.debuggers.miDebuggerServerAddress.description": "Adresse réseau du serveur du débogueur MI auquel se connecter (par exemple : localhost:1234).",
	"c_cpp.debuggers.stopAtEntry.description": "Paramètre facultatif. Si la valeur est true, le débogueur doit s'arrêter au point d'entrée de la cible. Si processId est passé, le paramètre n'a aucun effet.",
	"c_cpp.debuggers.debugServerPath.description": "Chemin complet facultatif au serveur de débogage à lancer (valeur par défaut : null). Utilisé conjointement avec \"miDebugServerAddress\" ou votre propre serveur avec \"customSetupCommand\" qui exécute \"-target-select remote <server:port>\".",
	"c_cpp.debuggers.debugServerArgs.description": "Arguments facultatifs du serveur de débogage. La valeur par défaut est null.",
	"c_cpp.debuggers.serverStarted.description": "Modèle facultatif de démarrage du serveur à rechercher dans la sortie du serveur de débogage. La valeur par défaut est null.",
	"c_cpp.debuggers.filterStdout.description": "Permet de rechercher dans le flux stdout le modèle correspondant au démarrage du serveur, et de journaliser stdout dans la sortie de débogage. La valeur par défaut est true.",
	"c_cpp.debuggers.filterStderr.description": "Permet de rechercher dans le flux stderr le modèle correspondant au démarrage du serveur, et de journaliser stderr dans la sortie de débogage. La valeur par défaut est false.",
	"c_cpp.debuggers.serverLaunchTimeout.description": "Temps facultatif, en millisecondes, pendant lequel le débogueur doit attendre que debugServer démarre. La valeur par défaut est 10 000.",
	"c_cpp.debuggers.coreDumpPath.description": "Chemin complet facultatif d'un fichier d'image mémoire principal pour le programme spécifié. La valeur par défaut est null.",
	"c_cpp.debuggers.cppdbg.externalConsole.description": "Si la valeur est true, une console est lancée pour l'élément débogué. Si la valeur est false, sur Linux et Windows, il s'affiche dans la console intégrée.",
	"c_cpp.debuggers.cppvsdbg.externalConsole.description": "[Déprécié par 'console'] Si la valeur est true, une console est lancée pour l'élément débogué. Si la valeur est false, aucune console n'est lancée.",
	"c_cpp.debuggers.cppvsdbg.console.description": "Emplacement du lancement de la cible de débogage. En l'absence de valeur définie, la valeur par défaut est 'internalConsole'.",
	"c_cpp.debuggers.cppvsdbg.console.internalConsole.description": "Sortie vers le VS Code Console de débogage. Cela ne prend pas en charge la lecture de l’entrée de console (par exemple : std::cin ou scanf).",
	"c_cpp.debuggers.cppvsdbg.console.integratedTerminal.description": "terminal intégré de VS Code.",
	"c_cpp.debuggers.cppvsdbg.console.externalTerminal.description": "Les applications console sont lancées dans une fenêtre de terminal externe. La fenêtre est réutilisée dans les scénarios de redémarrage et ne disparaît pas automatiquement à la fermeture de l'application.",
	"c_cpp.debuggers.cppvsdbg.console.newExternalWindow.description": "Les applications console sont lancées dans leur propre fenêtre de console externe, qui se ferme à l'arrêt de l'application. Les applications non-console s'exécutent sans terminal, et stdout/stderr est ignoré.",
	"c_cpp.debuggers.avoidWindowsConsoleRedirection.description": "Si la valeur est true, désactive la redirection de la console de l'élément débogué nécessaire pour prendre en charge le terminal intégré.",
	"c_cpp.debuggers.sourceFileMap.description": "Mappages de fichiers sources facultatifs passés au moteur de débogage. Exemple : { « /original/source/path »:\"/current/source/path » }.",
	"c_cpp.debuggers.processId.anyOf.description": "ID de processus facultatif auquel attacher le débogueur. Utilisez \"${command:pickProcess}\" pour obtenir la liste des processus locaux en cours d'exécution à attacher. Notez que certaines plateformes nécessitent des privilèges d'administrateur pour attacher un processus.",
	"c_cpp.debuggers.symbolSearchPath.description": "Liste de répertoires séparés par des points-virgules à utiliser pour rechercher les fichiers de symboles (c'est-à-dire, pdb). Exemple : \"c:\\dir1;c:\\dir2\".",
	"c_cpp.debuggers.dumpPath.description": "Chemin complet facultatif d'un fichier d'image mémoire pour le programme spécifié. Exemple : \"c:\\temp\\app.dmp\". La valeur par défaut est null.",
	"c_cpp.debuggers.enableDebugHeap.description": "Si la valeur est false, le processus est lancé avec le tas de débogage désactivé. Cette valeur définit la variable d'environnement '_NO_DEBUG_HEAP' sur '1'.",
	"c_cpp.debuggers.symbolLoadInfo.description": "Contrôle explicite du chargement des symboles.",
	"c_cpp.debuggers.symbolLoadInfo.loadAll.description": "Si la valeur est true, les symboles de toutes les bibliothèques sont chargés. Sinon, aucun symbole solib n'est chargé. La valeur par défaut est true.",
	"c_cpp.debuggers.symbolLoadInfo.exceptionList.description": "Liste des noms de fichiers (caractères génériques autorisés) séparés par des points-virgules ;. Modifie le comportement de LoadAll. Si LoadAll a la valeur true, les symboles des bibliothèques correspondant à un nom de la liste ne sont pas chargés. Sinon, les symboles des bibliothèques ayant une correspondance sont chargés. Exemple : \"foo.so;bar.so\"",
	"c_cpp.debuggers.requireExactSource.description": "Indicateur facultatif pour exiger que le code source actuel corresponde au fichier pdb.",
	"c_cpp.debuggers.stopAtConnect.description": "Si la valeur est true, le débogueur doit s’arrêter après s’être connecté à la cible. Si la valeur est false, le débogueur continue après la connexion. La valeur par défaut est false.",
	"c_cpp.debuggers.hardwareBreakpoints.description": "Contrôle explicite du comportement du point d’arrêt matériel pour les cibles distantes.",
	"c_cpp.debuggers.hardwareBreakpoints.require.description": "Si la valeur est true, utilisez toujours des points d’arrêt matériels. La valeur par défaut est false.",
	"c_cpp.debuggers.hardwareBreakpoints.limit.description": "Limite facultative du nombre de points d’arrêt matériels disponibles à utiliser. Appliqué uniquement lorsque « require » a la valeur true et que « limit » est supérieur à 0. La valeur par défaut est 0.",
	"c_cpp.taskDefinitions.name.description": "Nom de la tâche.",
	"c_cpp.taskDefinitions.command.description": "Chemin d’accès à un compilateur ou à un script qui effectue la compilation.",
	"c_cpp.taskDefinitions.args.description": "Arguments supplémentaires à passer au compilateur ou au script de compilation.",
	"c_cpp.taskDefinitions.options.description": "Options de commande supplémentaires.",
	"c_cpp.taskDefinitions.options.cwd.description": "Répertoire de travail actif du programme ou script exécuté. En cas d'omission, la racine de l'espace de travail actif de Code est utilisée.",
	"c_cpp.taskDefinitions.detail.description": "Détails supplémentaires de la tâche.",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.description": "Chemins actuels et au moment de la compilation des mêmes arborescences sources. Les fichiers situés dans EditorPath sont mappés au chemin CompileTimePath pour les correspondances de points d'arrêt et sont mappés de CompileTimePath à EditorPath au moment de l'affichage des emplacements d'arborescences des appels de procédure.",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.editorPath.description": "Chemin de l'arborescence source que l'éditeur va utiliser.",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.useForBreakpoints.description": "La valeur est false si cette entrée est utilisée uniquement pour le mappage d'emplacements de frame de pile. La valeur est true si cette entrée doit également être utilisée au moment de la spécification d'emplacements de point d'arrêt.",
	"c_cpp.debuggers.symbolOptions.description": "Options permettant de contrôler la façon dont les symboles (fichiers .pdb) sont trouvés et chargés.",
	"c_cpp.debuggers.VSSymbolOptions.description": "Fournit la configuration pour localiser et charger des symboles sur l’adaptateur de débogage.",
	"c_cpp.debuggers.VSSymbolOptions.searchPaths.description": "Tableau d’URL de serveur de symboles (exemple : http​://MyExampleSymbolServer) ou répertoires (exemple : /build/symbols) pour rechercher des fichiers .pdb. Ces répertoires seront recherchés en plus des emplacements par défaut, en regard du module et du chemin d’accès vers lequel le fichier pdb a été supprimé à l’origine.",
	"c_cpp.debuggers.VSSymbolOptions.searchMicrosoftSymbolServer.description": "Si la valeur est « true », le serveur de symboles Microsoft (https​://msdl.microsoft.com​/download/symbols) est ajouté au chemin de recherche des symboles. Si elle n’est pas spécifiée, cette option a la valeur par défaut « false ».",
	"c_cpp.debuggers.VSSymbolOptions.cachePath.description": "Répertoire dans lequel les symboles téléchargés à partir de serveurs de symboles doivent être mis en cache. S’il n’est pas spécifié, sur Windows, le débogueur a la valeur par défaut %TEMP%\\SymbolCache.",
	"c_cpp.debuggers.VSSymbolOptions.moduleFilter.description": "Fournit des options pour contrôler les modules (fichiers .dll) pour lesquels le débogueur tentera de charger des symboles (fichiers .pdb).",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.description": "Fournit la configuration pour le chargement des symboles sur l’adaptateur de débogage.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.description": "Contrôle les deux modes d’exploitation de base dans lesquels le filtre de module fonctionne.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.loadAllButExcluded.enumDescriptions": "Chargez des symboles pour tous les modules, sauf si le module se trouve dans le tableau « excludedModules ».",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.loadOnlyIncluded.enumDescriptions": "N’essayez pas de charger des symboles pour le module ANY, sauf s’il se trouve dans le tableau « includedModules » ou s’il est inclus par le biais du paramètre « includeSymbolsNextToModules ».",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.excludedModules.description": "Tableau de modules pour lequel le débogueur ne doit PAS charger de symboles. Les caractères génériques (exemple : MonEntreprise.*.dll) sont pris en charge.\n\nCette propriété est ignorée, sauf si « mode » a la valeur «loadAllButExcluded».",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.includedModules.description": "Tableau de modules pour lequel le débogueur doit charger des symboles. Les caractères génériques (exemple : MonEntreprise.*.dll) sont pris en charge.\n\nCette propriété est ignorée, sauf si « mode » a la valeur «loadOnlyIncluded».",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.includeSymbolsNextToModules.description": "Si la valeur est true, pour tout module qui ne figure pas dans le tableau « includedModules », le débogueur vérifie toujours en regard du module lui-même et de l’exécutable de lancement, mais il ne vérifie pas les chemins d’accès dans la liste de recherche de symboles. Cette option a la valeur par défaut « true ».\n\nCette propriété est ignorée, sauf si « mode » a la valeur «loadOnlyIncluded».",
	"c_cpp.semanticTokenTypes.referenceType.description": "Style pour les types référence C++/CLI.",
	"c_cpp.semanticTokenTypes.cliProperty.description": "Style pour les propriétés C++/CLI.",
	"c_cpp.semanticTokenTypes.genericType.description": "Style pour les types génériques C++/CLI.",
	"c_cpp.semanticTokenTypes.valueType.description": "Style pour les types valeur C++/CLI.",
	"c_cpp.semanticTokenTypes.templateFunction.description": "Style pour les fonctions de modèle C++.",
	"c_cpp.semanticTokenTypes.templateType.description": "Style pour les types de modèles C++.",
	"c_cpp.semanticTokenTypes.operatorOverload.description": "Style des opérateurs surchargés C++.",
	"c_cpp.semanticTokenTypes.memberOperatorOverload.description": "Style pour les fonctions membres de l’opérateur surchargé C++.",
	"c_cpp.semanticTokenTypes.newOperator.description": "Style pour les opérateurs C++ `nouveau` ou `supprimer`",
	"c_cpp.semanticTokenTypes.customLiteral.description": "Style pour les littéraux C++ définis par l’utilisateur.",
	"c_cpp.semanticTokenTypes.numberLiteral.description": "Style pour les nombres littéraux C++ définis par l’utilisateur.",
	"c_cpp.semanticTokenTypes.stringLiteral.description": "Style pour les chaînes littérales définies par l’utilisateur C++.",
	"c_cpp.semanticTokenModifiers.global.description": "Style à utiliser pour les symboles globaux.",
	"c_cpp.semanticTokenModifiers.local.description": "Style à utiliser pour les symboles locaux."
}