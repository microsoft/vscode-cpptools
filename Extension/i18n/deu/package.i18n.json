/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"c_cpp.capabilities.untrustedWorkspaces.description": "Mehrere Einstellungen können dazu führen, dass lokale Prozesse für den Arbeitsbereich ausgeführt werden, z. B. C_Cpp.clang_format_path, C_Cpp.addNodeAddonIncludePaths, C_Cpp.default.compilerPath, C_Cpp.default.configurationProvider, and C_Cpp.default.compileCommands und die entsprechenden Eigenschaften in c_cpp_properties.json.",
	"c_cpp.command.configurationSelect.title": "Konfiguration auswählen...",
	"c_cpp.command.configurationProviderSelect.title": "Konfigurationsanbieter ändern...",
	"c_cpp.command.configurationEditJSON.title": "Konfigurationen bearbeiten (JSON)",
	"c_cpp.command.configurationEditUI.title": "Konfigurationen bearbeiten (Benutzeroberfläche)",
	"c_cpp.command.switchHeaderSource.title": "Header/Quelle umschalten",
	"c_cpp.command.enableErrorSquiggles.title": "Fehlerwellenlinien aktivieren",
	"c_cpp.command.disableErrorSquiggles.title": "Fehlerwellenlinien deaktivieren",
	"c_cpp.command.toggleIncludeFallback.title": "Fallback der IntelliSense-Engine bei Includefehlern umschalten",
	"c_cpp.command.toggleDimInactiveRegions.title": "Farbgebung für inaktive Regionen umschalten",
	"c_cpp.command.resetDatabase.title": "IntelliSense-Datenbank zurücksetzen",
	"c_cpp.command.takeSurvey.title": "An Umfrage teilnehmen",
	"c_cpp.command.buildAndDebugActiveFile.title": "Aktive Datei erstellen und debuggen",
	"c_cpp.command.logDiagnostics.title": "Diagnose protokollieren",
	"c_cpp.command.referencesViewGroupByType.title": "Nach Verweistyp gruppieren",
	"c_cpp.command.referencesViewUngroupByType.title": "Gruppierung nach Verweistyp aufheben",
	"c_cpp.command.rescanWorkspace.title": "Arbeitsbereich erneut überprüfen",
	"c_cpp.command.vcpkgClipboardInstallSuggested.title": "vcpkg-Installationsbefehl in Zwischenablage kopieren",
	"c_cpp.command.vcpkgOnlineHelpSuggested.title": "vcpkg-Hilfeseite aufrufen",
	"c_cpp.command.generateEditorConfig.title": "EditorConfig-Inhalte aus VC-Formateinstellungen generieren",
	"c_cpp.command.GoToNextDirectiveInGroup.title": "Zur nächsten Präprozessoranweisung in bedingter Gruppe wechseln",
	"c_cpp.command.GoToPrevDirectiveInGroup.title": "Zur vorherigen Präprozessoranweisung in bedingter Gruppe wechseln",
	"c_cpp.configuration.formatting.description": "Konfiguriert das Formatierungsmodul.",
	"c_cpp.configuration.formatting.clangFormat.description": "Zum Formatieren von Code wird \"clang-format\" verwendet.",
	"c_cpp.configuration.formatting.vcFormat.description": "Das Visual C++-Formatierungsmodul wird zum Formatieren von Code verwendet.",
	"c_cpp.configuration.formatting.Default.description": "Standardmäßig wird „clang-format“ zum Formatieren des Codes verwendet. Das Visual C++-Formatierungsmodul wird jedoch verwendet, wenn eine „.editorconfig“-Datei mit relevanten Einstellungen näher am zu formatierenden Code gefunden wird und „clang_format_style“ folgender Standardwert ist: „file“.",
	"c_cpp.configuration.formatting.Disabled.description": "Die Codeformatierung wird deaktiviert.",
	"c_cpp.configuration.vcFormat.indent.braces.description": "Geschweifte Klammern werden um den im Editor in der Einstellung für die Tabstoppgröße angegebenen Wert eingerückt.",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.description": "Legt den Bezugspunkt für den neuen Zeileneinzug fest.",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.outermostParenthesis.description": "Eine neue Zeile wird relativ zur äußersten geöffneten Klammer eingezogen.",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.innermostParenthesis.description": "Eine neue Zeile wird relativ zur innersten geöffneten Klammer eingezogen.",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.statementBegin.description": "Eine neue Zeile wird relativ zum Anfang der aktuellen Anweisung eingezogen.",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.description": "Beim Einfügen einer neuen Zeile wird diese unter der runden Klammer links oder basierend auf \"C_Cpp.vcFormat.indent.multiLineRelativeTo\" ausgerichtet.",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.alignToParenthesis.description": "Die neue Zeile wird unter der öffnenden Klammer ausgerichtet.",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.indent.description": "Die neue Zeile wird basierend auf \"C_Cpp.vcFormat.indent.multiLineRelativeTo\" eingerückt.",
	"c_cpp.configuration.vcFormat.indent.preserveWithinParentheses.description": "In vorhandenem Code wird die vorhandene Einstellung zum Einzug neuer Zeilen innerhalb von Klammern beibehalten.",
	"c_cpp.configuration.vcFormat.indent.caseLabels.description": "Bezeichnungen werden relativ zu switch-Anweisungen um den im Editor in der Einstellung für die Tabstoppgröße angegebenen Wert eingerückt.",
	"c_cpp.configuration.vcFormat.indent.caseContents.description": "Der Code in einem case-Block wird relativ zu seiner Bezeichnung um den im Editor in der Einstellung für die Tabstoppgröße angegebenen Wert eingerückt.",
	"c_cpp.configuration.vcFormat.indent.caseContentsWhenBlock.description": "Geschweifte Klammern nach einer case-Anweisung um den im Editor in der Einstellung für die Tabstoppgröße angegebenen Wert einrücken",
	"c_cpp.configuration.vcFormat.indent.lambdaBracesWhenParameter.description": "Geschweifte Klammern von Lambdas, die als Funktionsparameter relativ zum Anfang der Anweisung verwendet werden, um den im Editor in der Einstellung für die Tabstoppgröße angegebenen Wert einrücken",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.description": "Die Position von goto-Bezeichnungen",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.oneLeft.description": "Goto-Bezeichnungen werden links vom aktuellen Codeeinzug um den im Editor in der Einstellung für die Tabstoppgröße angegebenen Wert positioniert.",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.leftmostColumn.description": "Positionieren Sie goto-Bezeichnungen ganz links im Code.",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.none.description": "Goto-Bezeichnungen werden nicht formatiert.",
	"c_cpp.configuration.vcFormat.indent.preprocessor.description": "Position der Präprozessoranweisungen",
	"c_cpp.configuration.vcFormat.indent.preprocessor.oneLeft.description": "Präprozessoranweisungen werden links vom aktuellen Codeeinzug um den im Editor in der Einstellung für die Tabstoppgröße angegebenen Wert positioniert.",
	"c_cpp.configuration.vcFormat.indent.preprocessor.leftmostColumn.description": "Präprozessoranweisungen werden am linken Rand des Codes positioniert.",
	"c_cpp.configuration.vcFormat.indent.preprocessor.none.description": "Präprozessoranweisungen werden nicht formatiert.",
	"c_cpp.configuration.vcFormat.indent.accessSpecifiers.description": "Zugriffsspezifizierer werden relativ zu Klassen- oder Strukturdefinitionen um den im Editor in der Einstellung für die Tabstoppgröße angegebenen Wert eingerückt.",
	"c_cpp.configuration.vcFormat.indent.namespaceContents.description": "Der Code wird relativ zu seinem einschließenden Namespace um den im Editor in der Einstellung für die Tabstoppgröße angegebenen Wert eingerückt.",
	"c_cpp.configuration.vcFormat.indent.preserveComments.description": "Der Einzug von Kommentaren wird bei Formatierungsvorgängen nicht geändert.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.namespace.description": "Die Position der öffnenden geschweiften Klammern für Namespaces",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.type.description": "Die Position der öffnenden geschweiften Klammern für Typdefinitionen",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.lambda.description": "Die Position der öffnenden geschweiften Klammern für Lambda-Funktionen",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.function.description": "Die Position der öffnenden geschweiften Klammern für Funktionen",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.block.description": "Die Position der öffnenden geschweiften Klammern für Kontrollblöcke",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.newLine.description": "Öffnende geschweifte Klammern werden in eine neue Zeile verschoben.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.sameLine.description": "Öffnende geschweifte Klammern verbleiben in derselben Zeile, und es wird vor jeder Klammer ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.ignore.description": "Geschweifte Klammern links werden nicht formatiert.",
	"c_cpp.configuration.vcFormat.newLine.scopeBracesOnSeparateLines.description": "Geschweifte Klammern links und rechts für Bereiche werden in getrennten Zeilen platziert.",
	"c_cpp.configuration.vcFormat.newLine.closeBraceSameLine.emptyType.description": "In leeren Typen werden schließende geschweifte Klammern in dieselbe Zeile wie öffnende geschweifte Klammern verschoben.",
	"c_cpp.configuration.vcFormat.newLine.closeBraceSameLine.emptyFunction.description": "In leeren Funktionskörpern werden geschweifte Klammern rechts in dieselbe Zeile wie die dazugehörenden geschweiften Klammern links verschoben.",
	"c_cpp.configuration.vcFormat.newLine.beforeCatch.description": "\"catch\" und ähnliche Schlüsselwörter werden in einer neuen Zeile platziert.",
	"c_cpp.configuration.vcFormat.newLine.beforeElse.description": "\"else\" wird in einer neuen Zeile platziert.",
	"c_cpp.configuration.vcFormat.newLine.beforeWhileInDoWhile.description": "\"while\" wird in einer do-while-Schleife in einer neuen Zeile platziert.",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.description": "Abstand zwischen Funktionsnamen und öffnende Klammern von Argumentenlisten",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.insert.description": "Vor der öffnenden Klammer einer Funktion wird ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.remove.description": "Leerzeichen vor öffnenden Klammern von Funktionen werden entfernt.",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.ignore.description": "Die Leerzeichen werden wie eingegeben beibehalten.",
	"c_cpp.configuration.vcFormat.space.withinParameterListParentheses.description": "In Funktionsparameterlisten wird nach der runden Klammer links und auch vor der runden Klammer rechts ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.betweenEmptyParameterListParentheses.description": "Wenn eine Funktionsparameterliste leer ist, wird zwischen den runden Klammern ein Leerzeichen eingefügt.",
	"c_cpp.configuration.vcFormat.space.afterKeywordsInControlFlowStatements.description": "In Ablaufsteuerungsanweisungen wird zwischen Schlüsselwort und runder Klammer links ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.withinControlFlowStatementParentheses.description": "In Ablaufsteuerungsanweisungen wird nach der runden Klammer links und auch vor der runden Klammer rechts ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.beforeLambdaOpenParenthesis.description": "Vor der öffnenden Klammer von Lambdaargumentlisten wird ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.withinCastParentheses.description": "Bei einer Umwandlung im C-Stil wird nach der runden Klammer links und auch vor der runden Klammer rechts ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.afterCastCloseParenthesis.description": "Nach der schließenden Klammer einer Umwandlung im C-Stil wird ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.withinExpressionParentheses.description": "Nach der öffnenden und vor der schließenden Klammer eines Ausdrucks in Klammern wird ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.beforeBlockOpenBrace.description": "Vor den öffnenden geschweiften Klammern von Bereichsblöcken wird ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.betweenEmptyBraces.description": "Wenn geschweifte Klammern leer sind und sich in derselben Zeile befinden, wird ein Leerzeichen zwischen ihnen eingefügt.",
	"c_cpp.configuration.vcFormat.space.beforeInitializerListOpenBrace.description": "Vor der öffnenden geschweiften Klammer einheitlicher Initialisierungs- und Initialisiererlisten wird ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.withinInitializerListBraces.description": "In einheitlichen Initialisierungs- und Initialisiererlisten wird nach der geschweiften Klammer links und auch vor der geschweiften Klammer rechts ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.preserveInInitializerList.description": "Leerzeichen um Kommas werden in einheitlichen Initialisierungs- und Initialisiererlisten beibehalten.",
	"c_cpp.configuration.vcFormat.space.beforeOpenSquareBracket.description": "Vor öffnenden eckigen Klammern wird ein Leerzeichen eingefügt.",
	"c_cpp.configuration.vcFormat.space.withinSquareBrackets.description": "Es wird ein Leerzeichen nach der öffnenden eckigen Klammer und vor der schließenden eckigen Klammer eingefügt.",
	"c_cpp.configuration.vcFormat.space.beforeEmptySquareBrackets.description": "Wenn die eckigen Klammern leer sind, wird vor der öffnenden Klammer ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.betweenEmptySquareBrackets.description": "Wenn die eckigen Klammern leer sind, wird zwischen diesen ein Leerzeichen eingefügt.",
	"c_cpp.configuration.vcFormat.space.groupSquareBrackets.description": "Für mehrdimensionale Arrays werden alle Leerzeichen zwischen den Klammern entfernt. Andere Leerzeicheneinstellungen werden überschrieben.",
	"c_cpp.configuration.vcFormat.space.withinLambdaBrackets.description": "Es wird ein Leerzeichen nach der öffnenden eckigen Klammer und vor der schließenden eckigen Klammer eingefügt.",
	"c_cpp.configuration.vcFormat.space.betweenEmptyLambdaBrackets.description": "Wenn die eckigen Klammern leer sind, wird zwischen diesen ein Leerzeichen eingefügt.",
	"c_cpp.configuration.vcFormat.space.beforeComma.description": "Vor jedem Komma wird ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.afterComma.description": "Nach jedem Komma wird ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.removeAroundMemberOperators.description": "Leerzeichen um Memberzugriffsoperatoren, Pointer-to-Member-Operatoren und Bereichsauflösungsoperatoren werden entfernt.",
	"c_cpp.configuration.vcFormat.space.beforeInheritanceColon.description": "Für vererbte Typen wird in Klassendefinitionen vor dem Doppelpunkt ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.beforeConstructorColon.description": "In Konstruktordefinitionen wird vor dem Doppelpunkt ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.removeBeforeSemicolon.description": "Vor allen Semikolons werden die Leerzeichen entfernt.",
	"c_cpp.configuration.vcFormat.space.insertAfterSemicolon.description": "Nach jedem Semikolon wird ein Leerzeichen eingefügt.",
	"c_cpp.configuration.vcFormat.space.removeAroundUnaryOperator.description": "Die Leerzeichen zwischen unären Operatoren und den Operanden werden entfernt.",
	"c_cpp.configuration.vcFormat.space.aroundBinaryOperator.description": "Leerzeichen um binäre Operatoren",
	"c_cpp.configuration.vcFormat.space.aroundAssignmentOperator.description": "Leerzeichen um Zuweisungsoperatoren",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.description": "Leerzeichen um Zeiger- und Verweisoperatoren",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.left.description": "Zeiger- und Verweisoperatoren werden links ausgerichtet.",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.center.description": "Zeiger- und Verweisoperatoren werden zentriert.",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.right.description": "Zeiger- und Verweisoperatoren werden rechts ausgerichtet.",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.ignore.description": "Zeiger- und Verweisoperatoren werden nicht formatiert.",
	"c_cpp.configuration.vcFormat.space.aroundTernaryOperator.description": "Leerzeichen um bedingte Operatoren",
	"c_cpp.configuration.vcFormat.space.aroundOperators.insert.description": "Vor und nach dem Operator werden Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.aroundOperators.remove.description": "Die Leerzeichen vor und nach dem Operator werden entfernt.",
	"c_cpp.configuration.vcFormat.space.aroundOperators.ignore.description": "Die Leerzeichen werden wie eingegeben beibehalten.",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.description": "Umbruchoptionen für Blöcke",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.oneLiners.description": "Ein vollständiger Codeblock, der in einer Zeile eingegeben wird, wird unabhängig von den Einstellungen für neue Zeilen im VC-Format in einer Zeile beibehalten.",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.allOneLineScopes.description": "Jeglicher Code, in dem die öffnende und schließende geschweifte Klammer in einer Zeile eingegeben wird, wird unabhängig von den Einstellungen für neue Zeilen im VC-Format in einer Zeile beibehalten.",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.never.description": "Codeblöcke werden immer basierend auf den Einstellungen für neue Zeilen im VC-Format formatiert.",
	"c_cpp.configuration.clang_format_path.description": "Der vollständige Pfad der ausführbaren clang-format-Datei. Wenn dieser nicht angegeben wird und clang-format im Umgebungspfad verfügbar ist, wird die Datei im Umgebungspfad verwendet. Ist sie nicht im Umgebungspfad verfügbar, wird eine im Erweiterungspaket enthaltene Kopie von clang-format verwendet.",
	"c_cpp.configuration.clang_format_style.description": "Formatvorlage für Code. Unterstützt derzeit Folgendes: Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit. Verwenden Sie \"file\", um die Formatvorlage aus einer .clang-format-Datei im aktuellen oder übergeordneten Verzeichnis zu laden. Verwenden Sie {Schlüssel: Wert, ...}, um bestimmte Parameter festzulegen. Die Formatvorlage \"Visual Studio\" etwa sieht folgendermaßen aus: { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }",
	"c_cpp.configuration.clang_format_fallbackStyle.description": "Name des vordefinierten Stils, der als Fallback verwendet wird, falls das clang-Format mit der Formatvorlage \"file\" aufgerufen wird, aber die .clang-format-Datei nicht gefunden wird. Mögliche Werte sind \"Visual Studio\", \"LLVM\", \"Google\", \"Chromium\", \"Mozilla\", \"WebKit\" oder \"none\", oder verwenden Sie {key: value, ...}, um bestimmte Parameter festzulegen. Die Formatvorlage \"Visual Studio\" z. B. sieht etwa folgendermaßen aus: { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }",
	"c_cpp.configuration.clang_format_sortIncludes.description": "Wenn diese Option festgelegt ist, wird das durch den SortIncludes-Parameter festgelegte Sortierverhalten für Includes überschrieben.",
	"c_cpp.configuration.intelliSenseEngine.description": "Hiermit wird der IntelliSense-Anbieter gesteuert. \"Tagparser\" erzielt \"unscharfe\" Ergebnisse, die nicht kontextbezogen sind. \"Standard\" erzielt kontextabhängige Ergebnisse. \"Deaktiviert\" deaktiviert C/C++-Sprachdienstfeatures.",
	"c_cpp.configuration.intelliSenseEngineFallback.description": "Hiermit wird gesteuert, ob die IntelliSense-Engine bei Übersetzungseinheiten, die #include-Fehler enthalten, automatisch zum Tagparser wechselt.",
	"c_cpp.configuration.autocomplete.description": "Hiermit wird der Anbieter für die automatische Vervollständigung gesteuert. Die Einstellung \"Default\" verwendet die aktive IntelliSense-Engine. Bei der Einstellung \"Disabled\" wird die von Visual Studio Code bereitgestellte wortbasierte Vervollständigung verwendet.",
	"c_cpp.configuration.errorSquiggles.description": "Hiermit wird gesteuert, ob vermutete Kompilierungsfehler, die von der IntelliSense-Engine erkannt werden, an den Editor zurückgemeldet werden. Diese Einstellung wird von der Tagparser-Engine ignoriert.",
	"c_cpp.configuration.dimInactiveRegions.description": "Hiermit wird gesteuert, ob inaktive Präprozessorblöcke anders eingefärbt werden als aktiver Code. Diese Einstellung hat keine Auswirkungen, wenn IntelliSense deaktiviert ist oder wenn das standardmäßige Design mit hohem Kontrast verwendet wird.",
	"c_cpp.configuration.inactiveRegionOpacity.description": "Hiermit wird die Deckkraft von inaktiven Präprozessorblöcken gesteuert. Mögliche Werte liegen zwischen 0,1 und 1,0. Diese Einstellung gilt nur, wenn das Abblenden inaktiver Regionen aktiviert ist.",
	"c_cpp.configuration.inactiveRegionForegroundColor.description": "Hiermit wird die Schriftfarbe von inaktiven Präprozessorblöcken gesteuert. Die Eingabe erfolgt in Form eines hexadezimalen Farbcodes oder einer gültigen Designfarbe. Wenn diese Option nicht festgelegt ist, wird standardmäßig das Syntaxfarbschema des Editors verwendet. Diese Einstellung gilt nur, wenn das Abblenden inaktiver Regionen aktiviert ist.",
	"c_cpp.configuration.inactiveRegionBackgroundColor.description": "Hiermit wird die Hintergrundfarbe von inaktiven Präprozessorblöcken gesteuert. Die Eingabe erfolgt in Form eines hexadezimalen Farbcodes oder einer gültigen Designfarbe. Wenn diese Option nicht festgelegt ist, ist die Anzeige standardmäßig transparent. Diese Einstellung gilt nur, wenn das Abblenden inaktiver Regionen aktiviert ist.",
	"c_cpp.configuration.loggingLevel.description": "Die Ausführlichkeit der Protokollierung im Ausgabebereich. Die Reihenfolge der Stufen von \"am wenigsten ausführlich\" bis \"am ausführlichsten\" lautet: None < Error < Warning < Information < Debug.",
	"c_cpp.configuration.autoAddFileAssociations.description": "Hiermit wird gesteuert, ob Dateien automatisch zu \"files.associations\" hinzugefügt werden, wenn sie das Ziel eines Navigationsvorgangs aus einer C/C++-Datei sind.",
	"c_cpp.configuration.workspaceParsingPriority.description": "Hiermit wird gesteuert, ob beim Analysieren der nicht aktiven Arbeitsbereichsdateien Standbyfunktionen verwendet werden, um eine 100-prozentige Auslastung der CPU zu vermeiden. Die Werte \"highest\", \"high\", \"medium\" und \"low\" entsprechen jeweils etwa 100, 75, 50 und 25 % CPU-Auslastung.",
	"c_cpp.configuration.workspaceSymbols.description": "Die Symbole, die in die Abfrageergebnisse einbezogen werden sollen, wenn \"Zu Symbol im Arbeitsbereich wechseln\" aufgerufen wird.",
	"c_cpp.configuration.exclusionPolicy.description": "Weist die Erweiterung an, wann die Einstellung \"files.exclude\" verwendet werden soll, wenn ermittelt wird, welche Dateien beim Durchlaufen der Pfade im Array \"browse.path\" der Codenavigationsdatenbank hinzugefügt werden sollen. \"checkFolders\" bedeutet, dass die Ausschlussfilter nur einmal pro Ordner ausgewertet werden (einzelne Dateien sind nicht aktiviert). \"checkFilesAndFolders\" bedeutet, dass die Ausschlussfilter für jede gefundene Datei und jeden gefundenen Ordner ausgewertet werden. Wenn die Einstellung \"files.exclude\" nur Ordner enthält, ist \"checkFolders\" die beste Wahl und erhöht die Geschwindigkeit, mit der die Erweiterung die Codenavigationsdatenbank initialisieren kann.",
	"c_cpp.configuration.preferredPathSeparator.description": "Das Zeichen, das als Pfadtrennzeichen für #include-Ergebnisse der automatischen Vervollständigung verwendet wird.",
	"c_cpp.configuration.simplifyStructuredComments.description": "Wenn TRUE, zeigen die QuickInfos für \"Darauf zeigen\" und \"Automatisch abschließen\" nur bestimmte Bezeichnungen strukturierter Kommentare an. Andernfalls werden alle Kommentare angezeigt.",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.string.description": "Das Muster, mit dem ein mehrzeiliger oder einzeiliger Kommentarblock beginnt. Das Fortsetzungsmuster wird standardmäßig auf \"*\" für mehrzeilige Kommentarblöcke oder auf diese Zeichenfolge für einzeilige Kommentarblöcke festgelegt.",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.begin.description": "Das Muster, mit dem ein mehrzeiliger oder einzeiliger Kommentarblock beginnt.",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.continue.description": "Der Text, der in der nächsten Zeile eingefügt wird, wenn in einem mehrzeiligen oder einzeiligen Kommentarblock die EINGABETASTE gedrückt wird.",
	"c_cpp.configuration.commentContinuationPatterns.description": "Definiert das Editor-Verhalten, wenn innerhalb eines mehrzeiligen oder einzeiligen Kommentarblocks die EINGABETASTE gedrückt wird.",
	"c_cpp.configuration.configurationWarnings.description": "Bestimmt, ob Popupbenachrichtigungen angezeigt werden, wenn eine Konfigurationsanbietererweiterung keine Konfiguration für eine Quelldatei bereitstellen kann.",
	"c_cpp.configuration.intelliSenseCachePath.description": "Hiermit wird der Ordnerpfad für zwischengespeicherte vorkompilierte Header definiert, die von IntelliSense verwendet werden. Der Standardcachepfad lautet unter Windows \"%LocalAppData%/Microsoft/vscode-cpptools\", unter Linux \"$XDG_CACHE_HOME/vscode-cpptools/\" (bzw. \"$HOME/.cache/vscode-cpptools/\", wenn XDG_CACHE_HOME nicht definiert ist) und auf dem Mac \"$HOME/Library/Caches/vscode-cpptools/\". Der Standardpfad wird verwendet, wenn kein Pfad angegeben wurde oder ein angegebener Pfad ungültig ist.",
	"c_cpp.configuration.intelliSenseCacheSize.description": "Maximale Größe des Festplattenspeichers pro Arbeitsbereich in MB für zwischengespeicherte vorkompilierte Header. Die tatsächliche Nutzung schwankt möglicherweise um diesen Wert. Die Standardgröße beträgt 5120 MB. Das Zwischenspeichern vorkompilierter Header ist deaktiviert, wenn die Größe 0 ist.",
	"c_cpp.configuration.intelliSenseMemoryLimit.description": "Grenzwert für die Arbeitsspeicherauslastung in MB für einen IntelliSense-Prozess. Der Standardgrenzwert beträgt 4096 MB, der Höchstwert liegt bei 16 GB. Bei Überschreiten des Grenzwerts wird die Erweiterung heruntergefahren, und ein IntelliSense-Prozess wird neu gestartet.",
	"c_cpp.configuration.intelliSenseUpdateDelay.description": "Steuert die Verzögerung in Millisekunden, bevor IntelliSense nach einer Änderung aktualisiert wird.",
	"c_cpp.configuration.default.includePath.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"includePath\" nicht in c_cpp_properties.json angegeben ist. Wenn \"includePath\" angegeben ist, fügen Sie dem Array \"${default}\" hinzu, um die Werte aus dieser Einstellung einzufügen.",
	"c_cpp.configuration.default.defines.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"defines\" nicht angegeben ist, oder die einzufügenden Werte, wenn \"${default}\" in \"defines\" vorhanden ist.",
	"c_cpp.configuration.default.macFrameworkPath.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"macFrameworkPath\" nicht angegeben ist, oder die einzufügenden Werte, wenn \"${default}\" in \"macFrameworkPath\" vorhanden ist.",
	"c_cpp.configuration.default.windowsSdkVersion.description": "Die Version des Windows SDK-Includepfads zur Verwendung unter Windows, z. B. \"10.0.17134.0\".",
	"c_cpp.configuration.default.compileCommands.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"compileCommands\" entweder nicht angegeben oder auf \"${default}\" festgelegt ist.",
	"c_cpp.configuration.default.forcedInclude.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"forcedInclude\" nicht angegeben ist, oder die einzufügenden Werte, wenn \"${default}\" in \"forcedInclude\" vorhanden ist.",
	"c_cpp.configuration.default.intelliSenseMode.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"intelliSenseMode\" entweder nicht angegeben oder auf \"${default}\" festgelegt ist.",
	"c_cpp.configuration.default.compilerPath.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"compilerPath\" entweder nicht angegeben oder auf \"${default}\" festgelegt ist.",
	"c_cpp.configuration.default.compilerArgs.description": "Der Wert, der in der Konfiguration verwendet werden soll, wenn \"compilerArgs\" entweder nicht angegeben oder auf \"${default}\" festgelegt ist.",
	"c_cpp.configuration.default.cStandard.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"cStandard\" entweder nicht angegeben oder auf \"${default}\" festgelegt ist.",
	"c_cpp.configuration.default.cppStandard.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"cppStandard\" entweder nicht angegeben oder auf \"${default}\" festgelegt ist.",
	"c_cpp.configuration.default.configurationProvider.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"configurationProvider\" entweder nicht angegeben oder auf \"${default}\" festgelegt ist.",
	"c_cpp.configuration.default.browse.path.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"browse.path\" nicht angegeben ist, oder die einzufügenden Werte, wenn \"${default}\" in \"browse.path\" vorhanden ist.",
	"c_cpp.configuration.default.browse.databaseFilename.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"browse.databaseFilename\" entweder nicht angegeben oder auf \"${default}\" festgelegt ist.",
	"c_cpp.configuration.default.browse.limitSymbolsToIncludedHeaders.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"browse.limitSymbolsToIncludedHeaders\" entweder nicht angegeben oder auf \"${default}\" festgelegt ist.",
	"c_cpp.configuration.default.systemIncludePath.description": "Der Wert, der für den Systemincludepfad verwendet werden soll. Wenn diese Option festgelegt ist, wird der über die Einstellungen \"compilerPath\" und \"compileCommands\" erhaltene Systemincludepfad überschrieben.",
	"c_cpp.configuration.default.enableConfigurationSquiggles.description": "Hiermit wird gesteuert, ob die Erweiterung in \"c_cpp_properties.json\" erkannte Fehler meldet.",
	"c_cpp.configuration.default.customConfigurationVariables.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"customConfigurationVariables\" nicht angegeben ist, oder die einzufügenden Werte, wenn \"${default}\" als Schlüssel in \"customConfigurationVariables\" vorhanden ist.",
	"c_cpp.configuration.updateChannel.description": "Legen Sie den Wert auf \"Insiders\" fest, um die neuesten Insiders-Builds der Erweiterung, die neue Features und Bugfixes enthalten, automatisch herunterzuladen und zu installieren.",
	"c_cpp.configuration.experimentalFeatures.description": "Hiermit wird gesteuert, ob experimentelle Features verwendet werden können.",
	"c_cpp.configuration.suggestSnippets.description": "Wenn dieser Wert auf TRUE festgelegt ist, werden Codeausschnitte vom Sprachserver bereitgestellt.",
	"c_cpp.configuration.enhancedColorization.description": "Wenn diese Option aktiviert ist, wird der Code basierend auf IntelliSense eingefärbt. Diese Einstellung gilt nur, wenn \"intelliSenseEngine\" auf \"Default\" festgelegt ist.",
	"c_cpp.configuration.codeFolding.description": "Wenn diese Option aktiviert ist, werden Codefaltbereiche vom Sprachserver bereitgestellt.",
	"c_cpp.configuration.vcpkg.enabled.markdownDescription": "Hiermit aktivieren Sie Integrationsdienste für den [vcpkg-Abhängigkeits-Manager](https://aka.ms/vcpkg/).",
	"c_cpp.configuration.addNodeAddonIncludePaths.description": "Fügen Sie Includepfade aus \"nan\" und \"node-addon-api\" hinzu, wenn es sich um Abhängigkeiten handelt.",
	"c_cpp.configuration.renameRequiresIdentifier.description": "Bei TRUE ist für \"Symbol umbenennen\" ein gültiger C-/C++-Bezeichner erforderlich.",
	"c_cpp.configuration.autocompleteAddParentheses.description": "Bei TRUE fügt AutoVervollständigen automatisch \"(\" nach Funktionsaufrufen hinzu. In diesem Fall kann \")\" abhängig vom Wert der Einstellung \"editor.autoClosingBrackets\" ebenfalls hinzugefügt werden.",
	"c_cpp.configuration.filesExclude.description": "Konfigurieren Sie Globmuster für das Ausschließen von Ordnern (und Dateien, wenn \"C_Cpp.exclusionPolicy\" geändert wird). Diese sind spezifisch für die C/C++-Erweiterung und zusätzlich zu \"files.exclude\", aber im Gegensatz zu \"files.exclude\" werden sie nicht aus der Explorer-Ansicht entfernt. Weitere Informationen zu Globmustern finden Sie [hier](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).",
	"c_cpp.configuration.filesExcludeBoolean.description": "Das Globmuster, mit dem Dateipfade verglichen werden sollen. Legen Sie diesen Wert auf \"true\" oder \"false\" fest, um das Muster zu aktivieren bzw. zu deaktivieren.",
	"c_cpp.configuration.filesExcludeWhen.description": "Zusätzliche Überprüfung der gleichgeordneten Elemente einer entsprechenden Datei. Verwenden Sie \"$(basename)\" als Variable für den entsprechenden Dateinamen.",
	"c_cpp.configuration.debugger.useBacktickCommandSubstitution.description": "Bei Festlegung auf TRUE verwendet die Befehlsersetzung der Debugger-Shell obsolete Backtick-Zeichen (`).",
	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: andere Verweisergebnisse",
	"c_cpp.contributes.viewsWelcome.contents": "Weitere Informationen zu launch.json finden Sie unter [Konfigurieren von C/C++-Debuggen](https://code.visualstudio.com/docs/cpp/launch-json-reference).",
	"c_cpp.debuggers.pipeTransport.description": "Falls angegeben, weist diese Option den Debugger an, eine Verbindung mit einem Remotecomputer mithilfe einer anderen ausführbaren Datei als Pipe herzustellen, die Standardeingaben/-ausgaben zwischen VS Code und der ausführbaren Back-End-Datei für den MI-fähigen Debugger weiterleitet (z. B. gdb).",
	"c_cpp.debuggers.pipeTransport.default.pipeProgram": "Vollqualifizierten Pfad für den Pipeprogrammnamen eingeben, z. B. \"/usr/bin/ssh\"",
	"c_cpp.debuggers.pipeTransport.default.debuggerPath": "Der vollständige Pfad zum Debugger auf dem Zielcomputer, z. B. \"/usr/bin/gdb\".",
	"c_cpp.debuggers.pipeTransport.debuggerPath.description": "Der vollständige Pfad zum Debugger auf dem Zielcomputer, z. B. \"/usr/bin/gdb\".",
	"c_cpp.debuggers.pipeTransport.pipeCwd.description": "Der vollqualifizierte Pfad zum Arbeitsverzeichnis für das Pipeprogramm.",
	"c_cpp.debuggers.pipeTransport.pipeProgram.description": "Der vollqualifizierte auszuführende Pipebefehl.",
	"c_cpp.debuggers.pipeTransport.pipeArgs.description": "Befehlszeilenargumente, die zum Konfigurieren der Verbindung an das Pipeprogramm übergeben werden.",
	"c_cpp.debuggers.pipeTransport.pipeEnv.description": "Umgebungsvariablen, die an das Pipeprogramm übergeben werden.",
	"c_cpp.debuggers.pipeTransport.quoteArgs.description": "Gibt an, ob Anführungszeichen gesetzt werden sollen, wenn die einzelnen pipeProgram-Argumente Zeichen enthalten (z. B. Leerzeichen oder Tabstopps). Bei Einstellung auf \"false\" wird der Debuggerbefehl nicht mehr automatisch in Anführungszeichen gesetzt. Der Standardwert ist \"true\".",
	"c_cpp.debuggers.logging.description": "Optionale Flags zum Festlegen, welche Nachrichtentypen in der Debugging-Konsole protokolliert werden sollen.",
	"c_cpp.debuggers.logging.exceptions.description": "Optionales Flag zum Festlegen, ob Ausnahmemeldungen in der Debugging-Konsole protokolliert werden sollen. Der Standardwert ist TRUE.",
	"c_cpp.debuggers.logging.moduleLoad.description": "Optionales Flag zum Festlegen, ob Modulladeereignisse in der Debugging-Konsole protokolliert werden sollen. Der Standardwert ist TRUE.",
	"c_cpp.debuggers.logging.programOutput.description": "Optionales Flag zum Festlegen, ob die Programmausgabe in der Debugging-Konsole protokolliert werden soll. Der Standardwert ist TRUE.",
	"c_cpp.debuggers.logging.engineLogging.description": "Optionales Flag zum Festlegen, ob Nachrichten der Diagnosedebug-Engine in der Debugging-Konsole protokolliert werden sollen. Der Standardwert ist FALSE.",
	"c_cpp.debuggers.logging.trace.description": "Optionales Flag zum Festlegen, ob die Befehlsablaufverfolgung des Diagnoseadapters in der Debugging-Konsole protokolliert werden soll. Der Standardwert ist FALSE.",
	"c_cpp.debuggers.logging.traceResponse.description": "Optionales Flag zum Festlegen, ob die Befehls- und Antwortablaufverfolgung des Diagnoseadapters in der Debugging-Konsole protokolliert werden soll. Der Standardwert ist FALSE.",
	"c_cpp.debuggers.cppvsdbg.logging.threadExit.description": "Optionales Flag zum Bestimmen, ob Meldungen zum Beenden des Threads in der Debugging-Konsole protokolliert werden sollen. Standardwert: \"false\".",
	"c_cpp.debuggers.cppvsdbg.logging.processExit.description": "Optionale Kennzeichnung zum Bestimmen, ob Meldungen zum Beenden des Zielprozesses in der Debugging-Konsole protokolliert werden sollen. Standardwert: \"true\".",
	"c_cpp.debuggers.text.description": "Der auszuführende Debuggerbefehl.",
	"c_cpp.debuggers.description.description": "Optionale Beschreibung des Befehls.",
	"c_cpp.debuggers.ignoreFailures.description": "Wenn dieser Wert auf TRUE festgelegt ist, werden durch den Befehl verursachte Fehler ignoriert. Der Standardwert ist FALSE.",
	"c_cpp.debuggers.program.description": "Vollständiger Pfad zur ausführbaren Programmdatei.",
	"c_cpp.debuggers.args.description": "Befehlszeilenargumente, die an das Programm übergeben werden.",
	"c_cpp.debuggers.cppdbg.type.description": "Der Typ der Engine. Muss \"cppdbg\" sein.",
	"c_cpp.debuggers.cppvsdbg.type.description": "Der Typ der Engine. Muss \"cppvsdbg\" sein.",
	"c_cpp.debuggers.targetArchitecture.description": "Die Architektur der zu debuggenden Komponente. Falls dieser Parameter nicht festgelegt ist, wird die Architektur automatisch erkannt. Zulässige Werte sind \"x86\", \"arm\", \"arm64\", \"mips\", \"x64\", \"amd64\" und \"x86_64\".",
	"c_cpp.debuggers.cwd.description": "Das Arbeitsverzeichnis des Ziels.",
	"c_cpp.debuggers.setupCommands.description": "Ein oder mehrere GDB/LLDB-Befehle, die zum Einrichten des zugrunde liegenden Debuggers ausgeführt werden. Beispiel: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].",
	"c_cpp.debuggers.customLaunchSetupCommands.description": "Wenn diese Option angegeben wird, werden die Standardbefehle zum Starten eines Ziels durch einige andere Befehle ersetzt. Zum Anfügen eines Zielprozesses kann dies z. B. \"-target-attach\" sein. Im Fall einer leeren Befehlsliste werden die Startbefehle durch nichts ersetzt. Dies kann nützlich sein, wenn für den Debugger Startoptionen als Befehlszeilenoptionen angegeben werden. Beispiel: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].",
	"c_cpp.debuggers.launchCompleteCommand.description": "Der Befehl, der nach der vollständigen Einrichtung des Debuggers ausgeführt wird, um den Zielprozess auszuführen. Zulässige Werte sind \"exec-run\", \"exec-continue\" und \"None\". Der Standardwert ist \"exec-run\".",
	"c_cpp.debuggers.cppdbg.visualizerFile.description": "Die .natvis-Datei, die beim Debuggen dieses Prozesses verwendet werden soll. Diese Option ist nicht mit der automatischen Strukturierung und Einrückung von GDB kompatibel. Weitere Informationen finden Sie auch bei \"showDisplayString\", wenn Sie diese Einstellung verwenden.",
	"c_cpp.debuggers.cppvsdbg.visualizerFile.description": "Die .natvis-Datei, die beim Debuggen dieses Prozesses verwendet werden soll.",
	"c_cpp.debuggers.showDisplayString.description": "Wenn eine visualizerFile angegeben wird, wird die Anzeigezeichenfolge von showDisplayString aktiviert. Durch Aktivieren dieser Option kann die Leistung während des Debuggings verlangsamt werden.",
	"c_cpp.debuggers.environment.description": "Umgebungsvariablen, die der Umgebung für das Programm hinzugefügt werden sollen. Beispiel: [ { \"name\": \"config\", \"value\": \"Debug\" } ], not [ { \"config\": \"Debug\" } ].",
	"c_cpp.debuggers.envFile.description": "Absoluter Pfad zu einer Datei mit Umgebungsvariablendefinitionen. Für diese Datei sind Schlüssel-Wert-Paare pro Zeile durch ein Gleichheitszeichen getrennt. Beispiel: SCHLÜSSEL=WERT",
	"c_cpp.debuggers.additionalSOLibSearchPath.description": "Durch Semikolons getrennte Liste von Verzeichnissen, die für die Suche nach SO-Dateien verwendet werden sollen. Beispiel: \"c:\\dir1;c:\\dir2\".",
	"c_cpp.debuggers.MIMode.description": "Hiermit wird der Konsolendebugger angegeben, mit dem die MIDebugEngine eine Verbindung herstellt. Zulässige Werte sind \"gdb\" und \"lldb\".",
	"c_cpp.debuggers.miDebuggerPath.description": "Der Pfad zum MI-Debugger (z. B. gdb). Ist die Option nicht angegeben, wird zuerst nach dem Pfad für den Debugger gesucht.",
	"c_cpp.debuggers.miDebuggerArgs.description": "Zusätzliche Argumente für den MI-Debugger (z. B. gdb).",
	"c_cpp.debuggers.miDebuggerServerAddress.description": "Netzwerkadresse des MI-Debugger-Servers, mit dem eine Verbindung hergestellt werden soll (Beispiel: localhost:1234).",
	"c_cpp.debuggers.stopAtEntry.description": "Optionaler Parameter. Wenn dieser Wert auf TRUE festgelegt ist, sollte der Debugger am Einstiegspunkt des Ziels anhalten. Wenn die processId übergeben wird, hat dies keine Auswirkungen.",
	"c_cpp.debuggers.debugServerPath.description": "Optionaler vollständiger Pfad zum Debugserver, der gestartet werden soll. Der Standardwert ist NULL. Dies wird in Verbindung mit \"miDebugServerAddress\" oder Ihrem eigenen Server mit \"customSetupCommand\" verwendet, auf dem \"-target-select remote <server:port>\" ausgeführt wird.",
	"c_cpp.debuggers.debugServerArgs.description": "Optionale Debugserverargumente. Der Standardwert ist \"null\".",
	"c_cpp.debuggers.serverStarted.description": "Optionales vom Server gestartetes Muster, nach dem in der Ausgabe des Debugservers gesucht wird. Der Standardwert ist \"null\".",
	"c_cpp.debuggers.filterStdout.description": "stdout-Stream für ein vom Server gestartetes Muster suchen und stdout in der Debugausgabe protokollieren. Der Standardwert ist \"true\".",
	"c_cpp.debuggers.filterStderr.description": "stderr-Stream für ein vom Server gestartetes Muster suchen und stderr in der Debugausgabe protokollieren. Der Standardwert ist \"false\".",
	"c_cpp.debuggers.serverLaunchTimeout.description": "Optionale Zeit in Millisekunden, während der der Debugger auf den Start von debugServer wartet. Der Standardwert ist 10.000.",
	"c_cpp.debuggers.coreDumpPath.description": "Optionaler vollständiger Pfad zu einer Kern-Speicherabbilddatei für das angegebene Programm. Der Standardwert ist \"NULL\".",
	"c_cpp.debuggers.cppdbg.externalConsole.description": "Wenn dieser Wert auf TRUE festgelegt ist, wird eine Konsole für die zu debuggende Komponente gestartet. Bei FALSE wird die Komponente unter Linux und Windows in der integrierten Konsole angezeigt.",
	"c_cpp.debuggers.cppvsdbg.externalConsole.description": "[Veraltet für \"console\"] Wenn dieser Wert auf TRUE festgelegt ist, wird eine Konsole für die zu debuggende Komponente gestartet. Bei FALSE wird keine Konsole gestartet.",
	"c_cpp.debuggers.cppvsdbg.console.description": "Gibt an, wo das Debugziel gestartet wird. Wenn keine Angabe vorliegt, wird standardmäßig \"internalConsole\" verwendet.",
	"c_cpp.debuggers.cppvsdbg.console.internalConsole.description": "Die Ausgabe erfolgt in der VS Code-Debugging-Konsole. Das Lesen von Konsoleneingaben (z. B. \"std::cin\" oder \"scanf\") wird nicht unterstützt.",
	"c_cpp.debuggers.cppvsdbg.console.integratedTerminal.description": "Das integrierte Terminal von VS Code",
	"c_cpp.debuggers.cppvsdbg.console.externalTerminal.description": "Konsolenanwendungen werden in einem externen Terminalfenster gestartet. Das Fenster wird in Neustartszenarien erneut verwendet und beim Beenden der Anwendung nicht automatisch ausgeblendet.",
	"c_cpp.debuggers.cppvsdbg.console.newExternalWindow.description": "Konsolenanwendungen werden in ihrem eigenen externen Konsolenfenster gestartet, das beim Beenden der Anwendung ebenfalls beendet wird. Nicht-Konsolenanwendungen werden ohne Terminal ausgeführt, und stdout/stderr wird ignoriert.",
	"c_cpp.debuggers.avoidWindowsConsoleRedirection.description": "Wenn dieser Wert auf TRUE festgelegt ist, wird für die zu debuggende Komponente die Konsolenumleitung deaktiviert, die für die Unterstützung des integrierten Terminals erforderlich ist.",
	"c_cpp.debuggers.sourceFileMap.description": "Optionale Quelldateizuordnungen, die an die Debug-Engine übergeben werden. Beispiel: { \"/original/source/path\":\"/current/source/path\" }",
	"c_cpp.debuggers.processId.anyOf.description": "Optionale Prozess-ID, an die der Debugger angefügt werden soll. Verwenden Sie \"${command:pickProcess}\", um eine Liste der lokalen ausgeführten Prozesse abzurufen, an die angefügt werden kann. Beachten Sie, dass einige Plattformen Administratorrechte erfordern, damit an einen Prozess angefügt werden kann.",
	"c_cpp.debuggers.symbolSearchPath.description": "Durch Semikolons getrennte Liste von Verzeichnissen, die für die Suche nach Symboldateien (PDB-Dateien) verwendet werden sollen. Beispiel: \"c:\\dir1;c:\\dir2\".",
	"c_cpp.debuggers.dumpPath.description": "Optionaler vollständiger Pfad zu einer Dumpdatei für das angegebene Programm. Beispiel: \"c:\\temp\\app.dmp\". Standardwert ist NULL.",
	"c_cpp.debuggers.enableDebugHeap.description": "Wenn dieser Wert auf FALSE festgelegt ist, wird der Prozess mit deaktiviertem Debug-Heap gestartet. Hiermit wird die Umgebungsvariable \"_NO_DEBUG_HEAP\" auf \"1\" festgelegt.",
	"c_cpp.debuggers.symbolLoadInfo.description": "Explizite Steuerung des Symbolladevorgangs.",
	"c_cpp.debuggers.symbolLoadInfo.loadAll.description": "Bei TRUE werden Symbole für alle Bibliotheken geladen, andernfalls werden keine solib-Symbole geladen. Der Standardwert ist TRUE.",
	"c_cpp.debuggers.symbolLoadInfo.exceptionList.description": "Liste der Dateinamen (Platzhalter zulässig), durch Semikolons \";\" getrennt. Ändert das Verhalten von LoadAll. Wenn LoadAll auf TRUE festgelegt ist, werden keine Symbole für Bibliotheken geladen, die einem beliebigen Namen in der Liste entsprechen. Andernfalls werden nur Symbole für übereinstimmende Bibliotheken geladen. Beispiel: \"foo.so;bar.so\"",
	"c_cpp.debuggers.requireExactSource.description": "Optionales Flag, um anzufordern, dass der aktuelle Quellcode mit der PDB-Datei übereinstimmt.",
	"c_cpp.debuggers.stopAtConnect.description": "Wenn \"true\", sollte der Debugger nach dem Herstellen einer Verbindung mit dem Ziel beendet werden. Wenn \"false\" wird der Debugger nach dem Herstellen der Verbindung fortgesetzt. Entspricht standardmäßig \"false\".",
	"c_cpp.debuggers.hardwareBreakpoints.description": "Explizite Steuerung des Hardwarehaltepunktverhaltens für Remoteziele.",
	"c_cpp.debuggers.hardwareBreakpoints.require.description": "Wenn \"true\", verwenden Sie immer Hardwarehaltepunkte. Entspricht standardmäßig \"false\".",
	"c_cpp.debuggers.hardwareBreakpoints.limit.description": "Optionaler Grenzwert für die Anzahl der zu verwendenden verfügbaren Hardwarehaltepunkte. Nur erzwungen, wenn \"require\" auf \"true\" festgelegt ist und \"limit\" größer als 0 ist. Entspricht standardmäßig 0.",
	"c_cpp.taskDefinitions.name.description": "Der Name der Aufgabe",
	"c_cpp.taskDefinitions.command.description": "Der Pfad zu einem Compiler oder einem Skript, über den/das die Kompilierung ausgeführt wird",
	"c_cpp.taskDefinitions.args.description": "Zusätzliche Argumente, die an den Compiler oder das Kompilierungsskript übergeben werden sollen",
	"c_cpp.taskDefinitions.options.description": "Zusätzliche Befehlsoptionen",
	"c_cpp.taskDefinitions.options.cwd.description": "Das aktuelle Arbeitsverzeichnis des ausgeführten Programms oder Skripts. Wenn keine Angabe erfolgt, wird das aktuelle Arbeitsbereich-Stammverzeichnis des Codes verwendet.",
	"c_cpp.taskDefinitions.detail.description": "Zusätzliche Details zur Aufgabe",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.description": "Dies sind die Pfade zu denselben Quellstrukturen – einmal aktuell und einmal zur Kompilierzeit. Im EditorPath gefundene Dateien werden zum Haltepunktabgleich dem CompileTimePath-Pfad zugeordnet. Bei der Anzeige von Speicherorten für die Stapelüberwachung erfolgt die Zuordnung vom CompileTimePath zum EditorPath.",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.editorPath.description": "Der Pfad zur Quellstruktur, die vom Editor verwendet wird.",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.useForBreakpoints.description": "FALSE, wenn dieser Eintrag nur für eine Stapelrahmen-Speicherortzuordnung verwendet wird. TRUE, wenn dieser Eintrag auch zum Angeben von Haltepunktpositionen verwendet werden soll.",
	"c_cpp.debuggers.symbolOptions.description": "Optionen zum Steuern, wie Symbole (PDB-Dateien) gefunden und geladen werden.",
	"c_cpp.debuggers.VSSymbolOptions.description": "Stellt eine Konfiguration zum Suchen und Laden von Symbolen in den Debugadapter bereit.",
	"c_cpp.debuggers.VSSymbolOptions.searchPaths.description": "Ein Array von Symbolserver-URLs (Beispiel: http​://MyExampleSymbolServer) oder Verzeichnisse (Beispiel:/Build/Symbols) für die Suche nach PDB-Dateien. Diese Verzeichnisse werden zusätzlich zu den Standardspeicherorten durchsucht – neben dem Modul und dem Pfad, in dem die PDB ursprünglich abgelegt wurde.",
	"c_cpp.debuggers.VSSymbolOptions.searchMicrosoftSymbolServer.description": "Wenn „true“, wird der Microsoft-Symbolserver (https​://msdl.microsoft.com​/download/symbols) dem Symbolsuchpfad hinzugefügt. Wenn nicht angegeben, wird diese Option standardmäßig auf „false“ eingestellt.",
	"c_cpp.debuggers.VSSymbolOptions.cachePath.description": "Das Verzeichnis, in dem von Symbolservern heruntergeladene Symbole zwischengespeichert werden sollen. Wenn nicht angegeben, wird der Debugger unter Windows standardmäßig auf %TEMP% \\SymbolCache eingestellt.",
	"c_cpp.debuggers.VSSymbolOptions.moduleFilter.description": "Stellt Optionen bereit, um zu steuern, für welche Module (DLL-Dateien) der Debugger versuchen soll, Symbole (PDB-Dateien) zu laden.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.description": "Stellt eine Konfiguration zum Laden von Symbolen in den Debugadapter bereit.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.description": "Steuert, in welchem der beiden grundlegenden Betriebsmodi der Modulfilter ausgeführt wird.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.loadAllButExcluded.enumDescriptions": "Laden Sie Symbole für alle Module, es sei denn, das Modul befindet sich im Array „excludedModules“.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.loadOnlyIncluded.enumDescriptions": "Versuchen Sie nicht, Symbole für IRGENDEIN Modul zu laden, es sei denn, es befindet sich im Array „includedModules“, oder es wird über die Einstellung „includeSymbolsNextToModules“ hinzugefügt.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.excludedModules.description": "Ein Array von Modulen, für das der Debugger keine Symbole laden soll. Platzhalter (Beispiel: MyCompany. *. dll) werden unterstützt.\n\nDiese Eigenschaft wird ignoriert, wenn „Modus“ nicht auf „loadAllButExcluded“ festgelegt ist.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.includedModules.description": "Ein Array von Modulen, für das der Debugger keine Symbole laden soll. Platzhalter (Beispiel: MyCompany. *. dll) werden unterstützt.\n\nDiese Eigenschaft wird ignoriert, wenn „Modus“ nicht auf „loadOnlyIncluded“ festgelegt ist.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.includeSymbolsNextToModules.description": "Wenn „true“, wird der Debugger für ein beliebiges Modul, das sich NICHT im Array „includedModules“ befindet, weiterhin neben dem Modul selbst und der ausführbaren Datei, die gestartet wird, überprüfen. Die Pfade in der Symbolsuchliste werden jedoch nicht überprüft. Diese Option ist standardmäßig auf „true“ eingestellt.\n\nDiese Eigenschaft wird ignoriert, wenn „Modus“ nicht auf „loadOnlyIncluded“ festgelegt ist."
}