/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"c_cpp.subheaders.intelliSense.title": "IntelliSense",
	"c_cpp.subheaders.formatting.title": "Formatierung",
	"c_cpp.subheaders.codeDocumentation.title": "Codedokumentation",
	"c_cpp.subheaders.codeAnalysis.title": "Codeanalyse",
	"c_cpp.subheaders.debugging.title": "Debuggen",
	"c_cpp.subheaders.resourceManagement.title": "Ressourcenverwaltung",
	"c_cpp.subheaders.miscellaneous.title": "Sonstiges",
	"c_cpp.capabilities.untrustedWorkspaces.description": "Mehrere Einstellungen können dazu führen, dass Prozesse lokal im Arbeitsbereich ausgeführt werden, z. B. C_Cpp.clang_format_path, C_Cpp.codeAnalysis.clangTidy.path, C_Cpp.addNodeAddonIncludePaths, C_Cpp.default.compilerPath, C_Cpp.default.configurationProvider und C_Cpp.default.compileCommands und die entsprechenden Eigenschaften in c_cpp_properties.json.",
	"c_cpp.command.configurationSelect.title": "Konfiguration auswählen...",
	"c_cpp.command.configurationProviderSelect.title": "Konfigurationsanbieter ändern...",
	"c_cpp.command.configurationEditJSON.title": "Konfigurationen bearbeiten (JSON)",
	"c_cpp.command.configurationEditUI.title": "Konfigurationen bearbeiten (Benutzeroberfläche)",
	"c_cpp.command.selectIntelliSenseConfiguration.title": "IntelliSense-Konfiguration auswählen...",
	"c_cpp.command.installCompiler.title": "Installieren eines C++-Compilers",
	"c_cpp.command.rescanCompilers.title": "Erneut nach Compilern suchen",
	"c_cpp.command.switchHeaderSource.title": "Header/Quelle umschalten",
	"c_cpp.command.enableErrorSquiggles.title": "Fehlerwellenlinien aktivieren",
	"c_cpp.command.disableErrorSquiggles.title": "Fehlerwellenlinien deaktivieren",
	"c_cpp.command.toggleIncludeFallback.title": "Fallback der IntelliSense-Engine bei Includefehlern umschalten",
	"c_cpp.command.toggleDimInactiveRegions.title": "Farbgebung für inaktive Regionen umschalten",
	"c_cpp.command.resetDatabase.title": "IntelliSense-Datenbank zurücksetzen",
	"c_cpp.command.takeSurvey.title": "An Umfrage teilnehmen",
	"c_cpp.command.restartIntelliSenseForFile.title": "IntelliSense für Active File neu starten",
	"c_cpp.command.logDiagnostics.title": "Diagnose protokollieren",
	"c_cpp.command.referencesViewGroupByType.title": "Nach Verweistyp gruppieren",
	"c_cpp.command.referencesViewUngroupByType.title": "Gruppierung nach Verweistyp aufheben",
	"c_cpp.command.rescanWorkspace.title": "Arbeitsbereich erneut überprüfen",
	"c_cpp.command.vcpkgClipboardInstallSuggested.title": "vcpkg-Installationsbefehl in Zwischenablage kopieren",
	"c_cpp.command.vcpkgOnlineHelpSuggested.title": "vcpkg-Hilfeseite aufrufen",
	"c_cpp.command.generateEditorConfig.title": "EditorConfig-Inhalte aus VC-Formateinstellungen generieren",
	"c_cpp.command.GoToNextDirectiveInGroup.title": "Zur nächsten Präprozessoranweisung in bedingter Gruppe wechseln",
	"c_cpp.command.GoToPrevDirectiveInGroup.title": "Zur vorherigen Präprozessoranweisung in bedingter Gruppe wechseln",
	"c_cpp.command.CreateDeclarationOrDefinition.title": "Deklaration/Definition erstellen",
	"c_cpp.command.RunCodeAnalysisOnActiveFile.title": "Code Analysis auf \"Aktive Dateien\" ausführen",
	"c_cpp.command.RunCodeAnalysisOnOpenFiles.title": "Code Analysis auf \"Dateien öffnen\" ausführen",
	"c_cpp.command.RunCodeAnalysisOnAllFiles.title": "Code Analysis auf \"Alle Dateien\" ausführen",
	"c_cpp.command.RemoveAllCodeAnalysisProblems.title": "Alle Code Analysis Probleme löschen",
	"c_cpp.command.BuildAndDebugFile.title": "C/C++-Datei debuggen",
	"c_cpp.command.BuildAndRunFile.title": "C/C++-Datei ausführen",
	"c_cpp.command.AddDebugConfiguration.title": "Debugkonfiguration hinzufügen",
	"c_cpp.command.GenerateDoxygenComment.title": "Doxygenkommentar generieren",
	"c_cpp.command.addSshTarget.title": "SSH-Ziel hinzufügen",
	"c_cpp.command.removeSshTarget.title": "SSH-Ziel entfernen",
	"c_cpp.command.setActiveSshTarget.title": "Dieses SSH-Ziel als aktives Ziel festlegen",
	"c_cpp.command.selectActiveSshTarget.title": "Wählen Sie ein aktives SSH-Ziel aus",
	"c_cpp.command.selectSshTarget.title": "SSH-Ziel auswählen",
	"c_cpp.command.activeSshTarget.title": "Aktives SSH-Ziel abrufen",
	"c_cpp.command.refreshCppSshTargetsView.title": "Aktualisieren",
	"c_cpp.command.sshTerminal.title": "Mit diesem SSH-Ziel in einem neuen Terminal verbinden",
	"c_cpp.configuration.maxConcurrentThreads.markdownDescription": "Die maximale Anzahl gleichzeitiger Threads, die für die Sprachdienstverarbeitung verwendet werden sollen. Der Wert ist ein Hinweis und kann unter Umständen nicht immer verwendet werden. Mit dem Standardwert `null` (leer) werden doppelt so viele logische Prozessoren wie verfügbar verwendet.",
	"c_cpp.configuration.maxCachedProcesses.markdownDescription": "Die maximale Anzahl zwischengespeicherter Prozesse, die für die Sprachdienstverarbeitung verwendet werden sollen. Mit dem Standardwert `null` (leer) werden doppelt so viele logische Prozessoren wie verfügbar verwendet.",
	"c_cpp.configuration.maxMemory.markdownDescription": "Der maximale Arbeitsspeicher (in MB), der für die Sprachdienstverarbeitung verfügbar ist. Weniger Prozesse werden zwischengespeichert und gleichzeitig ausgeführt, nachdem diese Speicherauslastung überschritten wurde. Beim Standardwert `null` (leer) wird der freie Arbeitsspeicher des Systems verwendet.",
	"c_cpp.configuration.intelliSense.maxCachedProcesses.markdownDescription": "Die maximale Anzahl von IntelliSense-Prozessen, die weiter ausgeführt werden sollen. Mit dem Standardwert `null` (leer) wird ein Wert verwendet, der von `#C_Cpp.maxCachedProcesses#` geerbt wurde.",
	"c_cpp.configuration.intelliSense.maxMemory.markdownDescription": "Ältere IntelliSense-Prozesse werden heruntergefahren, bevor neue Prozesse erstellt werden, nachdem diese Speicherauslastung (in MB) überschritten wurde. Mit dem Standardwert `null` (leer) wird de Wert verwendet, der von `#C_Cpp.maxMemory#` geerbt wurde.",
	"c_cpp.configuration.references.maxConcurrentThreads.markdownDescription": "Die maximale Anzahl gleichzeitiger Threads, die für \"Alle Verweise suchen\" und \"Umbenennen\" verwendet werden sollen. Mit dem Standardwert `null` (leer) wird der Wert verwendet, der von `#C_Cpp.maxConcurrentThreads#` geerbt wurde.",
	"c_cpp.configuration.references.maxCachedProcesses.markdownDescription": "Die maximale Anzahl von Prozessen, die im Arbeitsspeicher für \"Alle Verweise suchen\" und \"Umbenennen\" beibehalten werden sollen. Mit der Standardeinstellung `0` wird dieses Feature deaktiviert. Mit dem Wert `null` (leer) wird der Wert verwendet, der von `#C_Cpp.maxCachedProcesses#` geerbt wurde.",
	"c_cpp.configuration.references.maxMemory.markdownDescription": "Weniger Prozesse vom Typ \"Alle Verweise suchen\" und \"Umbenennen\" werden zwischengespeichert und gleichzeitig ausgeführt, nachdem diese Speicherauslastung (in MB) überschritten wurde. Der Standardwert `null` (leer) verwendet den Wert, der von `#C_Cpp.maxMemory#` geerbt wurde.",
	"c_cpp.configuration.codeAnalysis.maxConcurrentThreads.markdownDescription": "Die maximale Anzahl gleichzeitiger Threads, die für die Codeanalyse verwendet werden sollen. Mit dem Standardwert `null` (leer) wird die Hälfte des Werts verwendet, der von `#C_Cpp.maxConcurrentThreads#` geerbt wurde.",
	"c_cpp.configuration.codeAnalysis.maxMemory.markdownDescription": "Weniger Codeanalyseprozesse werden gleichzeitig ausgeführt, nachdem diese Speicherauslastung (in MB) überschritten wurde. Mit dem Standardwert `null` (leer) wird der Wert verwendet, der von `#C_Cpp.maxMemory#` geerbt wurde.",
	"c_cpp.configuration.codeAnalysis.updateDelay.markdownDescription": "Steuert die Verzögerung in Millisekunden, bevor die Codeanalyse mit der Verarbeitung beginnt, nachdem durch eine Bearbeitung ein Speichervorgang ausgelöst wurde, wenn `#files.autoSave#` gleich `afterDelay` und `#C_Cpp.codeAnalysis.runAutomatically#` gleich `true` ist.",
	"c_cpp.configuration.codeAnalysis.exclude.markdownDescription": "Konfigurieren Sie Globmuster zum Ausschließen von Ordnern und Dateien für die Codeanalyse. Dateien, die sich nicht im Arbeitsbereichsordner befinden, werden immer ausgeschlossen. Erbt Werte von `#files.exclude#` und `#C_Cpp.files.exclude#`. Weitere Informationen zu Globmustern finden Sie [hier](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).",
	"c_cpp.configuration.codeAnalysis.excludeBoolean.markdownDescription": "Das Globmuster, mit dem Dateipfade verglichen werden sollen. Legen Sie diesen Wert auf `true` oder `false` fest, um das Muster zu aktivieren bzw. zu deaktivieren.",
	"c_cpp.configuration.codeAnalysis.excludeWhen.markdownDescription": "Zusätzliche Überprüfung der gleichgeordneten Elemente einer entsprechenden Datei. Verwenden Sie `$(basename)` als Variable für den entsprechenden Dateinamen.",
	"c_cpp.configuration.codeAnalysis.runAutomatically.markdownDescription": "Bei `true` wird die Codeanalyse automatisch für eine Datei ausgeführt, nachdem sie geöffnet oder gespeichert wurde.",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showDisable.markdownDescription": "`true` gibt an, dass die Codeaktion \"Deaktivieren\" angezeigt wird, wenn sie verfügbar ist (bei der nächsten Ausführung der Codeanalyse). Wenn die Codeaktion \"Deaktivieren\" verwendet wird, wird der Warnungscode der Einstellung `C_Cpp.codeAnalysis.clangTidy.checks.disabled` hinzugefügt.",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showDocumentation.markdownDescription": "Bei `true` wird die Codeaktion \"Dokumentation anzeigen für\" angezeigt, wenn sie verfügbar ist (bei der nächsten Ausführung der Codeanalyse).",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.description": "Steuert, welche Codeaktionsoptionen für „Löschen“-Codeanalyseprobleme verfügbar sind. Wenn Sie die Einstellung ändern, um weitere Optionen anzuzeigen, muss die Codeanalyse möglicherweise erneut ausgeführt werden.",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.None.description": "Keine „Löschen“-Codeaktionen anzeigen.",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.AllOnly.description": "Zeigen Sie nur die Codeaktion „Alle löschen“ an (oder „Alle <type> löschen“, wenn nur ein Typ vorhanden ist, oder „Diese löschen“, wenn nur ein Problem vorliegt).",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.AllAndAllType.description": "Zeigen Sie die Codeaktion „Alle löschen“ (wenn mehrere Problemtypen vorhanden sind) und die Codeaktion „Alle <type> löschen“ (oder „Diese löschen“, wenn nur ein Problem für den <type> vorliegt)",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.AllAndAllTypeAndThis.description": "Zeigen Sie die Codeaktionen „Alle löschen“ (wenn mehrere Problemtypen vorhanden sind), „Alle <type> löschen“ (wenn mehrere Probleme für den <type> vorhanden sind) und „Diese löschen“ an.",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.formatFixes.markdownDescription": "Bei `true` wird die Formatierung in den Zeilen ausgeführt, die durch Codeaktionen vom Typ 'Korrigieren' geändert wurden.",
	"c_cpp.configuration.codeAnalysis.clangTidy.enabled.markdownDescription": "Bei `true` wird die Codeanalyse mit `clang-tidy` aktiviert und nach dem Öffnen oder Speichern einer Datei ausgeführt, wenn `#C_Cpp.codeAnalysis.runAutomatically#` auf `true` festgelegt ist (Standardeinstellung).",
	"c_cpp.configuration.codeAnalysis.clangTidy.path.markdownDescription": "Der vollständige Pfad der ausführbaren Datei `clang-tidy`. Wenn nicht angegeben, ist `clang-tidy` im verwendeten Umgebungspfad verfügbar. Wenn der Umgebungspfad nicht gefunden wird, wird die `clang-tidy` verwendet, die mit der Erweiterung gebündelt ist.",
	"c_cpp.configuration.codeAnalysis.clangTidy.config.markdownDescription": "Gibt eine `clang-tidy`-Konfiguration im YAML-/JSON-Format an: `{Checks: '-*,clang-analyzer-*', CheckOptions: [{Schlüssel: x, Wert: y}]}`. Wenn der Wert leer ist, versucht `clang-tidy`, eine Datei namens `.clang-tidy` für jede Quelldatei in den übergeordneten Verzeichnissen zu finden.",
	"c_cpp.configuration.codeAnalysis.clangTidy.fallbackConfig.markdownDescription": "Gibt eine `clang-tidy`-Konfiguration im YAML-/JSON-Format an, die als Fallback verwendet werden soll, wenn `#C_Cpp.codeAnalysis.clangTidy.config#` nicht festgelegt ist und keine `.clang-tidy`-Datei gefunden wird: `{Checks: '-*,clang-analyzer-*', CheckOptions: [{Schlüssel: x, Wert: y}]}`.",
	"c_cpp.configuration.codeAnalysis.clangTidy.headerFilter.markdownDescription": "Ein erweiterter regulärer POSIX-Ausdruck (Extended Regular Expression/ERE), der dem Namen der Header entspricht, aus denen die Diagnose ausgegeben werden soll. Diagnosen aus der Hauptdatei jeder Übersetzungseinheit werden immer angezeigt. Die Variable `${workspaceFolder}` wird unterstützt (und als standardmäßiger Fallbackwert benutzt, wenn keine `.clang-tidy`-Datei vorhanden ist). Wenn diese Option nicht `null` (leer) ist, überschreibt sie die Option `HeaderFilterRegex` in einer `.clang-tidy`-Datei, sofern vorhanden.",
	"c_cpp.configuration.codeAnalysis.clangTidy.args.markdownDescription": "Zusätzliche Befehlszeilenargumente, die an `clang-tidy` übergeben werden sollen. Diese haben Vorrang vor den entsprechenden Einstellungen für `C_Cpp.codeAnalysis.clangTidy.*`.",
	"c_cpp.configuration.codeAnalysis.clangTidy.useBuildPath.markdownDescription": "Wenn `true` und `compileCommands` festgelegt sind, wird das Argument `-p=<build-path>` an `clang-tidy` übergeben, anstatt Buildargumente hinter `--` zu übergeben. Dies funktioniert möglicherweise nicht, wenn Umgebungsvariablen nicht so festgelegt sind, dass vom System eingeschlossene Elemente gefunden werden können.",
	"c_cpp.configuration.codeAnalysis.clangTidy.checks.enabled.markdownDescription": "Liste der aktivierten `clang-tidy`-Überprüfungen. Die Werte werden an `Checks` in einer `.clang-tidy`-Datei oder (falls vorhanden) an `#C_Cpp.codeAnalysis.clangTidy.config#` angefügt. Die Standardüberprüfung `clang-analyzer-*` wird immer verwendet, es sei denn, sie ist explizit deaktiviert.",
	"c_cpp.configuration.codeAnalysis.clangTidy.checks.disabled.markdownDescription": "Liste der aktivierten `clang-tidy`-Überprüfungen. Die Werte werden an `Checks` in einer `.clang-tidy`-Datei oder (falls vorhanden) an `#C_Cpp.codeAnalysis.clangTidy.config#` angefügt.",
	"c_cpp.configuration.formatting.description": "Konfiguriert das Formatierungsmodul.",
	"c_cpp.configuration.formatting.clangFormat.markdownDescription": "`clang-format` wird zum Formatieren von Code verwendet.",
	"c_cpp.configuration.formatting.vcFormat.markdownDescription": "Das Visual C++-Formatierungsmodul wird zum Formatieren von Code verwendet.",
	"c_cpp.configuration.formatting.Default.markdownDescription": "Standardmäßig wird `clang-format` verwendet, um den Code zu formatieren. Das Visual C++-Formatierungsmodul wird jedoch verwendet, wenn eine `.editorconfig`-Datei mit relevanten Einstellungen näher am zu formatierenden Code gefunden wird und `#C_Cpp.clang_format_style#` folgender Standardwert ist: `file`.",
	"c_cpp.configuration.formatting.Disabled.markdownDescription": "Die Codeformatierung wird deaktiviert.",
	"c_cpp.configuration.vcFormat.indent.braces.markdownDescription": "Geschweifte Klammern werden um den in der Einstellung `#editor.tabSize#` angegebenen Wert eingerückt.",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.description": "Legt den Bezugspunkt für den neuen Zeileneinzug fest.",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.outermostParenthesis.description": "Eine neue Zeile wird relativ zur äußersten geöffneten Klammer eingezogen.",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.innermostParenthesis.description": "Eine neue Zeile wird relativ zur innersten geöffneten Klammer eingezogen.",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.statementBegin.description": "Eine neue Zeile wird relativ zum Anfang der aktuellen Anweisung eingezogen.",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.markdownDescription": "Wenn eine neue Zeile eingegeben wird, wird sie an der öffnenden Klammer oder basierend auf `#C_Cpp.vcFormat.indent.multiLineRelativeTo#` ausgerichtet.",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.alignToParenthesis.markdownDescription": "Die neue Zeile wird unter der öffnenden Klammer ausgerichtet.",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.indent.markdownDescription": "Die neue Zeile wird basierend auf `#C_Cpp.vcFormat.indent.multiLineRelativeTo#` eingerückt.",
	"c_cpp.configuration.vcFormat.indent.preserveWithinParentheses.description": "In vorhandenem Code wird die vorhandene Einstellung zum Einzug neuer Zeilen innerhalb von Klammern beibehalten.",
	"c_cpp.configuration.vcFormat.indent.caseLabels.markdownDescription": "Bezeichnungen werden relativ zu Switch-Anweisungen um den in der Einstellung `#editor.tabSize#` angegebenen Wert eingerückt.",
	"c_cpp.configuration.vcFormat.indent.caseContents.markdownDescription": "Code innerhalb eines `case`-Blocks wird relativ zu seiner Bezeichnung um den in der Einstellung `#editor.tabSize#` angegebenen Betrag eingerückt.",
	"c_cpp.configuration.vcFormat.indent.caseContentsWhenBlock.markdownDescription": "Rücken Sie geschweifte Klammern nach einer Case-Anweisung um den in der Einstellung `#editor.tabSize#` angegebenen Betrag ein.",
	"c_cpp.configuration.vcFormat.indent.lambdaBracesWhenParameter.markdownDescription": "Einrücken von geschweiften Klammern von Lambdas, die als Funktionsparameter relativ zum Anfang der Anweisung verwendet werden, um den in der Einstellung `#editor.tabSize#` angegebenen Betrag.",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.description": "Die Position der goto-Bezeichnungen.",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.oneLeft.markdownDescription": "Positionieren Sie goto-Bezeichnungen links neben dem aktuellen Codeeinzug um den in der Einstellung `#editor.tabSize#` angegebenen Wert.",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.leftmostColumn.markdownDescription": "Positionieren Sie goto-Bezeichnungen ganz links im Code.",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.none.markdownDescription": "goto-Bezeichnungen werden nicht formatiert.",
	"c_cpp.configuration.vcFormat.indent.preprocessor.description": "Position der Präprozessordirektiven.",
	"c_cpp.configuration.vcFormat.indent.preprocessor.oneLeft.markdownDescription": "Präprozessordirektiven werden links neben dem aktuellen Codeeinzug um den in der Einstellung `#editor.tabSize#` angegebenen Betrag positioniert.",
	"c_cpp.configuration.vcFormat.indent.preprocessor.leftmostColumn.markdownDescription": "Präprozessoranweisungen werden am linken Rand des Codes positioniert.",
	"c_cpp.configuration.vcFormat.indent.preprocessor.none.markdownDescription": "Präprozessoranweisungen werden nicht formatiert.",
	"c_cpp.configuration.vcFormat.indent.accessSpecifiers.markdownDescription": "Zugriffsspezifizierer werden relativ zu Klassen- oder Strukturdefinitionen um den in der Einstellung `#editor.tabSize#` angegebenen Wert eingerückt.",
	"c_cpp.configuration.vcFormat.indent.namespaceContents.markdownDescription": "Code wird relativ zum einschließenden Namespace um den in der Einstellung `#editor.tabSize#` angegebenen Betrag eingerückt.",
	"c_cpp.configuration.vcFormat.indent.preserveComments.description": "Der Einzug von Kommentaren wird bei Formatierungsvorgängen nicht geändert.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.namespace.description": "Die Position von öffnenden geschweiften Klammern für Namespaces.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.type.description": "Die Position von öffnenden geschweiften Klammern für Typdefinitionen.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.lambda.description": "Die Position von öffnenden geschweiften Klammern für Lambda-Funktionen.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.function.description": "Die Position von öffnenden geschweiften Klammern für Funktionen.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.block.description": "Die Position von öffnenden geschweiften Klammern für Kontrollblöcke.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.newLine.description": "Öffnende geschweifte Klammern werden in eine neue Zeile verschoben.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.sameLine.description": "Öffnende geschweifte Klammern verbleiben in derselben Zeile, und es wird vor jeder Klammer ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.ignore.description": "Geschweifte Klammern links werden nicht formatiert.",
	"c_cpp.configuration.vcFormat.newLine.scopeBracesOnSeparateLines.description": "Geschweifte Klammern links und rechts für Bereiche werden in getrennten Zeilen platziert.",
	"c_cpp.configuration.vcFormat.newLine.closeBraceSameLine.emptyType.description": "In leeren Typen werden schließende geschweifte Klammern in dieselbe Zeile wie öffnende geschweifte Klammern verschoben.",
	"c_cpp.configuration.vcFormat.newLine.closeBraceSameLine.emptyFunction.description": "In leeren Funktionskörpern werden geschweifte Klammern rechts in dieselbe Zeile wie die dazugehörenden geschweiften Klammern links verschoben.",
	"c_cpp.configuration.vcFormat.newLine.beforeCatch.markdownDescription": "Platzieren Sie `catch` und ähnliche Schlüsselwörter in einer neuen Zeile.",
	"c_cpp.configuration.vcFormat.newLine.beforeElse.markdownDescription": "Platzieren Sie `else` in einer neuen Zeile.",
	"c_cpp.configuration.vcFormat.newLine.beforeWhileInDoWhile.markdownDescription": "Platzieren Sie `while` in einer `do`-`while`-Schleife in einer neuen Zeile.",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.description": "Abstand zwischen Funktionsnamen und öffnenden Klammern von Argumentenlisten.",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.insert.description": "Vor der öffnenden Klammer einer Funktion wird ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.remove.description": "Leerzeichen vor öffnenden Klammern von Funktionen werden entfernt.",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.ignore.description": "Die Leerzeichen werden wie eingegeben beibehalten.",
	"c_cpp.configuration.vcFormat.space.withinParameterListParentheses.description": "In Funktionsparameterlisten wird nach der runden Klammer links und auch vor der runden Klammer rechts ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.betweenEmptyParameterListParentheses.description": "Wenn eine Funktionsparameterliste leer ist, wird zwischen den runden Klammern ein Leerzeichen eingefügt.",
	"c_cpp.configuration.vcFormat.space.afterKeywordsInControlFlowStatements.description": "In Ablaufsteuerungsanweisungen wird zwischen Schlüsselwort und runder Klammer links ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.withinControlFlowStatementParentheses.description": "In Ablaufsteuerungsanweisungen wird nach der runden Klammer links und auch vor der runden Klammer rechts ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.beforeLambdaOpenParenthesis.description": "Vor der öffnenden Klammer von Lambdaargumentlisten wird ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.withinCastParentheses.description": "Bei einer Umwandlung im C-Stil wird nach der runden Klammer links und auch vor der runden Klammer rechts ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.afterCastCloseParenthesis.description": "Nach der schließenden Klammer einer Umwandlung im C-Stil wird ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.withinExpressionParentheses.description": "Nach der öffnenden und vor der schließenden Klammer eines Ausdrucks in Klammern wird ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.beforeBlockOpenBrace.description": "Vor den öffnenden geschweiften Klammern von Bereichsblöcken wird ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.betweenEmptyBraces.description": "Wenn geschweifte Klammern leer sind und sich in derselben Zeile befinden, wird ein Leerzeichen zwischen ihnen eingefügt.",
	"c_cpp.configuration.vcFormat.space.beforeInitializerListOpenBrace.description": "Vor der öffnenden geschweiften Klammer einheitlicher Initialisierungs- und Initialisiererlisten wird ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.withinInitializerListBraces.description": "In einheitlichen Initialisierungs- und Initialisiererlisten wird nach der geschweiften Klammer links und auch vor der geschweiften Klammer rechts ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.preserveInInitializerList.description": "Leerzeichen um Kommas werden in einheitlichen Initialisierungs- und Initialisiererlisten beibehalten.",
	"c_cpp.configuration.vcFormat.space.beforeOpenSquareBracket.description": "Vor öffnenden eckigen Klammern wird ein Leerzeichen eingefügt.",
	"c_cpp.configuration.vcFormat.space.withinSquareBrackets.description": "Es wird ein Leerzeichen nach der öffnenden eckigen Klammer und vor der schließenden eckigen Klammer eingefügt.",
	"c_cpp.configuration.vcFormat.space.beforeEmptySquareBrackets.description": "Wenn die eckigen Klammern leer sind, wird vor der öffnenden Klammer ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.betweenEmptySquareBrackets.description": "Wenn die eckigen Klammern leer sind, wird zwischen diesen ein Leerzeichen eingefügt.",
	"c_cpp.configuration.vcFormat.space.groupSquareBrackets.description": "Für mehrdimensionale Arrays werden alle Leerzeichen zwischen den Klammern entfernt. Andere Leerzeicheneinstellungen werden überschrieben.",
	"c_cpp.configuration.vcFormat.space.withinLambdaBrackets.description": "Es wird ein Leerzeichen nach der öffnenden eckigen Klammer und vor der schließenden eckigen Klammer eingefügt.",
	"c_cpp.configuration.vcFormat.space.betweenEmptyLambdaBrackets.description": "Wenn die eckigen Klammern leer sind, wird zwischen diesen ein Leerzeichen eingefügt.",
	"c_cpp.configuration.vcFormat.space.beforeComma.description": "Vor jedem Komma wird ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.afterComma.description": "Nach jedem Komma wird ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.removeAroundMemberOperators.description": "Leerzeichen um Memberzugriffsoperatoren, Pointer-to-Member-Operatoren und Bereichsauflösungsoperatoren werden entfernt.",
	"c_cpp.configuration.vcFormat.space.beforeInheritanceColon.description": "Für vererbte Typen wird in Klassendefinitionen vor dem Doppelpunkt ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.beforeConstructorColon.description": "In Konstruktordefinitionen wird vor dem Doppelpunkt ein Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.removeBeforeSemicolon.description": "Vor allen Semikolons werden die Leerzeichen entfernt.",
	"c_cpp.configuration.vcFormat.space.insertAfterSemicolon.description": "Nach jedem Semikolon wird ein Leerzeichen eingefügt.",
	"c_cpp.configuration.vcFormat.space.removeAroundUnaryOperator.description": "Die Leerzeichen zwischen unären Operatoren und den Operanden werden entfernt.",
	"c_cpp.configuration.vcFormat.space.aroundBinaryOperator.description": "Leerzeichen um binäre Operatoren.",
	"c_cpp.configuration.vcFormat.space.aroundAssignmentOperator.description": "Leerzeichen um Zuweisungsoperatoren.",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.description": "Leerzeichen um Zeiger- und Verweisoperatoren.",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.left.description": "Zeiger- und Verweisoperatoren werden links ausgerichtet.",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.center.description": "Zeiger- und Verweisoperatoren werden zentriert.",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.right.description": "Zeiger- und Verweisoperatoren werden rechts ausgerichtet.",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.ignore.description": "Zeiger- und Verweisoperatoren werden nicht formatiert.",
	"c_cpp.configuration.vcFormat.space.aroundTernaryOperator.description": "Leerzeichen um bedingte Operatoren.",
	"c_cpp.configuration.vcFormat.space.aroundOperators.insert.description": "Vor und nach dem Operator werden Leerzeichen hinzugefügt.",
	"c_cpp.configuration.vcFormat.space.aroundOperators.remove.description": "Die Leerzeichen vor und nach dem Operator werden entfernt.",
	"c_cpp.configuration.vcFormat.space.aroundOperators.ignore.description": "Die Leerzeichen werden wie eingegeben beibehalten.",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.description": "Umbruchoptionen für Blöcke.",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.oneLiners.markdownDescription": "Ein vollständiger Codeblock, der in einer Zeile eingegeben wird, wird unabhängig von den Werten der Einstellungen für `C_Cpp.vcFormat.newLine.*` in einer Zeile beibehalten.",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.allOneLineScopes.markdownDescription": "Jeder Code, in dem die öffnende und schließende geschweifte Klammer in einer Zeile eingegeben wird, wird unabhängig von den Werten der Einstellungen für `C_Cpp.vcFormat.newLine.*` in einer Zeile beibehalten.",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.never.markdownDescription": "Codeblöcke werden immer basierend auf den Werten der Einstellungen `C_Cpp.vcFormat.newLine.*` formatiert.",
	"c_cpp.configuration.clang_format_path.markdownDescription": "Der vollständige Pfad der ausführbaren `clang-format`-Datei. Wenn dieser nicht angegeben wird und `clang-format` im verwendeten Umgebungspfad verfügbar ist. Wenn sie nicht im Umgebungspfad gefunden wird, wird die mit der Erweiterung gebündelte `clang-format`-Datei verwendet.",
	"c_cpp.configuration.clang_format_style.markdownDescription": "Codierungsformat, unterstützt derzeit:`Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`. Verwenden Sie `file`, um das Format aus einer `.clang-format`-Datei im aktuellen oder übergeordneten Verzeichnis zu laden, oder verwenden Sie `file:<path>/.clang-format`, um auf einen speziellen Pfad zu verweisen. Verwenden Sie `{Schlüssel: Wert, ...}`, um bestimmte Parameter festzulegen. Beispielsweise ähnelt das Format `Visual Studio`: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.",
	"c_cpp.configuration.clang_format_fallbackStyle.markdownDescription": "Name des vordefinierten Formats, das als Fallback verwendet wird, falls `clang-format` mit dem Format `file` aufgerufen wird, aber die `.clang-format`-Datei nicht gefunden wird. Mögliche Werte sind `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`, `none`, oder verwenden Sie `{Schlüssel: Wert, ...}`, um bestimmte Parameter festzulegen. Beispielsweise ähnelt das Format `Visual Studio`: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.",
	"c_cpp.configuration.clang_format_sortIncludes.markdownDescription": "Wenn diese Option festgelegt ist, wird das durch den Parameter `SortIncludes` festgelegte Sortierverhalten für Includes überschrieben.",
	"c_cpp.configuration.intelliSenseEngine.description": "Steuert den IntelliSense-Anbieter.",
	"c_cpp.configuration.intelliSenseEngine.default.description": "Stellt kontextbezogene Ergebnisse über einen separaten IntelliSense-Prozess bereit.",
	"c_cpp.configuration.intelliSenseEngine.tagParser.description": "Stellt „Fuzzy“-Ergebnisse bereit, die nicht kontextbezogen sind.",
	"c_cpp.configuration.intelliSenseEngine.disabled.description": "Deaktiviert die Features des C/C++-Sprachdiensts.",
	"c_cpp.configuration.intelliSenseEngineFallback.markdownDescription": "Steuert, ob das IntelliSense-Modul automatisch zum Tagparser für Übersetzungseinheiten wechselt, die `#include#`-Fehler enthalten.",
	"c_cpp.configuration.autocomplete.markdownDescription": "Steuert den Anbieter für AutoVervollständigen. Wenn `disabled` festgelegt ist und Sie die wortbasierte Vervollständigung wünschen, müssen Sie auch `\"[cpp]\" festlegen: {\"editor.wordBasedSuggestions\": true}` (und ähnlich für die Sprachen `c` und `cuda-cpp`).",
	"c_cpp.configuration.autocomplete.default.description": "Verwendet das aktive IntelliSense-Modul.",
	"c_cpp.configuration.autocomplete.disabled.description": "Verwendet die von Visual Studio Code bereitgestellte wortbasierte Vervollständigung.",
	"c_cpp.configuration.errorSquiggles.description": "Steuert, ob vermutete Kompilierungsfehler, die von der IntelliSense-Engine erkannt wurden, an den Editor zurückgegeben werden. Außerdem wird gesteuert, ob Codeanalysewarnungen gemeldet werden, wenn keine Enthaltenen gefunden werden können. Diese Einstellung wird von der Tagparser-Engine ignoriert.",
	"c_cpp.configuration.dimInactiveRegions.description": "Hiermit wird gesteuert, ob inaktive Präprozessorblöcke anders eingefärbt werden als aktiver Code. Diese Einstellung hat keine Auswirkungen, wenn IntelliSense deaktiviert ist oder wenn das standardmäßige Design mit hohem Kontrast verwendet wird.",
	"c_cpp.configuration.inactiveRegionOpacity.markdownDescription": "Steuert de Deckkraft von inaktiven Präprozessorblöcken. Skaliert zwischen `0.1` und `1.0`. Diese Einstellung gilt nur, wenn das Abblenden inaktiver Regionen aktiviert ist.",
	"c_cpp.configuration.inactiveRegionForegroundColor.description": "Hiermit wird die Schriftfarbe von inaktiven Präprozessorblöcken gesteuert. Die Eingabe erfolgt in Form eines hexadezimalen Farbcodes oder einer gültigen Designfarbe. Wenn diese Option nicht festgelegt ist, wird standardmäßig das Syntaxfarbschema des Editors verwendet. Diese Einstellung gilt nur, wenn das Abblenden inaktiver Regionen aktiviert ist.",
	"c_cpp.configuration.inactiveRegionBackgroundColor.description": "Hiermit wird die Hintergrundfarbe von inaktiven Präprozessorblöcken gesteuert. Die Eingabe erfolgt in Form eines hexadezimalen Farbcodes oder einer gültigen Designfarbe. Wenn diese Option nicht festgelegt ist, ist die Anzeige standardmäßig transparent. Diese Einstellung gilt nur, wenn das Abblenden inaktiver Regionen aktiviert ist.",
	"c_cpp.configuration.inlayHints.autoDeclarationTypes.enabled.markdownDescription": "Zeigt Einlegehinweise für abgeleiteten Typ an, wenn `auto` in einer Deklaration verwendet wird:\n```cpp \n\n auto index /* : int */ = 0;\n```",
	"c_cpp.configuration.inlayHints.autoDeclarationTypes.showOnLeft.markdownDescription": "Zeigt Einlegehinweise für den abgeleiteten Typ an, wenn `auto` in einer Deklaration links vom Bezeichner verwendet wird:\n```cpp \n\n auto /* int */ index = 0;\n```",
	"c_cpp.configuration.inlayHints.parameterNames.enabled.markdownDescription": "Inlayhinweise für Parameternamen anzeigen:\n```cpp \n\n int a = getArea(/* width: */ x, /* height: */ y);\n```",
	"c_cpp.configuration.inlayHints.parameterNames.hideLeadingUnderscores.markdownDescription": "Blendet führendes `_` in Parameternamenshinweisen aus.",
	"c_cpp.configuration.inlayHints.parameterNames.suppressWhenArgumentContainsName.markdownDescription": "Parameternamenhinweise unterdrücken, wenn der Argumenttext oder der Inlinekommentar den Parameternamen enthält:\n```cpp \n\n int a = getArea(width, /* height: */ y);\n```",
	"c_cpp.configuration.inlayHints.referenceOperator.enabled.markdownDescription": "Zeigen Sie den Inlayhinweis-Verweisoperator `&` für Parameter an, die von einem nicht konstanten Verweis übergeben werden:\n```cpp \n\n swap(/* &first: */ str1, /* &last: */ str2);\n```",
	"c_cpp.configuration.inlayHints.referenceOperator.showSpace.markdownDescription": "Steuert, ob nach `&` ein Leerzeichen für Parameter angezeigt wird, die von einem nicht konstanten Verweis übergeben werden:\n```cpp \n\n swap(/* & first: */ str1, /* & last: */ str2);\n```",
	"c_cpp.configuration.loggingLevel.markdownDescription": "Die Ausführlichkeit der Protokollierung im Ausgabebereich. Die Reihenfolge der Ebenen von \"am wenigsten ausführlich\" bis \"am ausführlichsten\" lautet: `None` < `Error` < `Warning` < `Information` < `Debug`.",
	"c_cpp.configuration.autoAddFileAssociations.markdownDescription": "Steuert, ob Dateien automatisch zu `#files.associations#` hinzugefügt werden, wenn sie das Ziel eines Navigationsvorgangs aus einer C/C++-Datei sind.",
	"c_cpp.configuration.workspaceParsingPriority.markdownDescription": "Steuert, ob bei der Analyse der nicht aktiven Arbeitsbereichsdateien der Standbymodus verwendet wird, um eine CPU-Auslastung von 100 % zu vermeiden. Die Werte `highest`/`high`/`medium`/`low` entsprechen jeweils etwa einer CPU-Auslastung von 100/75/50/25 %.",
	"c_cpp.configuration.workspaceSymbols.description": "Die Symbole, die in die Abfrageergebnisse einbezogen werden sollen, wenn \"Zu Symbol im Arbeitsbereich wechseln\" aufgerufen wird.",
	"c_cpp.configuration.exclusionPolicy.markdownDescription": "Instruiert die Erweiterung, wann die Einstellung `#files.exclude#` (und `#C_Cpp.files.exclude#`) verwendet werden soll, wenn bestimmt wird, welche Dateien der Codenavigationsdatenbank beim Durchlaufen der Pfade im Array `browse.path` hinzugefügt werden sollen. Wenn Ihre Einstellung `#files.exclude#` nur Ordner enthält, ist `checkFolders` die beste Wahl und erhöht die Geschwindigkeit, mit der die Erweiterung die Codenavigationsdatenbank initialisieren kann.",
	"c_cpp.configuration.exclusionPolicy.checkFolders.description": "Die Ausschlussfilter werden nur einmal pro Ordner ausgewertet (einzelne Dateien werden nicht kontrolliert).",
	"c_cpp.configuration.exclusionPolicy.checkFilesAndFolders.description": "Die Ausschlussfilter werden für jede gefundene Datei und jeden gefundenen Ordner ausgewertet.",
	"c_cpp.configuration.preferredPathSeparator.markdownDescription": "Das Zeichen, das als Pfadtrennzeichen für die Ergebnisse der automatischen Vervollständigung `#include` verwendet wird.",
	"c_cpp.configuration.simplifyStructuredComments.markdownDescription": "Wenn `true` festgelegt ist, zeigen die QuickInfos für Draufzeigen und AutoVervollständigen nur bestimmte Bezeichnungen strukturierter Kommentare an. Andernfalls werden alle Kommentare angezeigt.",
	"c_cpp.configuration.doxygen.generateOnType.description": "Steuert, ob der Doxygenkommentar nach Eingabe des ausgewählten Kommentarstils automatisch eingefügt wird.",
	"c_cpp.configuration.doxygen.generatedStyle.description": "Die Zeichenfolge von Zeichen, die als Startzeile des Doxygen-Kommentars verwendet wird.",
	"c_cpp.configuration.doxygen.sectionTags.description": "Wählen Sie die Doxygen-Abschnittstags aus, die beim Daraufzeigen im QuickInfo-Bereich angezeigt werden sollen, wenn die Einstellung \"Strukturierte Kommentare vereinfachen\" aktiviert ist. ",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.string.markdownDescription": "Muster, mit dem ein mehrzeiliger oder einzeiliger Kommentarblock beginnt. Das Fortsetzungsmuster wird standardmäßig auf ` * ` für mehrzeilige Kommentarblöcke oder auf diese Zeichenfolge für einzeilige Kommentarblöcke festgelegt.",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.begin.description": "Das Muster, mit dem ein mehrzeiliger oder einzeiliger Kommentarblock beginnt.",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.continue.description": "Der Text, der in der nächsten Zeile eingefügt wird, wenn in einem mehrzeiligen oder einzeiligen Kommentarblock die EINGABETASTE gedrückt wird.",
	"c_cpp.configuration.commentContinuationPatterns.description": "Definiert das Editor-Verhalten, wenn innerhalb eines mehrzeiligen oder einzeiligen Kommentarblocks die EINGABETASTE gedrückt wird.",
	"c_cpp.configuration.configurationWarnings.description": "Bestimmt, ob Popupbenachrichtigungen angezeigt werden, wenn eine Konfigurationsanbietererweiterung keine Konfiguration für eine Quelldatei bereitstellen kann.",
	"c_cpp.configuration.intelliSenseCachePath.markdownDescription": "Definiert den Ordnerpfad für zwischengespeicherte vorkompilierte Header, die von IntelliSense verwendet werden. Der Standardcachepfad lautet unter Windows `%LocalAppData%/Microsoft/vscode-cpptools`, unter Linux `$XDG_CACHE_HOME/vscode-cpptools/` (bzw. `$HOME/.cache/vscode-cpptools/`, wenn `XDG_CACHE_HOME` nicht definiert ist) und unter macOS `$HOME/Library/Caches/vscode-cpptools/`. Der Standardpfad wird verwendet, wenn kein Pfad angegeben wurde oder ein angegebener Pfad ungültig ist.",
	"c_cpp.configuration.intelliSenseCacheSize.markdownDescription": "Maximale Größe des Festplattenspeichers pro Arbeitsbereich in Megabytes (MB) für zwischengespeicherte vorkompilierte Header. Die tatsächliche Nutzung kann um diesen Wert schwanken. Die Standardgröße beträgt `5120` MB. Das Zwischenspeichern vorkompilierter Header ist deaktiviert, wenn die Größe `0` ist.",
	"c_cpp.configuration.intelliSenseMemoryLimit.markdownDescription": "Speicherauslastungslimit in Megabyte (MB) eines IntelliSense-Prozesses. Der Standardwert ist `4096`, und der Höchstwert ist `16384`. Die Erweiterung wird heruntergefahren und ein IntelliSense-Prozess neu gestartet, wenn der Grenzwert überschritten wird.",
	"c_cpp.configuration.intelliSenseUpdateDelay.description": "Steuert die Verzögerung in Millisekunden, bevor IntelliSense nach einer Änderung aktualisiert wird.",
	"c_cpp.configuration.default.includePath.markdownDescription": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn `includePath` nicht in `c_cpp_properties.json` angegeben ist. Wenn `includePath` angegeben ist, fügen Sie dem Array `${default}` hinzu, um die Werte aus dieser Einstellung einzufügen. In der Regel sollte dies keine System-Includes enthalten; legen Sie stattdessen `#C_Cpp.default.compilerPath#` fest.",
	"c_cpp.configuration.default.defines.markdownDescription": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn `defines` nicht angegeben ist, oder die Werte, die eingefügt werden sollen, wenn `${default}` in `defines` vorhanden ist.",
	"c_cpp.configuration.default.macFrameworkPath.markdownDescription": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn `macFrameworkPath“` nicht angegeben ist, oder die Werte, die eingefügt werden sollen, wenn `${default}` in `macFrameworkPath` vorhanden ist.",
	"c_cpp.configuration.default.windowsSdkVersion.markdownDescription": "Die Version des Windows SDK-Includepfads für die Verwendung unter Windows, z. B. `10.0.17134.0`.",
	"c_cpp.configuration.default.compileCommands.markdownDescription": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn `compileCommands` entweder nicht angegeben oder auf `${default}` festgelegt ist.",
	"c_cpp.configuration.default.forcedInclude.markdownDescription": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn `forcedInclude` nicht angegeben ist, oder die Werte, die eingefügt werden sollen, wenn `${default}` in `forcedInclude` vorhanden ist.",
	"c_cpp.configuration.default.intelliSenseMode.markdownDescription": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn `intelliSenseMode` entweder nicht angegeben oder auf `${default}` festgelegt ist.",
	"c_cpp.configuration.default.compilerPath.markdownDescription": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn `compilerPath` entweder nicht angegeben oder auf `${default}` festgelegt ist.",
	"c_cpp.configuration.default.compilerArgs.markdownDescription": "Der Wert, der in der Konfiguration verwendet werden soll, wenn `compilerArgs` entweder nicht angegeben oder auf `${default}` festgelegt ist.",
	"c_cpp.configuration.default.cStandard.markdownDescription": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn `cStandard` entweder nicht angegeben oder auf `${default}` festgelegt ist.",
	"c_cpp.configuration.default.cppStandard.markdownDescription": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn `cppStandard` entweder nicht angegeben oder auf `${default}` festgelegt ist.",
	"c_cpp.configuration.default.configurationProvider.markdownDescription": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn `configurationProvider` entweder nicht angegeben oder auf `${default}` festgelegt ist.",
	"c_cpp.configuration.default.mergeConfigurations.markdownDescription": "Legen Sie diesen Wert auf `true` fest, um Includepfade, Definitionen und erzwungene Includes mit denen eines Konfigurationsanbieters zusammenzuführen.",
	"c_cpp.configuration.default.browse.path.markdownDescription": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn `browse.path` nicht angegeben ist, oder die Werte, die eingefügt werden sollen, wenn `${default}` in `browse.path` vorhanden ist.",
	"c_cpp.configuration.default.browse.databaseFilename.markdownDescription": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn `browse.databaseFilename` entweder nicht angegeben oder auf `${default}` festgelegt ist.",
	"c_cpp.configuration.default.browse.limitSymbolsToIncludedHeaders.markdownDescription": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn `browse.limitSymbolsToIncludedHeaders` entweder nicht angegeben oder auf `${default}` festgelegt ist.",
	"c_cpp.configuration.default.systemIncludePath.markdownDescription": "Der Wert, der für den System-Includepfad verwendet werden soll. Wenn diese Option festgelegt ist, wird der über die Einstellungen `compilerPath` und `compileCommands` abgerufene System-Includepfad überschrieben.",
	"c_cpp.configuration.default.enableConfigurationSquiggles.markdownDescription": "Steuert, ob die Erweiterung in `c_cpp_properties.json` erkannte Fehler meldet.",
	"c_cpp.configuration.default.customConfigurationVariables.markdownDescription": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn `customConfigurationVariables` nicht festgelegt ist, oder die Werte, die eingefügt werden sollen, wenn `${default}` als Schlüssel in `customConfigurationVariables` vorhanden ist.",
	"c_cpp.configuration.updateChannel.markdownDescription": "Legen Sie den Wert auf `Insiders` fest, um die neuesten Insiders-Builds der Erweiterung (die neue Features und Bugfixes enthalten) automatisch herunterzuladen und zu installieren.",
	"c_cpp.configuration.updateChannel.deprecationMessage": "Diese Einstellung ist veraltet. Erweiterungen der Vorabversionen sind jetzt über den Marketplace verfügbar.",
	"c_cpp.configuration.default.dotConfig.markdownDescription": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn `dotConfig` nicht angegeben ist, oder der einzufügende Wert, wenn `${default}` in `dotConfig` vorhanden ist.",
	"c_cpp.configuration.experimentalFeatures.description": "Hiermit wird gesteuert, ob experimentelle Features verwendet werden können.",
	"c_cpp.configuration.suggestSnippets.markdownDescription": "Wenn `true` festgelegt ist, werden Codeschnipsel vom Sprachserver bereitgestellt.",
	"c_cpp.configuration.caseSensitiveFileSupport.markdownDescription": "Wenn diese Einstellung auf `default` festgelegt ist, wird davon ausgegangen, dass für das Dateisystem des Arbeitsbereichs unter Windows die Groß-/Kleinschreibung nicht berücksichtigt und unter macOS oder Linux berücksichtigt wird. Wenn diese Einstellung auf `enabled` festgelegt ist, wird davon ausgegangen, dass für das Dateisystem des Arbeitsbereichs unter Windows die Groß-/Kleinschreibung beachtet wird.",
	"c_cpp.configuration.enhancedColorization.markdownDescription": "Wenn diese Option aktiviert ist, wird der Code basierend auf IntelliSense eingefärbt. Diese Einstellung gilt nur, wenn `#C_Cpp.intelliSenseEngine#` auf `default` festgelegt ist.",
	"c_cpp.configuration.codeFolding.description": "Wenn diese Option aktiviert ist, werden Codefaltbereiche vom Sprachserver bereitgestellt.",
	"c_cpp.configuration.markdownInComments.description": "Wählen Sie aus, ob Markdown in der QuickInfo zum Daraufzeigen verfügbar sein soll. Standardmäßig wird nur eine Teilmenge des Markdowns auf Kommentare in der QuickInfo zum Daraufzeigen angewendet.",
	"c_cpp.configuration.markdownInComments.subsetEnabled.description": "Aktivieren Sie alle Markdownfeatures in der QuickInfo, mit Ausnahme derjenigen, die die Zeichen \"_\" und \"*\" enthalten.",
	"c_cpp.configuration.markdownInComments.enabled.description": "Aktivieren Sie alle Markdownfeatures in der QuickInfo zum Daraufzeigen.",
	"c_cpp.configuration.markdownInComments.disabled.description": "Deaktivieren Sie alle Markdownfeatures in der QuickInfo zum Daraufzeigen.",
	"c_cpp.configuration.hover.description": "Wenn diese Option deaktiviert ist, werden die Hoverdetails nicht mehr vom Sprachserver bereitgestellt.",
	"c_cpp.configuration.vcpkg.enabled.markdownDescription": "Hiermit aktivieren Sie Integrationsdienste für den [vcpkg-Abhängigkeitsmanager](https://aka.ms/vcpkg/).",
	"c_cpp.configuration.addNodeAddonIncludePaths.markdownDescription": "Fügen Sie Includepfade aus `nan` und `node-addon-api` hinzu, wenn es sich um Abhängigkeiten handelt.",
	"c_cpp.configuration.renameRequiresIdentifier.markdownDescription": "Wenn `true` festgelegt ist, erfordert 'Symbol umbenennen' einen gültigen C/C++-Bezeichner.",
	"c_cpp.configuration.autocompleteAddParentheses.markdownDescription": "Wenn `true` festgelegt ist, fügt AutoVervollständigen automatisch `(` nach Funktionsaufrufen hinzu. In diesem Fall kann auch `)` in Abhängigkeit vom Wert der Einstellung `#editor.autoClosingBrackets#` hinzugefügt werden.",
	"c_cpp.configuration.filesExclude.markdownDescription": "Konfigurieren Sie Globmuster zum Ausschließen von Ordnern (und Dateien, wenn `#C_Cpp.exclusionPolicy#` geändert wird). Diese sind spezifisch für die C/C++-Erweiterung und gelten zusätzlich zu `#files.exclude#`, aber im Gegensatz zu `#files.exclude#` gelten sie auch für Pfade außerhalb des aktuellen Arbeitsbereichsordners und werden nicht aus der Explorer-Ansicht entfernt. Weitere Informationen zu Globmustern finden Sie [hier](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).",
	"c_cpp.configuration.filesExcludeBoolean.markdownDescription": "Das Globmuster, mit dem Dateipfade verglichen werden sollen. Legen Sie diesen Wert auf `true` oder `false` fest, um das Muster zu aktivieren bzw. zu deaktivieren.",
	"c_cpp.configuration.filesExcludeWhen.markdownDescription": "Zusätzliche Überprüfung der gleichgeordneten Elemente einer entsprechenden Datei. Verwenden Sie `$(basename)` als Variable für den entsprechenden Dateinamen.",
	"c_cpp.configuration.debugger.useBacktickCommandSubstitution.markdownDescription": "Wenn `true` festgelegt ist, verwendet die Befehlsersetzung der Debugger-Shell veraltete Backtick-Zeichen ``(`)``.",
	"c_cpp.configuration.legacyCompilerArgsBehavior.markdownDescription": "Aktivieren Sie das Verhalten vor Version 1.10.0 für die Verarbeitung der Shell-Escapezeichen in den Einstellungen der Compilerargumente. Shell-Escapezeichen werden in Argumentarrays ab Version 1.10.0 nicht mehr erwartet oder standardmäßig unterstützt.",
	"c_cpp.configuration.legacyCompilerArgsBehavior.deprecationMessage": "Diese Einstellung ist temporär und unterstützt den Übergang zum korrigierten Verhalten in Version 1.10.0.",
	"c_cpp.configuration.sshTargetsView.description": "Steuert, ob die Ansicht „SSH-Ziele“ sichtbar ist. Aktivieren Sie die Ansicht standardmäßig, wenn ein SSH-Befehl aufgerufen wird.",
	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: andere Verweisergebnisse",
	"c_cpp.contributes.views.sshTargetsView.title": "Cpptools: SSH-Ziele",
	"c_cpp.contributes.viewsWelcome.contents": "Weitere Informationen zu launch.json finden Sie unter [Konfigurieren des C/C++-Debuggings](https://code.visualstudio.com/docs/cpp/launch-json-reference).",
	"c_cpp.configuration.debugShortcut.description": "Zeigen Sie die Wiedergabeschaltfläche \"Ausführen und Debuggen\" und das Zahnrad \"Debugkonfiguration hinzufügen\" in der Titelleiste des Editors für C++-Dateien an.",
	"c_cpp.debuggers.pipeTransport.description": "Falls angegeben, weist diese Option den Debugger an, eine Verbindung mit einem Remotecomputer mithilfe einer anderen ausführbaren Datei als Pipe herzustellen, die Standardeingaben/-ausgaben zwischen VS Code und der ausführbaren Back-End-Datei für den MI-fähigen Debugger weiterleitet (z. B. gdb).",
	"c_cpp.debuggers.pipeTransport.default.pipeProgram": "Geben Sie den vollqualifizierten Pfad für den Pipeprogrammnamen ein, z. B. `/usr/bin/ssh`.",
	"c_cpp.debuggers.pipeTransport.default.debuggerPath": "Der vollständige Pfad zum Debugger auf dem Zielcomputer, z. B. \"/usr/bin/gdb\".",
	"c_cpp.debuggers.pipeTransport.debuggerPath.description": "Der vollständige Pfad zum Debugger auf dem Zielcomputer, z. B. \"/usr/bin/gdb\".",
	"c_cpp.debuggers.pipeTransport.pipeCwd.description": "Der vollqualifizierte Pfad zum Arbeitsverzeichnis für das Pipeprogramm.",
	"c_cpp.debuggers.pipeTransport.pipeProgram.description": "Der vollqualifizierte auszuführende Pipebefehl.",
	"c_cpp.debuggers.pipeTransport.pipeArgs.description": "Befehlszeilenargumente, die zum Konfigurieren der Verbindung an das Pipeprogramm übergeben werden.",
	"c_cpp.debuggers.pipeTransport.pipeEnv.description": "Umgebungsvariablen, die an das Pipeprogramm übergeben werden.",
	"c_cpp.debuggers.pipeTransport.quoteArgs.description": "Gibt an, ob Anführungszeichen gesetzt werden sollen, wenn die einzelnen pipeProgram-Argumente Zeichen enthalten (z. B. Leerzeichen oder Tabstopps). Bei Einstellung auf \"false\" wird der Debuggerbefehl nicht mehr automatisch in Anführungszeichen gesetzt. Der Standardwert ist \"true\".",
	"c_cpp.debuggers.logging.description": "Optionale Flags zum Festlegen, welche Nachrichtentypen in der Debugging-Konsole protokolliert werden sollen.",
	"c_cpp.debuggers.logging.exceptions.description": "Optionales Flag zum Festlegen, ob Ausnahmemeldungen in der Debugging-Konsole protokolliert werden sollen. Der Standardwert ist TRUE.",
	"c_cpp.debuggers.logging.moduleLoad.description": "Optionales Flag zum Festlegen, ob Modulladeereignisse in der Debugging-Konsole protokolliert werden sollen. Der Standardwert ist TRUE.",
	"c_cpp.debuggers.logging.programOutput.description": "Optionales Flag zum Festlegen, ob die Programmausgabe in der Debugging-Konsole protokolliert werden soll. Der Standardwert ist TRUE.",
	"c_cpp.debuggers.logging.engineLogging.description": "Optionales Flag zum Festlegen, ob Nachrichten der Diagnosedebug-Engine in der Debugging-Konsole protokolliert werden sollen. Der Standardwert ist FALSE.",
	"c_cpp.debuggers.logging.trace.description": "Optionales Flag zum Festlegen, ob die Befehlsablaufverfolgung des Diagnoseadapters in der Debugging-Konsole protokolliert werden soll. Der Standardwert ist FALSE.",
	"c_cpp.debuggers.logging.traceResponse.description": "Optionales Flag zum Festlegen, ob die Befehls- und Antwortablaufverfolgung des Diagnoseadapters in der Debugging-Konsole protokolliert werden soll. Der Standardwert ist FALSE.",
	"c_cpp.debuggers.cppvsdbg.logging.threadExit.description": "Optionales Flag zum Bestimmen, ob Meldungen zum Beenden des Threads in der Debugging-Konsole protokolliert werden sollen. Standardwert: \"false\".",
	"c_cpp.debuggers.cppvsdbg.logging.processExit.description": "Optionale Kennzeichnung zum Bestimmen, ob Meldungen zum Beenden des Zielprozesses in der Debugging-Konsole protokolliert werden sollen. Standardwert: \"true\".",
	"c_cpp.debuggers.text.description": "Der auszuführende Debuggerbefehl.",
	"c_cpp.debuggers.description.description": "Optionale Beschreibung des Befehls.",
	"c_cpp.debuggers.ignoreFailures.description": "Wenn dieser Wert auf TRUE festgelegt ist, werden durch den Befehl verursachte Fehler ignoriert. Der Standardwert ist FALSE.",
	"c_cpp.debuggers.program.description": "Vollständiger Pfad zur ausführbaren Programmdatei.",
	"c_cpp.debuggers.args.description": "Befehlszeilenargumente, die an das Programm übergeben werden.",
	"c_cpp.debuggers.cppdbg.type.description": "Der Typ der Engine. Muss \"cppdbg\" sein.",
	"c_cpp.debuggers.cppvsdbg.type.description": "Der Typ der Engine. Muss \"cppvsdbg\" sein.",
	"c_cpp.debuggers.targetArchitecture.description": "Die Architektur der zu debuggenden Komponente. Falls dieser Parameter nicht festgelegt ist, wird die Architektur automatisch erkannt. Zulässige Werte sind \"x86\", \"arm\", \"arm64\", \"mips\", \"x64\", \"amd64\" und \"x86_64\".",
	"c_cpp.debuggers.cwd.description": "Das Arbeitsverzeichnis des Ziels.",
	"c_cpp.debuggers.setupCommands.description": "Ein oder mehrere GDB/LLDB-Befehle, die zum Einrichten des zugrunde liegenden Debuggers ausgeführt werden. Beispiel: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].",
	"c_cpp.debuggers.postRemoteConnectCommands.description": "Mindestens ein Befehl, der nach der Remoteverbindung mit einem Debugserver ausgeführt wird.",
	"c_cpp.debuggers.customLaunchSetupCommands.description": "Wenn diese Option angegeben wird, werden die Standardbefehle zum Starten eines Ziels durch einige andere Befehle ersetzt. Zum Anfügen eines Zielprozesses kann dies z. B. \"-target-attach\" sein. Im Fall einer leeren Befehlsliste werden die Startbefehle durch nichts ersetzt. Dies kann nützlich sein, wenn für den Debugger Startoptionen als Befehlszeilenoptionen angegeben werden. Beispiel: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].",
	"c_cpp.debuggers.launchCompleteCommand.description": "Der Befehl, der nach der vollständigen Einrichtung des Debuggers ausgeführt wird, um den Zielprozess auszuführen. Zulässige Werte sind \"exec-run\", \"exec-continue\" und \"None\". Der Standardwert ist \"exec-run\".",
	"c_cpp.debuggers.cppdbg.visualizerFile.description": "Die .natvis-Datei, die beim Debuggen dieses Prozesses verwendet werden soll. Diese Option ist nicht mit der automatischen Strukturierung und Einrückung von GDB kompatibel. Weitere Informationen finden Sie auch bei \"showDisplayString\", wenn Sie diese Einstellung verwenden.",
	"c_cpp.debuggers.cppdbg.svdPath.description": "Der vollständige Pfad zur SVD-Datei eines eingebetteten Geräts.",
	"c_cpp.debuggers.cppvsdbg.visualizerFile.description": "Die .natvis-Datei, die beim Debuggen dieses Prozesses verwendet werden soll.",
	"c_cpp.debuggers.showDisplayString.description": "Wenn eine visualizerFile angegeben wird, wird die Anzeigezeichenfolge von showDisplayString aktiviert. Durch Aktivieren dieser Option kann die Leistung während des Debuggings verlangsamt werden.",
	"c_cpp.debuggers.environment.description": "Umgebungsvariablen, die der Umgebung für das Programm hinzugefügt werden sollen. Beispiel: [ { \"name\": \"config\", \"value\": \"Debug\" } ], not [ { \"config\": \"Debug\" } ].",
	"c_cpp.debuggers.envFile.description": "Absoluter Pfad zu einer Datei, die Umgebungsvariablendefinitionen enthält. Diese Datei enthält Schlüssel-Wert-Paare, die durch ein Gleichheitszeichen pro Zeile getrennt sind. Beispiel: `Key=Value`.",
	"c_cpp.debuggers.additionalSOLibSearchPath.description": "Durch Semikolons getrennte Liste von Verzeichnissen, die für die Suche nach SO-Dateien verwendet werden sollen. Beispiel: \"c:\\dir1;c:\\dir2\".",
	"c_cpp.debuggers.MIMode.description": "Hiermit wird der Konsolendebugger angegeben, mit dem die MIDebugEngine eine Verbindung herstellt. Zulässige Werte sind \"gdb\" und \"lldb\".",
	"c_cpp.debuggers.miDebuggerPath.description": "Der Pfad zum MI-Debugger (z. B. gdb). Ist die Option nicht angegeben, wird zuerst nach dem Pfad für den Debugger gesucht.",
	"c_cpp.debuggers.miDebuggerArgs.description": "Zusätzliche Argumente für den MI-Debugger (z. B. gdb).",
	"c_cpp.debuggers.miDebuggerServerAddress.description": "Netzwerkadresse des MI-Debugger-Servers, mit dem eine Verbindung hergestellt werden soll (Beispiel: localhost:1234).",
	"c_cpp.debuggers.useExtendedRemote.description": "Stellen Sie eine Verbindung mit dem MI-Debuggerserver mit dem erweiterten Remotemodus des Ziels her.",
	"c_cpp.debuggers.stopAtEntry.description": "Optionaler Parameter. Wenn dieser Wert auf TRUE festgelegt ist, sollte der Debugger am Einstiegspunkt des Ziels anhalten. Wenn die processId übergeben wird, hat dies keine Auswirkungen.",
	"c_cpp.debuggers.debugServerPath.description": "Optionaler vollständiger Pfad zum Debugserver, der gestartet werden soll. Der Standardwert ist NULL. Dies wird in Verbindung mit \"miDebugServerAddress\" oder Ihrem eigenen Server mit \"customSetupCommand\" verwendet, auf dem \"-target-select remote <server:port>\" ausgeführt wird.",
	"c_cpp.debuggers.debugServerArgs.description": "Optionale Debugserverargumente. Der Standardwert ist \"null\".",
	"c_cpp.debuggers.serverStarted.description": "Optionales vom Server gestartetes Muster, nach dem in der Ausgabe des Debugservers gesucht wird. Der Standardwert ist \"null\".",
	"c_cpp.debuggers.filterStdout.description": "stdout-Stream für ein vom Server gestartetes Muster suchen und stdout in der Debugausgabe protokollieren. Der Standardwert ist \"true\".",
	"c_cpp.debuggers.filterStderr.description": "stderr-Stream für ein vom Server gestartetes Muster suchen und stderr in der Debugausgabe protokollieren. Der Standardwert ist \"false\".",
	"c_cpp.debuggers.serverLaunchTimeout.description": "Optionale Zeit in Millisekunden, während der der Debugger auf den Start von debugServer wartet. Der Standardwert ist 10.000.",
	"c_cpp.debuggers.coreDumpPath.description": "Optionaler vollständiger Pfad zu einer Kern-Speicherabbilddatei für das angegebene Programm. Der Standardwert ist \"NULL\".",
	"c_cpp.debuggers.cppdbg.externalConsole.description": "Wenn dieser Wert auf TRUE festgelegt ist, wird eine Konsole für die zu debuggende Komponente gestartet. Bei FALSE wird die Komponente unter Linux und Windows in der integrierten Konsole angezeigt.",
	"c_cpp.debuggers.cppvsdbg.externalConsole.description": "[Veraltet für \"console\"] Wenn dieser Wert auf TRUE festgelegt ist, wird eine Konsole für die zu debuggende Komponente gestartet. Bei FALSE wird keine Konsole gestartet.",
	"c_cpp.debuggers.cppvsdbg.console.description": "Gibt an, wo das Debugziel gestartet wird. Wenn keine Angabe vorliegt, wird standardmäßig „internalConsole“ verwendet.",
	"c_cpp.debuggers.cppvsdbg.console.internalConsole.description": "Die Ausgabe an die Debugging-Konsole von VS Code. Das Lesen von Konsoleneingaben (z. B. `std::cin` oder `scanf`) wird nicht unterstützt.",
	"c_cpp.debuggers.cppvsdbg.console.integratedTerminal.description": "Das integrierte Terminal von VS Code.",
	"c_cpp.debuggers.cppvsdbg.console.externalTerminal.description": "Konsolenanwendungen werden in einem externen Terminalfenster gestartet. Das Fenster wird in Neustartszenarien erneut verwendet und beim Beenden der Anwendung nicht automatisch ausgeblendet.",
	"c_cpp.debuggers.cppvsdbg.console.newExternalWindow.description": "Konsolenanwendungen werden in ihrem eigenen externen Konsolenfenster gestartet, das beim Beenden der Anwendung ebenfalls beendet wird. Nicht-Konsolenanwendungen werden ohne Terminal ausgeführt, und stdout/stderr wird ignoriert.",
	"c_cpp.debuggers.avoidWindowsConsoleRedirection.description": "Wenn dieser Wert auf TRUE festgelegt ist, wird für die zu debuggende Komponente die Konsolenumleitung deaktiviert, die für die Unterstützung des integrierten Terminals erforderlich ist.",
	"c_cpp.debuggers.sourceFileMap.description": "Optionale Quelldateizuordnungen, die an die Debug-Engine übergeben werden. Beispiel: `{ \"/original/source/path\":\"/current/source/path\" }`.",
	"c_cpp.debuggers.processId.anyOf.description": "Optionale Prozess-ID, an die der Debugger angefügt werden soll. Verwenden Sie \"${command:pickProcess}\", um eine Liste der lokalen ausgeführten Prozesse abzurufen, an die angefügt werden kann. Beachten Sie, dass einige Plattformen Administratorrechte erfordern, damit an einen Prozess angefügt werden kann.",
	"c_cpp.debuggers.symbolSearchPath.description": "Durch Semikolons getrennte Liste von Verzeichnissen, die für die Suche nach Symboldateien (PDB-Dateien) verwendet werden sollen. Beispiel: \"c:\\dir1;c:\\dir2\".",
	"c_cpp.debuggers.dumpPath.description": "Optionaler vollständiger Pfad zu einer Dumpdatei für das angegebene Programm. Beispiel: \"c:\\temp\\app.dmp\". Standardwert ist NULL.",
	"c_cpp.debuggers.enableDebugHeap.description": "Wenn dieser Wert auf FALSE festgelegt ist, wird der Prozess mit deaktiviertem Debug-Heap gestartet. Hiermit wird die Umgebungsvariable \"_NO_DEBUG_HEAP\" auf \"1\" festgelegt.",
	"c_cpp.debuggers.symbolLoadInfo.description": "Explizite Steuerung des Symbolladevorgangs.",
	"c_cpp.debuggers.symbolLoadInfo.loadAll.description": "Bei TRUE werden Symbole für alle Bibliotheken geladen, andernfalls werden keine solib-Symbole geladen. Der Standardwert ist TRUE.",
	"c_cpp.debuggers.symbolLoadInfo.exceptionList.description": "Liste mit Dateinamen (Platzhalter zulässig), getrennt durch Semikolons `;`. Ändert das Verhalten von „LoadAll“. Wenn „LoadAll“ auf `TRUE` festgelegt ist, werden keine Symbole für Bibliotheken geladen, die einem beliebigen Namen in der Liste entsprechen. Andernfalls werden nur Symbole für übereinstimmende Bibliotheken geladen. Beispiel: `foo.so;bar.so`.",
	"c_cpp.debuggers.requireExactSource.description": "Optionales Flag, um anzufordern, dass der aktuelle Quellcode mit der PDB-Datei übereinstimmt.",
	"c_cpp.debuggers.stopAtConnect.description": "Wenn \"true\", sollte der Debugger nach dem Herstellen einer Verbindung mit dem Ziel beendet werden. Wenn \"false\" wird der Debugger nach dem Herstellen der Verbindung fortgesetzt. Entspricht standardmäßig \"false\".",
	"c_cpp.debuggers.hardwareBreakpoints.description": "Explizite Steuerung des Hardwarehaltepunktverhaltens für Remoteziele.",
	"c_cpp.debuggers.hardwareBreakpoints.require.description": "Wenn \"true\", verwenden Sie immer Hardwarehaltepunkte. Entspricht standardmäßig \"false\".",
	"c_cpp.debuggers.hardwareBreakpoints.limit.description": "Optionaler Grenzwert für die Anzahl der zu verwendenden verfügbaren Hardwarehaltepunkte. Nur erzwungen, wenn \"require\" auf \"true\" festgelegt ist und \"limit\" größer als 0 ist. Entspricht standardmäßig 0.",
	"c_cpp.debuggers.variables.description": "Variablen für rekursive Ersetzung in dieser Startkonfiguration. Jede Variable kann auf andere verweisen.",
	"c_cpp.debuggers.variables.properties.description": "Variable für rekursive Ersetzung in dieser Startkonfiguration. Der Wert kann auf andere Variablen verweisen.",
	"c_cpp.debuggers.host.description": "Hostinformationen.",
	"c_cpp.debuggers.host.user.description": "Benutzer, der sich beim Host anmeldet.",
	"c_cpp.debuggers.host.hostName.description": "Hostname.",
	"c_cpp.debuggers.host.port.description": "SSH-Port auf dem Host. Der Standardwert ist 22.",
	"c_cpp.debuggers.host.jumpHost.description": "Stellen Sie eine Verbindung mit dem Zielhost her, indem Sie zuerst eine Verbindung mit den Jumphosts herstellen.",
	"c_cpp.debuggers.host.localForward.description": "Leiten Sie Verbindungen an den angegebenen TCP-Port oder Unixsocket auf dem lokalen Host (Clienthost), an den angegebenen Host und Port oder an den Unixsocket auf der Remoteseite weiter.",
	"c_cpp.debuggers.host.localForward.bindAddress.description": "Lokale Adresse",
	"c_cpp.debuggers.host.localForward.port.description": "Lokaler Port",
	"c_cpp.debuggers.host.localForward.host.description": "Hostname",
	"c_cpp.debuggers.host.localForward.hostPort.description": "Hostport",
	"c_cpp.debuggers.host.localForward.localSocket.description": "Lokaler Socket",
	"c_cpp.debuggers.host.localForward.remoteSocket.description": "Remotesocket",
	"c_cpp.debuggers.deploySteps.description": "Schritte, die zum Bereitstellen der Anwendung erforderlich sind. Die Reihenfolge ist wichtig.",
	"c_cpp.debuggers.deploySteps.copyFile.description": "Kopieren Sie Dateien mithilfe von SCP oder rsync.",
	"c_cpp.debuggers.deploySteps.copyFile.files.description": "Dateien, die kopiert werden sollen. Unterstützt Pfadmuster.",
	"c_cpp.debuggers.deploySteps.copyFile.targetDir.description": "Zielverzeichnis.",
	"c_cpp.debuggers.deploySteps.copyFile.recursive.description": "Bei \"wahr\" werden Ordner rekursiv kopiert.",
	"c_cpp.debuggers.deploySteps.copyFile.scpPath.description": "Optionaler vollständiger Pfad zu SCP. Es wird davon ausgegangen, dass sich SCP auf PATH befindet, wenn keine Angabe erfolgt.",
	"c_cpp.debuggers.deploySteps.copyFile.rsyncPath.description": "Optionaler vollständiger Pfad zu rsync. Es wird davon ausgegangen, dass sich rsync auf PATH befindet, wenn nicht angegeben",
	"c_cpp.debuggers.deploySteps.debug": "Wenn WAHR, überspringen Sie beim Starten ohne Debuggen. Wenn FALSCH, überspringen Sie beim Starten von Debuggen. Wenn nicht definiert, überspringen Sie nie.",
	"c_cpp.debuggers.deploySteps.ssh.description": "SSH-Befehlsschritt.",
	"c_cpp.debuggers.deploySteps.ssh.command.description": "Befehl, der über SSH ausgeführt werden soll. Der Befehl nach „-c“ im SSH-Befehl.",
	"c_cpp.debuggers.deploySteps.ssh.sshPath.description": "Optionaler vollständiger Pfad zu SSH. Es wird davon ausgegangen, dass sich SSH auf PATH befindet, sofern nicht angegeben.",
	"c_cpp.debuggers.deploySteps.continueOn.description": "Ein optionales Endmuster in der Ausgabe. Wenn dieses Muster in der Ausgabe angezeigt wird, setzen Sie die Bereitstellungsprozeduren unabhängig davon fort, ob dieser Schritt zurückgegeben wird.",
	"c_cpp.debuggers.deploySteps.shell.description": "Shellbefehlsschritt.",
	"c_cpp.debuggers.deploySteps.shell.command.description": "Shellbefehl, der ausgeführt werden soll.",
	"c_cpp.debuggers.vsCodeCommand.description": "VS Code-Befehl, der aufgerufen werden soll. Kann ein Befehl in VS Code oder eine aktive Erweiterung sein.",
	"c_cpp.debuggers.vsCodeCommand.command.description": "VS Code-Befehl, der aufgerufen werden soll.",
	"c_cpp.debuggers.vsCodeCommand.args.description": "Argumente für den VS Code-Befehl.",
	"c_cpp.taskDefinitions.name.description": "Der Name der Aufgabe.",
	"c_cpp.taskDefinitions.command.description": "Der Pfad zu einem Compiler oder Skript, der die Kompilierung ausführt.",
	"c_cpp.taskDefinitions.args.description": "Zusätzliche Argumente, die an den Compiler oder das Kompilierungsskript übergeben werden sollen.",
	"c_cpp.taskDefinitions.options.description": "Zusätzliche Befehlsoptionen.",
	"c_cpp.taskDefinitions.options.cwd.description": "Das aktuelle Arbeitsverzeichnis des ausgeführten Programms oder Skripts. Wenn keine Angabe erfolgt, wird das aktuelle Arbeitsbereich-Stammverzeichnis des Codes verwendet.",
	"c_cpp.taskDefinitions.detail.description": "Zusätzliche Details zur Aufgabe.",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.description": "Dies sind die Pfade zu denselben Quellstrukturen – einmal aktuell und einmal zur Kompilierzeit. Im EditorPath gefundene Dateien werden zum Haltepunktabgleich dem CompileTimePath-Pfad zugeordnet. Bei der Anzeige von Speicherorten für die Stapelüberwachung erfolgt die Zuordnung vom CompileTimePath zum EditorPath.",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.editorPath.description": "Der Pfad zur Quellstruktur, die vom Editor verwendet wird.",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.useForBreakpoints.description": "FALSE, wenn dieser Eintrag nur für eine Stapelrahmen-Speicherortzuordnung verwendet wird. TRUE, wenn dieser Eintrag auch zum Angeben von Haltepunktpositionen verwendet werden soll.",
	"c_cpp.debuggers.symbolOptions.description": "Optionen zum Steuern, wie Symbole (PDB-Dateien) gefunden und geladen werden.",
	"c_cpp.debuggers.unknownBreakpointHandling.description": "Steuert, wie extern gesetzte Haltepunkte (normalerweise über rohe GDB-Befehle) behandelt werden, wenn ihnen begegnet wird.\nErlaubte Werte sind \"throw\", was sich so verhält, als ob eine Ausnahme von der Anwendung ausgelöst würde, und \"stop\", was die Debugsitzung nur pausiert. Der Standardwert ist \"throw\".",
	"c_cpp.debuggers.VSSymbolOptions.description": "Stellt eine Konfiguration zum Suchen und Laden von Symbolen in den Debugadapter bereit.",
	"c_cpp.debuggers.VSSymbolOptions.searchPaths.description": "Ein Array von Symbolserver-URLs (Beispiel: http​://MyExampleSymbolServer) oder Verzeichnisse (Beispiel:/Build/Symbols) für die Suche nach PDB-Dateien. Diese Verzeichnisse werden zusätzlich zu den Standardspeicherorten durchsucht – neben dem Modul und dem Pfad, in dem die PDB ursprünglich abgelegt wurde.",
	"c_cpp.debuggers.VSSymbolOptions.searchMicrosoftSymbolServer.description": "Wenn „true“, wird der Microsoft-Symbolserver (https​://msdl.microsoft.com​/download/symbols) dem Symbolsuchpfad hinzugefügt. Wenn nicht angegeben, wird diese Option standardmäßig auf „false“ eingestellt.",
	"c_cpp.debuggers.VSSymbolOptions.cachePath.description": "Das Verzeichnis, in dem von Symbolservern heruntergeladene Symbole zwischengespeichert werden sollen. Wenn nicht angegeben, wird der Debugger unter Windows standardmäßig auf %TEMP% \\SymbolCache eingestellt.",
	"c_cpp.debuggers.VSSymbolOptions.moduleFilter.description": "Stellt Optionen bereit, um zu steuern, für welche Module (DLL-Dateien) der Debugger versuchen soll, Symbole (PDB-Dateien) zu laden.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.description": "Stellt eine Konfiguration zum Laden von Symbolen in den Debugadapter bereit.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.description": "Steuert, in welchem der beiden grundlegenden Betriebsmodi der Modulfilter ausgeführt wird.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.loadAllButExcluded.enumDescriptions": "Laden Sie Symbole für alle Module, es sei denn, das Modul befindet sich im Array „excludedModules“.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.loadOnlyIncluded.enumDescriptions": "Versuchen Sie nicht, Symbole für IRGENDEIN Modul zu laden, es sei denn, es befindet sich im Array „includedModules“, oder es wird über die Einstellung „includeSymbolsNextToModules“ hinzugefügt.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.excludedModules.description": "Ein Array von Modulen, für das der Debugger keine Symbole laden soll. Platzhalter (Beispiel: MyCompany. *. dll) werden unterstützt.\n\nDiese Eigenschaft wird ignoriert, wenn „Modus“ nicht auf „loadAllButExcluded“ festgelegt ist.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.includedModules.description": "Ein Array von Modulen, für das der Debugger keine Symbole laden soll. Platzhalter (Beispiel: MyCompany. *. dll) werden unterstützt.\n\nDiese Eigenschaft wird ignoriert, wenn „Modus“ nicht auf „loadOnlyIncluded“ festgelegt ist.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.includeSymbolsNextToModules.description": "Wenn „true“, wird der Debugger für ein beliebiges Modul, das sich NICHT im Array „includedModules“ befindet, weiterhin neben dem Modul selbst und der ausführbaren Datei, die gestartet wird, überprüfen. Die Pfade in der Symbolsuchliste werden jedoch nicht überprüft. Diese Option ist standardmäßig auf „true“ eingestellt.\n\nDiese Eigenschaft wird ignoriert, wenn „Modus“ nicht auf „loadOnlyIncluded“ festgelegt ist.",
	"c_cpp.semanticTokenTypes.referenceType.description": "Stil für C++-/CLI-Referenztypen.",
	"c_cpp.semanticTokenTypes.cliProperty.description": "Stil für C++-/CLI-Eigenschaften.",
	"c_cpp.semanticTokenTypes.genericType.description": "Stil für generische C++-/CLI-Typen.",
	"c_cpp.semanticTokenTypes.valueType.description": "Stil für C++-/CLI-Werttypen.",
	"c_cpp.semanticTokenTypes.templateFunction.description": "Stil für C++-Vorlagenfunktionen.",
	"c_cpp.semanticTokenTypes.templateType.description": "Stil für C++-Vorlagentypen.",
	"c_cpp.semanticTokenTypes.operatorOverload.description": "Stil für überladene C++-Operatoren.",
	"c_cpp.semanticTokenTypes.memberOperatorOverload.description": "Stil für Mitgliederfunktionen von überladenen C++-Operatoren.",
	"c_cpp.semanticTokenTypes.newOperator.description": "Stil für C++-`new` oder `delete`-Operatoren",
	"c_cpp.semanticTokenTypes.customLiteral.description": "Stil für benutzerdefinierte C++-Literale.",
	"c_cpp.semanticTokenTypes.numberLiteral.description": "Stil für benutzerdefinierte C++-Literalnummern.",
	"c_cpp.semanticTokenTypes.stringLiteral.description": "Stil für benutzerdefinierte C++-Literalzeichenfolgen.",
	"c_cpp.semanticTokenModifiers.global.description": "Stil für globale Symbole.",
	"c_cpp.semanticTokenModifiers.local.description": "Stil für lokale Symbole.",
	"c_cpp.debuggers.logging.natvisDiagnostics.description": "Optionales Flag zum Festlegen, ob NATVIS-Diagnosemeldungen in der Debugging-Konsole protokolliert werden sollen. Der Standardwert ist „Keine“.",
	"c_cpp.debuggers.logging.category.verbose.description": "Protokolle, die während der Entwicklung zur interaktiven Untersuchung verwendet werden. Diese Protokolle sollten in erster Linie Informationen enthalten, die für das Debuggen nützlich sind, und keinen langfristigen Wert aufweisen.",
	"c_cpp.debuggers.logging.category.warning.description": "Protokolle, die ein ungewöhnliches oder unerwartetes Ereignis im Anwendungsfluss hervorheben, aber ansonsten nicht dazu führen, dass die Ausführung der Anwendung beendet wird.",
	"c_cpp.debuggers.logging.category.error.description": "Protokolle, die hervorheben, wenn der aktuelle Ausführungsfluss aufgrund eines Fehlers beendet wird. Diese sollten auf einen Fehler in der aktuellen Aktivität und nicht auf einen anwendungsweiten Fehler hinweisen.",
	"c_cpp.debuggers.logging.category.none.description": "Wird nicht zum Schreiben von Protokollmeldungen verwendet. Gibt an, dass eine Protokollierungskategorie keine Meldungen schreiben soll.",
	"c_cpp.walkthrough.title": "Los geht's mit C++-Entwicklung",
	"c_cpp.walkthrough.description": "Tauchen Sie ein in die umfassende C++-Entwicklungserfahrung VS Code.",
	"c_cpp.walkthrough.set.up.title": "C++-Umgebung einrichten",
	"c_cpp.walkthrough.activating.description": "Die C++-Erweiterung wird aktiviert, um zu bestimmen, ob Ihre C++-Umgebung eingerichtet wurde.\nErweiterung wird aktiviert...",
	"c_cpp.walkthrough.no.compilers.windows.description": "Auf Ihrem Computer wurde kein C++-Compiler gefunden, der für die Verwendung der C++-Erweiterung erforderlich ist. Befolgen Sie die Anweisungen auf der rechten Seite, um einen Compiler zu installieren, und klicken Sie dann unten auf \"Meinen neuen Compiler suchen\".\n[Find my new Compiler](command:C_Cpp.RescanCompilers?%22walkthrough%22)",
	"c_cpp.walkthrough.no.compilers.description": "Auf Ihrem Computer wurde kein C++-Compiler gefunden, der für die Verwendung der C++-Erweiterung erforderlich ist. Wählen Sie \"C++-Compiler installieren\" aus, um einen Compiler für Sie zu installieren, oder befolgen Sie die Anweisungen auf der rechten Seite, um einen Compiler zu installieren, und klicken Sie dann unten auf \"Meinen neuen Compiler suchen\".\n[Install a C++ Compiler](command:C_Cpp.InstallCompiler?%22walkthrough%22)\n[Find my new Compiler](command:C_Cpp.RescanCompilers?%22walkthrough%22)",
	"c_cpp.walkthrough.compilers.found.description": "Die C++-Erweiterung funktioniert mit einem C++-Compiler. Wählen Sie eines der bereits auf Ihrem Computer Vorhandenen aus, indem Sie auf die Schaltfläche unten klicken.\n[Select my Default Compiler](command:C_Cpp.SelectIntelliSenseConfiguration?%22walkthrough%22)",
	"c_cpp.walkthrough.compilers.found.altText": "Abbildung, das die Auswahl eines standardmäßigen Compilerschnellauswahl und die Liste der Compiler auf dem Benutzercomputer anzeigt, von denen einer ausgewählt ist.",
	"c_cpp.walkthrough.create.cpp.file.title": "C++-Datei erstellen",
	"c_cpp.walkthrough.create.cpp.file.description": "[Open](command:toSide:workbench.action.files.openFile) oder [create](command:toSide:workbench.action.files.newUntitledFile?%7B%22languageId%22%3A%22cpp%22%7D) eine C++-Datei. Speichern Sie die Datei unbedingt mit der Erweiterung \".cpp\", z. B. \"helloworld.cpp\". \n[C++-Datei erstellen] (command:toSide:workbench.action.files.newUntitledFile?%7B%22languageId%22%3A%22cpp%22%7D)",
	"c_cpp.walkthrough.create.cpp.file.altText": "Öffnen Sie eine C++-Datei oder einen Ordner mit einem C++-Projekt.",
	"c_cpp.walkthrough.command.prompt.title": "Starten über die Developer-Eingabeaufforderung",
	"c_cpp.walkthrough.command.prompt.description": "Wenn Sie den Microsoft Visual Studio C++-Compiler verwenden, erfordert die C++-Erweiterung, dass Sie VS Code über die Entwicklereingabeaufforderung starten. Befolgen Sie die Anweisungen auf der rechten Seite, um den Neustart zu starten.\n[Reload Window](command:workbench.action.reloadWindow)",
	"c_cpp.walkthrough.run.debug.title": "Ausführen und Debuggen Ihrer C++-Datei",
	"c_cpp.walkthrough.run.debug.mac.description": "Öffnen Sie Ihre C++-Datei, und klicken Sie in der oberen rechten Ecke des Editors auf die Wiedergabeschaltfläche, oder drücken Sie F5, wenn Sie die Datei verwenden. Wählen Sie \"clang++ – Aktive Datei erstellen und debuggen\" aus, die mit dem Debugger ausgeführt werden soll.",
	"c_cpp.walkthrough.run.debug.linux.description": "Öffnen Sie Ihre C++-Datei, und klicken Sie in der oberen rechten Ecke des Editors auf die Wiedergabeschaltfläche, oder drücken Sie F5, wenn Sie die Datei verwenden. Wählen Sie \"g++ – Aktive Datei erstellen und debuggen\" aus, die mit dem Debugger ausgeführt werden soll.",
	"c_cpp.walkthrough.run.debug.windows.description": "Öffnen Sie Ihre C++-Datei, und klicken Sie in der oberen rechten Ecke des Editors auf die Wiedergabeschaltfläche, oder drücken Sie F5, wenn Sie die Datei verwenden. Wählen Sie \"cl.exe – Aktive Datei erstellen und debuggen\" aus, die mit dem Debugger ausgeführt werden soll.",
	"c_cpp.walkthrough.run.debug.windows.altText": "Bild, das einen Haltepunkt in einer C++-Datei, die f5-Buttobn und das Ausführungssymbol oben rechts anzeigt",
	"c_cpp.walkthrough.customize.debugging.title": "Debuggen anpassen",
	"c_cpp.walkthrough.customize.debugging.mac.description": "Um Ihre Debugkonfiguration anzupassen, wählen Sie den Explorer in der Aktivitätsleiste aus, und öffnen Sie einen Ordner, der Ihre C++-Datei enthält. Öffnen Sie die C++-Datei, und wählen Sie rechts neben der Wiedergabeschaltfläche \"Debugkonfiguration hinzufügen\" aus. Die neue Debugkonfiguration wird in der Datei \"launch.json\" Ihres Projekts gespeichert. \n[Weitere Informationen](https://code.visualstudio.com/docs/cpp/config-linux#_debug-helloworldcpp)",
	"c_cpp.walkthrough.customize.debugging.linux.description": "Um Ihre Debugkonfiguration anzupassen, wählen Sie den Explorer in der Aktivitätsleiste aus, und öffnen Sie einen Ordner, der Ihre C++-Datei enthält. Öffnen Sie die C++-Datei, und wählen Sie rechts neben der Wiedergabeschaltfläche \"Debugkonfiguration hinzufügen\" aus. Die neue Debugkonfiguration wird in der Datei \"launch.json\" Ihres Projekts gespeichert. \n[Weitere Informationen](https://code.visualstudio.com/docs/cpp/config-msvc#_debug-helloworldcpp)",
	"c_cpp.walkthrough.customize.debugging.windows.description": "Um Ihre Debugkonfiguration anzupassen, wählen Sie den Explorer in der Aktivitätsleiste aus, und öffnen Sie einen Ordner, der Ihre C++-Datei enthält. Öffnen Sie die C++-Datei, und wählen Sie rechts neben der Wiedergabeschaltfläche \"Debugkonfiguration hinzufügen\" aus. Die neue Debugkonfiguration wird in der Datei \"launch.json\" Ihres Projekts gespeichert. \n[Weitere Informationen](https://code.visualstudio.com/docs/cpp/config-clang-mac#_debug-helloworldcpp)",
	"c_cpp.walkthrough.customize.debugging.altText": "Bild, das \"Debugkonfiguration hinzufügen\" in der Dropdownliste anzeigt",
	"c_cpp.codeActions.refactor.inline.macro.title": "Inlinemakro",
	"c_cpp.codeActions.refactor.inline.macro.description": "Ersetzen Sie den Makroaufruf durch den erweiterten Code.",
	"c_cpp.codeActions.refactor.extract.function.title": "In Funktion extrahieren",
	"c_cpp.codeActions.refactor.extract.function.description": "Extrahieren Sie den ausgewählten Code in eine freie oder Memberfunktion.",
	"c_cpp.configuration.refactoring.includeHeader.markdownDescription": "Steuert, ob die Headerdatei einer umgestalteten Funktion/eines umgestalteten Symbols in die zugehörige Quelldatei aufgenommen werden soll, wenn ein Refactoring durchgeführt wird (beispielweise beim Erstellen einer Deklaration/Definition).",
	"c_cpp.configuration.refactoring.includeHeader.always.description": "Hiermit wird die Headerdatei immer eingeschlossen, wenn sie nicht explizit in der zugehörigen Quelldatei enthalten ist.",
	"c_cpp.configuration.refactoring.includeHeader.ifNeeded.description": "Hiermit wird die Headerdatei nur dann eingeschlossen, wenn sie nicht explizit in der zugehörigen Quelldatei enthalten ist oder implizit eingeschlossen wird.",
	"c_cpp.configuration.refactoring.includeHeader.never.description": "Hiermit wird die Headerdatei nie eingeschlossen."
}