/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.name": "Konfigurationsbezeichner. `Mac`, `Linux` und `Win32` sind spezielle Bezeichner für Konfigurationen, die auf diesen Plattformen automatisch ausgewählt werden, aber der Bezeichner kann beliebig lauten.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerPath": "Vollständiger Pfad des verwendeten Compilers, z. B. `/usr/bin/gcc`, um mehr Genauigkeit bei IntelliSense zu erhalten.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerArgs": "Compilerargumente zum Ändern der verwendeten Include- oder Define-Anweisungen, z. B.: `-nostdinc++`, `-m32` usw.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cStandard": "Version des C-Sprachstandards, die für IntelliSense verwendet werden soll. Hinweis: GNU-Standards werden nur zum Abfragen des festgelegten Compilers zum Abrufen von GNU-Definitionen verwendet, und IntelliSense emuliert die äquivalente Version des C-Standards.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cppStandard": "Version des C++-Sprachstandards, die für IntelliSense verwendet werden soll. Hinweis: GNU-Standards werden nur zum Abfragen des festgelegten Compilers zum Abrufen von GNU-Definitionen verwendet, und IntelliSense emuliert die äquivalente Version des C++-Standards.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compileCommands": "Vollständiger Pfad zur Datei `compile_commands.json` für den Arbeitsbereich.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.includePath": "Eine Liste mit Pfaden, die das IntelliSense-Modul bei der Suche nach eingeschlossenen Headern verwenden soll. Die Suche in diesen Pfaden ist nicht rekursiv. Geben Sie `**` an, um eine rekursive Suche durchzuführen. Beispiel: `${workspaceFolder}/**` durchsucht alle Unterverzeichnisse, `${workspaceFolder}` hingegen nicht. In der Regel sollte dies keine System-Includes enthalten; legen Sie stattdessen `C_Cpp.default.compilerPath` fest.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.macFrameworkPath": "Eine Liste der Pfade für die IntelliSense-Engine, die beim Suchen nach eingeschlossenen Headern aus Mac-Frameworks verwendet werden sollen. Wird nur in der Mac-Konfiguration unterstützt.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.windowsSdkVersion": "Die Version des Windows SDK-Includepfads für die Verwendung unter Windows, z. B. `10.0.17134.0`.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.defines": "Eine Liste mit Präprozessordefinitionen, die das IntelliSense-Modul, beim Analysieren von Dateien verwenden sollen. Verwenden Sie optional `=`, um einen Wert festzulegen, z. B.: `VERSION=1`.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.intelliSenseMode": "Der zu verwendende IntelliSense-Modus, der einer Plattform- und Architekturvariante von MSVC, GCC oder Clang zugeordnet wird. Wenn er nicht oder auf `${default}` festgelegt wird, wählt die Erweiterung den Standardwert für diese Plattform aus. Windows verwendet standardmäßig `windows-msvc-x64`, Linux standardmäßig `linux-gcc-x64` und macOS standardmäßig `macos-clang-x64`. IntelliSense-Modi, die nur Varianten vom Typ `<Compiler>-<Architektur>` angeben (z. B. `gcc-x64`), sind Legacy-Modi und werden basierend auf der Hostplattform automatisch in die Varianten `<Plattform>-<Compiler>-<Architektur>` konvertiert.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.forcedInclude": "Eine Liste der Dateien, die vor einer Includedatei in einer Übersetzungseinheit enthalten sein sollen.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.configurationProvider": "Die ID einer VS Code-Erweiterung, die IntelliSense-Konfigurationsinformationen für Quelldateien bereitstellen kann.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.mergeConfigurations": "Legen Sie diesen Wert auf `true` fest, um Includepfade, Definitionen und erzwungene Includes mit denen eines Konfigurationsanbieters zusammenzuführen.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.limitSymbolsToIncludedHeaders": "Legen Sie diesen Wert auf `true` fest, um nur die Dateien zu verarbeiten, die direkt oder indirekt als Header enthalten sind. Legen Sie diesen Wert auf `false` fest, um alle Dateien unter den angegebenen Includepfaden zu verarbeiten.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.databaseFilename": "Pfad zur generierten Symboldatenbank. Wenn ein relativer Pfad angegeben wird, wird er relativ zum Standardspeicherort des Arbeitsbereichs erstellt.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.path": "Eine Liste der Pfade, die für die Indizierung und Analyse von Arbeitsbereichssymbolen verwendet werden sollen (z. B. bei \"Gehe zu Definition\" oder \"Alle Verweise suchen\"). Die Suche in diesen Pfaden ist standardmäßig rekursiv. Geben Sie `*` an, um eine nicht rekursive Suche durchzuführen. Beispiel: `${workspaceFolder}` durchsucht alle Unterverzeichnisse, `${workspaceFolder}/*` hingegen nicht.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.customConfigurationVariables": "Benutzerdefinierte Variablen, die über den Befehl `${cpptools:activeConfigCustomVariable}` abgefragt werden können, um sie für die Eingabevariablen in `launch.json` oder `tasks.json` zu verwenden.",
	"c_cpp_properties.schema.json.definitions.env": "Benutzerdefinierte Variablen, die mithilfe der Syntax `${Variable}` oder `${env:Variable}` an einer beliebiger Stelle in dieser Datei wiederverwendet werden können.",
	"c_cpp_properties.schema.json.definitions.version": "Version der Konfigurationsdatei. Diese Eigenschaft wird von der Erweiterung verwaltet und darf nicht geändert werden.",
	"c_cpp_properties.schema.json.definitions.enableConfigurationSquiggles": "Steuert, ob die Erweiterung in `c_cpp_properties.json` erkannte Fehler meldet."
}