/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.name": "Identyfikator konfiguracji. `Mac`, `Linux` oraz `Win32` są specjalnymi identyfikatorami dla konfiguracji, które zostaną wybrane automatycznie na tych platformach, aczkolwiek ten identyfikator może być dowolny.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerPath": "Pełna ścieżka używanego kompilatora, na przykład `/usr/bin/gcc`, umożliwiająca dokładniejsze działanie funkcji IntelliSense.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerArgs": "Argumenty kompilatora do modyfikowania użytych dołączeń lub definicji, np. `-nostdinc++`, `-m32` itp. Argumenty, które przyjmują dodatkowe argumenty rozdzielone spacjami, powinny być wprowadzane jako osobne argumenty w tablicy, na przykład dla argumentu `--sysroot <arg>` należy użyć `\"--sysroot\", \"<arg>\"`.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cStandard": "Wersja standardu języka C, która ma być używana na potrzeby funkcji IntelliSense. Uwaga: standardy GNU są używane tylko do wykonywania zapytań względem kompilatora w celu pobrania dyrektyw define systemu GNU, a funkcja IntelliSense będzie emulować odpowiednią wersję standardu języka C.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cppStandard": "Wersja standardu języka C++, która ma być używana na potrzeby funkcji IntelliSense. Uwaga: standardy GNU są używane tylko do wykonywania zapytań względem kompilatora w celu pobrania dyrektyw define systemu GNU, a funkcja IntelliSense będzie emulować odpowiednią wersję standardu języka C++.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compileCommands": "Pełna ścieżka do pliku `compile_commands.json` na potrzeby obszaru roboczego.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.includePath": "Lista ścieżek na potrzeby aparatu funkcji IntelliSense, która ma być używana podczas wyszukiwania dołączanych nagłówków. Wyszukiwanie w tych ścieżkach nie jest rekurencyjne. Uściślij za pomocą znaku `**`, aby wskazać wyszukiwanie rekurencyjne. Na przykład wyrażenie `${workspaceFolder}/**` powoduje przeszukiwanie wszystkich podkatalogów, podczas gdy wyrażenie `${workspaceFolder}` tego nie robi. Zazwyczaj nie powinno to zawierać elementów dołączanych systemu; zamiast tego ustaw `C_Cpp.default.compilerPath`.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.macFrameworkPath": "Lista ścieżek, których aparat IntelliSense ma używać podczas wyszukiwania dołączanych nagłówków ze struktur na komputerach Mac. Obsługiwane tylko w konfiguracji dla komputerów Mac.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.windowsSdkVersion": "Wersja ścieżki dołączania zestawu Microsoft Windows SDK do użycia w systemie Windows, np. `10.0.17134.0`.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.dotConfig": "Ścieżka do pliku .config utworzonego przez system Kconfig. System Kconfig generuje plik ze wszystkimi definicjami na potrzeby kompilowania projektu. Przykłady projektów używających systemu Kconfig to jądro systemu Linux i system NuttX RTOS.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.defines": "Lista definicji preprocesora na potrzeby aparatu funkcji IntelliSense, które mają być używane do analizowania plików. Opcjonalnie można użyć operatora `=`, aby ustawić wartość, np. `VERSION=1`.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.intelliSenseMode": "Tryb funkcji IntelliSense umożliwiający użycie tych map na wariancie platformy lub architektury programu MSVC, gcc lub Clang. Jeśli nie jest to ustawione, lub jeśli jest ustawione na wartość `${default}`, rozszerzenie wybierze wartość domyślną dla danej platformy. Wprzypadku systemu Windows wartością domyślną jest `windows-msvc-x64`, dla Linuksa – `linux-gcc-x64`, a dla systemu macOS – `macos-clang-x64`. Tryby funkcji IntelliSense, które określają jedynie warianty `<kompilator>-<architektura>` (np. `gcc-x64`), są trybami przestarzałymi i są one automatycznie konwertowane na warianty `<platforma>-<kompilator>-<architektura>` na podstawie platformy hosta.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.forcedInclude": "Lista plików, które powinny być dołączane przed wszelkimi dołączanymi plikami w jednostce translacji.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.configurationProvider": "Identyfikator rozszerzenia programu VS Code, które może udostępnić informacje o konfiguracji funkcji IntelliSense dla plików źródłowych.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.mergeConfigurations": "Ustaw wartość `true`, aby scalić ścieżki dołączania, definiować i wymuszać dołączanie do ścieżek od dostawcy konfiguracji.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.limitSymbolsToIncludedHeaders": "Ustaw na wartość `true`, aby przetwarzać tylko pliki bezpośrednio lub pośrednio dołączone w postaci nagłówków. Ustaw na wartość `false`, aby przetwarzać wszystkie pliki w określonych ścieżkach dołączania.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.databaseFilename": "Ścieżka do generowanej bazy danych symboli. Jeśli zostanie określona ścieżka względna, będzie to ścieżka względem domyślnej lokalizacji magazynowania obszaru roboczego.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.path": "Lista ścieżek, która ma być używana do indeksowania i analizowania symboli obszaru roboczego (używana przez funkcje „Przejdź do definicji”, „Znajdź wszystkie odwołania”). Wyszukiwanie na tych ścieżkach jest domyślnie rekursywne. Za pomocą znaku `*` możesz określić wyszukiwanie jako nierekursywne. Na przykład `${workspaceFolder}` przeszukuje wszystkie podkatalogi, podczas gdy `${workspaceFolder}/*` już tego nie robi.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.customConfigurationVariables": "Zmienne niestandardowe, względem których można wykonywać zapytania za pomocą polecenia `${cpptools:activeConfigCustomVariable}`, aby użyć ich na potrzeby zmiennych wejściowych w plikach `launch.json` lub `tasks.json`.",
	"c_cpp_properties.schema.json.definitions.env": "Zmienne niestandardowe, których można używać ponownie w dowolnym miejscu tego pliku przy użyciu składni `${zmienna}` lub `${env:zmienna}`.",
	"c_cpp_properties.schema.json.definitions.version": "Wersja pliku konfiguracji. Tą właściwością zarządza rozszerzenie. Nie zmieniaj jej.",
	"c_cpp_properties.schema.json.definitions.enableConfigurationSquiggles": "Określa, czy rozszerzenie będzie raportować błędy wykryte w pliku `c_cpp_properties.json`."
}