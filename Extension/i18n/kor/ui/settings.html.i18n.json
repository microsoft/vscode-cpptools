/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"microsoft.c.cpp.extension": "Microsoft C/C++ 확장",
	"c.cpp.extension": "C/C++ 확장",
	"open.this.editor": "다음 명령을 사용하여 이 편집기 열기:",
	"edit.configurations.ui": "C/C++: 구성 편집(UI)",
	"switch.to.json": "파일 링크를 클릭하거나 명령을 사용하여 {0} 파일로 전환합니다.",
	"edit.configurations.in.json": "JSON 파일의 구성 편집",
	"edit.configurations.json": "C/C++: 구성 편집(JSON)",
	"check.the.schema": "{0}(으)로 이동하여 C/C++ 속성에 대해 자세히 알아보세요.",
	"view.schema.reference": "속성 스키마 참조",
	"intellisense.configurations": "IntelliSense 구성",
	"intellisense.configurations.description": "이 편집기를 사용하여 기본 {0} 파일에 정의된 IntelliSense 설정을 편집합니다. 이 편집기에서 변경한 내용은 선택한 구성에만 적용됩니다. 한 번에 여러 구성을 편집하려면 {1}(으)로 이동합니다.",
	"configuration.name": "구성 이름",
	"configuration.name.description": "구성을 식별하는 이름입니다. {0}, {1} 및 {2}은(는) 해당 플랫폼에서 자동으로 선택되는 구성의 특수 식별자입니다.",
	"select.configuration.to.edit": "편집할 구성 세트를 선택합니다.",
	"add.configuration.button": "구성 추가",
	"configuration.name.input": "구성 이름...",
	"ok.button": "확인",
	"cancel.button": "취소",
	"compiler.path": "컴파일러 경로",
	"compiler.path.description": "더 정확한 IntelliSense를 사용하도록 설정하는 데 사용되는, 프로젝트를 빌드하는 데 사용하는 컴파일러의 전체 경로입니다(예: {0}). 확장에서는 컴파일러에 쿼리하여 IntelliSense에 사용할 시스템 포함 경로 및 기본 정의를 확인합니다.",
	"specify.a.compiler": "컴파일러 경로를 지정하거나 드롭다운 목록에서 검색된 컴파일러 경로를 선택합니다.",
	"no.compiler.paths.detected": "(검색된 컴파일러 경로가 없음)",
	"compiler.args": "컴파일러 인수",
	"compiler.arguments": "사용된 포함 또는 정의를 수정하기 위한 컴파일러 인수입니다. {0}, {1} 등. 공백으로 구분된 추가 인수를 사용하는 인수는 배열에 별도의 인수로 입력해야 합니다(예: {2}의 경우 {3}을(를) 사용하세요).",
	"one.argument.per.line": "줄당 하나의 인수입니다.",
	"intellisense.mode": "IntelliSense 모드",
	"intellisense.mode.description": "MSVC, gcc 또는 Clang의 플랫폼 및 아키텍처 변형에 매핑되는 사용할 IntelliSense 모드입니다. 설정되지 않거나 {0}(으)로 설정된 경우 확장에서 해당 플랫폼의 기본값을 선택합니다. Windows의 경우 기본값인 {1}(으)로 설정되고, Linux의 경우 기본값인 {2}(으)로 설정되며, macOS의 경우 기본값인 {3}(으)로 설정됩니다. {4} 모드를 재정의하려면 특정 IntelliSense 모드를 선택합니다. {5} 변형(예: {6})만 지정하는 IntelliSense 모드는 레거시 모드이며 호스트 플랫폼에 따라 {7} 변형으로 자동으로 변환됩니다.",
	"include.path": "경로 포함",
	"include.path.description": "포함 경로는 소스 파일에 포함된 헤더 파일(예: {0})을 포함하는 폴더입니다. 포함된 헤더 파일을 검색하는 동안 사용할 IntelliSense 엔진의 경로 목록을 지정합니다. 이러한 경로 검색은 비재귀적입니다. 재귀적 검색을 나타내려면 {1}을(를) 지정합니다. 예를 들어 {2}은(는) 모든 하위 디렉터리를 검색하지만 {3}은(는) 그러지 않습니다. Visual Studio가 설치된 Windows를 사용하거나 {4} 설정에 컴파일러가 지정된 경우 이 목록에 시스템 포함 경로를 나열할 필요가 없습니다.",
	"one.include.path.per.line": "줄당 하나의 포함 경로입니다.",
	"defines": "정의",
	"defines.description": "파일을 구문 분석하는 동안 사용할 IntelliSense 엔진의 전처리기 정의 목록입니다. 필요에 따라 {0}을(를) 사용하여 값(예: {1})을 설정할 수 있습니다.",
	"one.definition.per.line": "줄당 하나의 정의입니다.",
	"c.standard": "C 표준",
	"c.standard.description": "IntelliSense에 사용할 C 언어 표준의 버전입니다. 참고: GNU 표준은 GNU 정의를 가져오기 위해 설정된 컴파일러를 쿼리하는 데만 사용되며, IntelliSense는 해당 C 표준 버전을 에뮬레이트합니다.",
	"cpp.standard": "C++ 표준",
	"cpp.standard.description": "IntelliSense에 사용할 C++ 언어 표준의 버전입니다. 참고: GNU 표준은 GNU 정의를 가져오기 위해 설정된 컴파일러를 쿼리하는 데만 사용되며, IntelliSense는 해당 C++ 표준 버전을 에뮬레이트합니다.",
	"advanced.settings": "고급 설정",
	"configuration.provider": "구성 공급자",
	"configuration.provider.description": "소스 파일에 대한 IntelliSense 구성 정보를 제공할 수 있는 VS Code 확장의 ID입니다. 예를 들어 VS Code 확장 ID {0}을(를) 사용하여 CMake 도구 확장의 구성 정보를 제공합니다.",
	"windows.sdk.version": "Windows SDK 버전",
	"windows.sdk.version.description": "Windows에서 사용할 Windows SDK 포함 경로의 버전입니다(예: {0}).",
	"mac.framework.path": "Mac 프레임워크 경로",
	"mac.framework.path.description": "Mac 프레임워크에서 포함된 헤더를 검색하는 동안 사용할 IntelliSense 엔진의 경로 목록입니다. macOS 구성에서만 지원됩니다.",
	"one.path.per.line": "줄당 하나의 경로입니다.",
	"forced.include": "강제 포함",
	"forced.include.description": "소스 파일의 다른 문자를 처리하기 전에 포함해야 하는 파일의 목록입니다. 파일은 나열된 순서대로 포함됩니다.",
	"one.file.per.line": "줄당 하나의 파일입니다.",
	"dot.config": "Dot Config",
	"dot.config.description": "Kconfig 시스템에서 만든 .config 파일의 경로입니다. Kconfig 시스템은 프로젝트를 빌드하기 위한 모든 정의가 포함된 파일을 생성합니다. Kconfig 시스템을 사용하는 프로젝트의 예로는 Linux 커널 및 NuttX RTOS가 있습니다.",
	"compile.commands": "컴파일 명령",
	"compile.commands.description": "작업 영역의 {0} 파일 전체 경로입니다. 이 파일에서 검색된 포함 경로 및 정의가 {1} 및 {2} 설정에 설정된 값 대신 사용됩니다. 사용자가 편집기에서 연 파일에 해당하는 변환 단위에 대한 항목이 컴파일 명령 데이터베이스에 포함되지 않는 경우, 경고 메시지가 나타나고 확장에서 대신 {3} 및 {4} 설정을 사용합니다.",
	"merge.configurations": "구성 병합",
	"merge.configurations.description": "{0}(또는 선택)인 경우, 포함 경로, 정의 및 강제 포함을 구성 제공자의 경로와 병합합니다.",
	"browse.path": "찾아보기: 경로",
	"browse.path.description": "태그 파서가 소스 파일에 포함된 헤더를 검색할 경로의 목록입니다. 생략된 경우 {0}이(가) {1}(으)로 사용됩니다. 기본적으로 이 경로 검색은 재귀적입니다. 비재귀적 검색을 나타내려면 {2}을(를) 지정합니다. 예: {3}은(는) 모든 하위 디렉터리를 검색하지만 {4}은(는) 하위 디렉터리를 검색하지 않습니다.",
	"one.browse.path.per.line": "줄당 하나의 검색 경로입니다.",
	"limit.symbols": "찾아보기: 포함된 헤더로 기호 제한",
	"limit.symbols.checkbox": "{0}(또는 선택)인 경우 태그 파서는 {1}의 원본 파일에 직접 또는 간접적으로 포함된 코드 파일만 구문 분석합니다. {2}인 경우(또는 선택하지 않은 경우) 태그 파서는 {3} 목록에 지정된 경로에 있는 모든 코드 파일을 구문 분석합니다.",
	"database.filename": "찾아보기: 데이터베이스 파일 이름",
	"database.filename.description": "생성된 기호 데이터베이스의 경로입니다. 이 경로는 태그 파서의 기호 데이터베이스를 작업 영역의 기본 스토리지 위치가 아닌 다른 곳에 저장하도록 확장에 지시합니다. 상대 경로가 지정된 경우 작업 영역 폴더 자체가 아니라 작업 영역의 기본 스토리지 위치에 대해 상대적으로 만들어집니다. {0} 변수를 사용하여 작업 영역 폴더에 상대적인 경로를 지정할 수 있습니다(예: {1})."
}