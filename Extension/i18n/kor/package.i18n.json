/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"c_cpp.subheaders.intelliSense.title": "IntelliSense",
	"c_cpp.subheaders.formatting.title": "서식 지정",
	"c_cpp.subheaders.codeDocumentation.title": "코드 설명서",
	"c_cpp.subheaders.codeAnalysis.title": "코드 분석",
	"c_cpp.subheaders.debugging.title": "디버깅",
	"c_cpp.subheaders.resourceManagement.title": "리소스 관리",
	"c_cpp.subheaders.miscellaneous.title": "기타",
	"c_cpp.capabilities.untrustedWorkspaces.description": "여러 설정으로 인해 작업 영역에 로컬인 프로세스가 실행될 수 있습니다(예: C_Cpp.clang_format_path, C_Cpp.codeAnalysis.clangTidy.path, C_Cpp.addNodeAddonIncludePaths, C_Cpp.default.compilerPath, C_Cpp.default.configurationProvider 및 C_Cpp.default.compileCommands 및 그와 동등한 c_cpp_properties.json의 속성).",
	"c_cpp.command.configurationSelect.title": "구성 선택...",
	"c_cpp.command.configurationProviderSelect.title": "구성 공급자 변경...",
	"c_cpp.command.configurationEditJSON.title": "구성 편집(JSON)",
	"c_cpp.command.configurationEditUI.title": "구성 편집(UI)",
	"c_cpp.command.selectIntelliSenseConfiguration.title": "IntelliSense 구성 선택...",
	"c_cpp.command.installCompiler.title": "C++ 컴파일러 설치",
	"c_cpp.command.rescanCompilers.title": "컴파일러 관련 재검사",
	"c_cpp.command.switchHeaderSource.title": "헤더/소스 전환",
	"c_cpp.command.enableErrorSquiggles.title": "오류 표시선 사용",
	"c_cpp.command.disableErrorSquiggles.title": "오류 표시선 사용 안 함",
	"c_cpp.command.toggleDimInactiveRegions.title": "비활성 영역 색 지정 설정/해제",
	"c_cpp.command.resetDatabase.title": "IntelliSense 데이터베이스 다시 설정",
	"c_cpp.command.takeSurvey.title": "설문 조사 참여",
	"c_cpp.command.restartIntelliSenseForFile.title": "활성 파일에 대한 IntelliSense 다시 시작",
	"c_cpp.command.logDiagnostics.title": "진단 정보 로그",
	"c_cpp.command.referencesViewGroupByType.title": "참조 형식으로 그룹화",
	"c_cpp.command.referencesViewUngroupByType.title": "참조 형식으로 그룹화 해제",
	"c_cpp.command.rescanWorkspace.title": "작업 영역 다시 검사",
	"c_cpp.command.vcpkgClipboardInstallSuggested.title": "vcpkg install 명령을 클립보드에 복사",
	"c_cpp.command.vcpkgOnlineHelpSuggested.title": "vcpkg 도움말 페이지 방문",
	"c_cpp.command.generateEditorConfig.title": "VC 형식 설정에서 EditorConfig 콘텐츠 생성",
	"c_cpp.command.GoToNextDirectiveInGroup.title": "조건부 그룹의 다음 전처리기 지시문으로 이동",
	"c_cpp.command.GoToPrevDirectiveInGroup.title": "조건부 그룹의 이전 전처리기 지시문으로 이동",
	"c_cpp.command.CreateDeclarationOrDefinition.title": "선언/정의 만들기",
	"c_cpp.command.RunCodeAnalysisOnActiveFile.title": "활성 파일에서 코드 분석 실행",
	"c_cpp.command.RunCodeAnalysisOnOpenFiles.title": "열린 파일에서 코드 분석 실행",
	"c_cpp.command.RunCodeAnalysisOnAllFiles.title": "모든 파일에 대한 코드 분석 실행",
	"c_cpp.command.RemoveAllCodeAnalysisProblems.title": "모든 코드 분석 문제 해결",
	"c_cpp.command.BuildAndDebugFile.title": "C/C++ 파일 디버그",
	"c_cpp.command.BuildAndRunFile.title": "C/C++ 파일 실행",
	"c_cpp.command.AddDebugConfiguration.title": "디버그 구성 추가",
	"c_cpp.command.GenerateDoxygenComment.title": "Doxygen 주석 생성",
	"c_cpp.command.addSshTarget.title": "SSH 대상 추가",
	"c_cpp.command.removeSshTarget.title": "SSH 대상 제거",
	"c_cpp.command.setActiveSshTarget.title": "이 SSH 대상을 활성 대상으로 설정",
	"c_cpp.command.selectActiveSshTarget.title": "활성 SSH 대상 선택",
	"c_cpp.command.selectSshTarget.title": "SSH 대상 선택",
	"c_cpp.command.activeSshTarget.title": "활성 SSH 대상 가져오기",
	"c_cpp.command.refreshCppSshTargetsView.title": "새로 고침",
	"c_cpp.command.sshTerminal.title": "새 터미널에서 이 SSH 대상에 연결",
	"c_cpp.configuration.maxConcurrentThreads.markdownDescription": "언어 서비스 처리에 사용할 최대 동시 스레드 수입니다. 값은 힌트이며 항상 사용되는 것은 아닙니다. 기본값 `null`(비어 있음)은 사용 가능한 논리 프로세서 수를 사용합니다.",
	"c_cpp.configuration.maxCachedProcesses.markdownDescription": "언어 서비스 처리에 사용할 최대 캐시 프로세스 수입니다. 기본값인 `null`(비어 있음)은 사용 가능한 논리 프로세서 수의 두 배를 사용합니다.",
	"c_cpp.configuration.maxMemory.markdownDescription": "언어 서비스 처리에 사용할 수 있는 최대 메모리(MB)입니다. 이 메모리 사용량이 초과되면 더 적은 수의 프로세스가 캐시되고 동시에 실행됩니다. 기본값 `null`(비어 있음)은 시스템의 여유 메모리를 사용합니다.",
	"c_cpp.configuration.maxSymbolSearchResults.markdownDescription": "'작업 영역에서 기호로 이동'에 대해 표시할 최대 결과 수입니다. 기본값은 `5000` 입니다.",
	"c_cpp.configuration.intelliSense.maxCachedProcesses.markdownDescription": "계속 실행할 IntelliSense 프로세스의 최대 수입니다. 기본값 `null`(비어 있음)은 `#C_Cpp.maxCachedProcesses#`에서 상속된 값을 사용합니다.",
	"c_cpp.configuration.intelliSense.maxMemory.markdownDescription": "이 메모리 사용량(MB)을 초과한 후 새 프로세스가 생성되기 전에 이전 IntelliSense 프로세스가 종료됩니다. 기본값인 `null`(비어 있음)은 `#C_Cpp.maxMemory#`에서 상속된 값을 사용합니다.",
	"c_cpp.configuration.references.maxConcurrentThreads.markdownDescription": "'모든 참조 찾기' 및 '이름 바꾸기'에 사용할 최대 동시 스레드 수입니다. 기본값인 `null`(비어 있음)은 `#C_Cpp.maxConcurrentThreads#`에서 상속된 값을 사용합니다.",
	"c_cpp.configuration.references.maxCachedProcesses.markdownDescription": "'모든 참조 찾기' 및 '이름 바꾸기'에 대해 메모리에 유지할 최대 프로세스 수입니다. 기본값인 `0`은 이 기능을 사용하지 않도록 설정합니다. `null`(비어 있음) 값은 `#C_Cpp.maxCachedProcesses#`에서 상속된 값을 사용합니다.",
	"c_cpp.configuration.references.maxMemory.markdownDescription": "이 메모리 사용량(MB)을 초과하면 더 적은 수의 '모든 참조 찾기' 및 '이름 바꾸기' 프로세스가 캐시되고 동시에 실행됩니다. 기본값인 `null`(비어 있음)은 `#C_Cpp.maxMemory#`에서 상속된 값을 사용합니다.",
	"c_cpp.configuration.codeAnalysis.maxConcurrentThreads.markdownDescription": "코드 분석에 사용할 최대 동시 스레드 수입니다. 기본값인 `null`(비어 있음)은 `#C_Cpp.maxConcurrentThreads#`에서 상속된 값의 절반을 사용합니다.",
	"c_cpp.configuration.codeAnalysis.maxMemory.markdownDescription": "이 메모리 사용량(MB)을 초과한 후에는 더 적은 수의 코드 분석 프로세스가 동시에 실행됩니다. 기본값인 `null`(비어 있음)은 `#C_Cpp.maxMemory#`에서 상속된 값을 사용합니다.",
	"c_cpp.configuration.codeAnalysis.updateDelay.markdownDescription": "`#files.autoSave#`가 `afterDelay`이고 `#C_Cpp.codeAnalysis.runAutomatically#`가 `true`인 경우 편집에서 저장이 트리거된 후 코드 분석이 처리를 시작하기 전에 지연을 밀리초 단위로 제어합니다.",
	"c_cpp.configuration.codeAnalysis.exclude.markdownDescription": "코드 분석을 위해 폴더 및 파일을 제외하기 위한 glob 패턴을 구성합니다. 작업 영역 폴더에 속하지 않은 파일은 항상 제외됩니다. `#files.exclude#` 및 `#C_Cpp.files.exclude#`에서 값을 상속합니다. [glob 패턴](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options)에 대해 자세히 알아보세요.",
	"c_cpp.configuration.codeAnalysis.excludeBoolean.markdownDescription": "파일 경로를 일치시킬 GLOB 패턴입니다. 패턴을 사용하거나 사용하지 않도록 설정하려면 `true` 또는 `false`로 설정하세요.",
	"c_cpp.configuration.codeAnalysis.excludeWhen.markdownDescription": "일치하는 파일의 형제에 대한 추가 검사입니다. `$(basename)`을 일치하는 파일 이름에 대한 변수로 사용하세요.",
	"c_cpp.configuration.codeAnalysis.runAutomatically.markdownDescription": "`true`인 경우 파일을 열거나 저장한 후 코드 분석이 자동으로 실행됩니다.",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showDisable.markdownDescription": "`true`이면 사용 가능한 경우 '비활성화' 코드 작업이 표시됩니다(다음 번에 코드 분석이 실행될 때). '비활성화' 코드 액션을 사용하면 `C_Cpp.codeAnalysis.clangTidy.checks.disabled` 설정에 경고 코드를 추가합니다.",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showDocumentation.markdownDescription": "`true`이면 사용 가능한 경우 '다음에 대한 문서 표시' 코드 작업이 표시됩니다(다음 번에 코드 분석이 실행될 때).",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.description": "사용 가능한 '지우기' 코드 분석 문제 코드 작업 옵션을 제어합니다. 더 많은 옵션을 표시하도록 설정을 변경하려면 코드 분석을 다시 실행해야 할 수 있습니다.",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.None.description": "'지우기' 코드 작업을 표시하지 않습니다.",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.AllOnly.description": "'모두 지우기' 코드 작업만 표시합니다(또는 유형이 하나뿐인 경우 '모두 지우기 <type>' 또는 문제가 하나만 있는 경우 '이것 지우기').",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.AllAndAllType.description": "'모두 지우기' 코드 작업(여러 문제 유형이 있는 경우) 및 '모두 지우기 <type>' 코드 작업 표시(또는 <type>에 대한 문제가 하나만 있는 경우 '이 항목 지우기')",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.AllAndAllTypeAndThis.description": "'모두 지우기'(여러 문제 유형이 있는 경우), '모두 지우기 <type>'(<type>에 대해 여러 문제가 있는 경우) 및 '이 항목 지우기' 코드 작업 표시",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.formatFixes.markdownDescription": "`true`이면 '수정' 코드 동작에 의해 변경된 줄에서 서식이 실행됩니다.",
	"c_cpp.configuration.codeAnalysis.clangTidy.enabled.markdownDescription": "`true`인 경우 `#C_Cpp.codeAnalysis.runAutomatically#`가 `true`(기본값)이면 `clang-tidy`를 사용한 코드 분석을 사용하도록 설정되고 파일을 열거나 저장한 뒤 실행됩니다.",
	"c_cpp.configuration.codeAnalysis.clangTidy.path.markdownDescription": "`clang-tidy` 실행 파일의 전체 경로입니다. 지정하지 않은 경우 `clang-tidy`를 환경 경로에서 사용할 수 있으면 해당 실행 파일이 사용됩니다. 환경 경로에 없는 경우에는 확장과 함께 제공된 `clang-tidy`가 사용됩니다.",
	"c_cpp.configuration.codeAnalysis.clangTidy.config.markdownDescription": "YAML/JSON 형식의 `clang-tidy` 구성을 지정합니다. `{Checks: '-*,clang-analyzer-*', CheckOptions: [{키: x, 값: y}]}`. 값이 비어 있으면 `clang-tidy`는 상위 디렉터리의 각 소스 파일에 대해 `.clang-tidy`라는 파일을 찾으려고 시도합니다.",
	"c_cpp.configuration.codeAnalysis.clangTidy.fallbackConfig.markdownDescription": "`#C_Cpp.codeAnalysis.clangTidy.config#`가 설정되지 않고 `.clang-tidy` 파일을 찾을 수 없는 경우 대체로 사용할 YAML/JSON 형식의 `clang-tidy` 구성을 지정합니다. `{Checks: '-*, clang-analyzer-*', CheckOptions: [{키: x, 값: y}]}`.",
	"c_cpp.configuration.codeAnalysis.clangTidy.headerFilter.markdownDescription": "진단을 출력할 헤더의 이름과 일치하는 POSIX 확장 정규식(ERE)입니다. 각 번역 단위의 기본 파일에서 진단이 항상 표시됩니다. `${workspaceFolder}` 변수가 지원됩니다(`.clang-tidy` 파일이 없는 경우 기본 폴백 값으로 사용됨). 이 옵션이 `null`(비어 있음)이 아닌 경우 `.clang-tidy` 파일의 `HeaderFilterRegex` 옵션(있는 경우)을 재정의합니다.",
	"c_cpp.configuration.codeAnalysis.clangTidy.args.markdownDescription": "`clang-tidy`에 전달할 추가 명령줄 인수입니다. 이는 동등한 `C_Cpp.codeAnalysis.clangTidy.*` 설정보다 우선합니다.",
	"c_cpp.configuration.codeAnalysis.clangTidy.useBuildPath.markdownDescription": "`true` 및 `compileCommands`가 설정되면 `--` 뒤에 빌드 인수가 전달되는 대신 `-p=<build-path>` 인수가 `clang-tidy`에 전달됩니다. 시스템 포함을 찾을 수 있도록 환경 변수가 설정되지 않은 경우 작동하지 않을 수 있습니다.",
	"c_cpp.configuration.codeAnalysis.clangTidy.checks.enabled.markdownDescription": "사용하도록 설정된 `clang-tidy` 검사 목록입니다. 값은 `.clang-tidy` 파일의 `Checks` 또는 `#C_Cpp.codeAnalysis.clangTidy.config#`(있는 경우)에 추가됩니다. 기본 검사 `clang-analyzer-*`는 명시적으로 비활성화되지 않는 한 항상 사용됩니다.",
	"c_cpp.configuration.codeAnalysis.clangTidy.checks.disabled.markdownDescription": "비활성화된 `clang-tidy` 검사 목록입니다. 값은 `.clang-tidy` 파일의 `Checks` 또는 `#C_Cpp.codeAnalysis.clangTidy.config#`(있는 경우)에 추가됩니다.",
	"c_cpp.configuration.formatting.description": "서식 지정 엔진을 구성합니다.",
	"c_cpp.configuration.formatting.clangFormat.markdownDescription": "코드 서식을 지정하는 데 `clang-format`이 사용됩니다.",
	"c_cpp.configuration.formatting.vcFormat.markdownDescription": "코드 서식을 지정하는 데 Visual C++ 서식 엔진이 사용됩니다.",
	"c_cpp.configuration.formatting.Default.markdownDescription": "기본적으로 `clang-format`이 코드 서식에 사용되지만 관련 설정을 가진 `.editorconfig` 파일이 포맷 중인 코드에 좀 더 가까이 있고 `#C_Cpp.clang_format_style#`이 기본값인 `file`인 경우 Visual C++ 서식 지정 엔진이 사용됩니다.",
	"c_cpp.configuration.formatting.Disabled.markdownDescription": "코드 서식을 사용하지 않도록 설정됩니다.",
	"c_cpp.configuration.vcFormat.indent.braces.markdownDescription": "`#editor.tabSize#` 설정에 지정된 수만큼 중괄호를 들여씁니다.",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.description": "새 줄 들여쓰기의 기준을 결정합니다.",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.outermostParenthesis.description": "가장 바깥쪽의 여는 괄호를 기준으로 새 줄을 들여씁니다.",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.innermostParenthesis.description": "가장 안쪽의 여는 괄호를 기준으로 새 줄을 들여씁니다.",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.statementBegin.description": "현재 문의 시작 부분을 기준으로 새 줄을 들여씁니다.",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.markdownDescription": "새 줄을 입력하면 여는 괄호 아래에 맞추거나 `#C_Cpp.vcFormat.indent.multiLineRelativeTo#`를 기준으로 맞춥니다.",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.alignToParenthesis.markdownDescription": "새 줄을 여는 괄호 아래에 맞춥니다.",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.indent.markdownDescription": "새 줄을 `#C_Cpp.vcFormat.indent.multiLineRelativeTo#`를 기준으로 들여씁니다.",
	"c_cpp.configuration.vcFormat.indent.preserveWithinParentheses.description": "기존 코드에서는 괄호 안에서 기존의 새 줄 들여쓰기 맞춤을 유지합니다.",
	"c_cpp.configuration.vcFormat.indent.caseLabels.markdownDescription": "switch 문을 기준으로 `#editor.tabSize#` 설정에 지정된 수만큼 레이블을 들여씁니다.",
	"c_cpp.configuration.vcFormat.indent.caseContents.markdownDescription": "레이블을 기준으로 `#editor.tabSize#` 설정에 지정된 수만큼 `case` 블록 내 코드를 들여씁니다.",
	"c_cpp.configuration.vcFormat.indent.caseContentsWhenBlock.markdownDescription": "`#editor.tabSize#` 설정에 지정된 수만큼 case 문 다음에 중괄호를 들여 씁니다.",
	"c_cpp.configuration.vcFormat.indent.lambdaBracesWhenParameter.markdownDescription": "문의 시작 부분을 기준으로 `#editor.tabSize#` 설정에 지정된 수만큼 함수 매개 변수로 사용되는 람다의 중괄호를 들여 씁니다.",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.description": "goto 레이블의 위치",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.oneLeft.markdownDescription": "`#editor.tabSize#` 설정에 지정된 수만큼 현재 코드 들여쓰기의 왼쪽으로 goto 레이블을 배치합니다.",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.leftmostColumn.markdownDescription": "코드의 맨 왼쪽 가장자리에 goto 레이블을 배치합니다.",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.none.markdownDescription": "goto 레이블에 서식이 지정되지 않습니다.",
	"c_cpp.configuration.vcFormat.indent.preprocessor.description": "전처리기 지시문의 위치",
	"c_cpp.configuration.vcFormat.indent.preprocessor.oneLeft.markdownDescription": "`#editor.tabSize#` 설정에 지정된 수만큼 현재 코드 들여쓰기의 왼쪽으로 전처리기 지시문을 배치합니다.",
	"c_cpp.configuration.vcFormat.indent.preprocessor.leftmostColumn.markdownDescription": "전처리기 지시문을 코드의 맨 왼쪽 가장자리에 배치합니다.",
	"c_cpp.configuration.vcFormat.indent.preprocessor.none.markdownDescription": "전처리기 지시문에 서식이 지정되지 않습니다.",
	"c_cpp.configuration.vcFormat.indent.accessSpecifiers.markdownDescription": "클래스 또는 구조체 정의를 기준으로 `#editor.tabSize#` 설정에 지정된 수만큼 액세스 지정자를 들여씁니다.",
	"c_cpp.configuration.vcFormat.indent.namespaceContents.markdownDescription": "바깥쪽 네임스페이스를 기준으로 `#editor.tabSize#` 설정에 지정된 수만큼 코드를 들여씁니다.",
	"c_cpp.configuration.vcFormat.indent.preserveComments.description": "주석의 들여쓰기는 서식 작업을 수행하는 동안 변경되지 않습니다.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.namespace.description": "네임스페이스의 여는 중괄호 위치",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.type.description": "형식 정의의 여는 중괄호 위치",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.lambda.description": "람다 함수의 여는 중괄호 위치",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.function.description": "함수의 여는 중괄호 위치",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.block.description": "제어 블록의 여는 중괄호 위치",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.newLine.description": "여는 중괄호를 새 줄로 이동합니다.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.sameLine.description": "여는 중괄호가 같은 줄에 유지되고 각 여는 중괄호 앞에 공백이 추가됩니다.",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.ignore.description": "여는 중괄호에 서식이 지정되지 않습니다.",
	"c_cpp.configuration.vcFormat.newLine.scopeBracesOnSeparateLines.description": "범위의 여는 중괄호와 닫는 중괄호를 별도의 줄에 배치합니다.",
	"c_cpp.configuration.vcFormat.newLine.closeBraceSameLine.emptyType.description": "빈 형식의 경우 닫는 중괄호를 여는 중괄호와 같은 줄로 이동합니다.",
	"c_cpp.configuration.vcFormat.newLine.closeBraceSameLine.emptyFunction.description": "빈 함수 본문의 경우 닫는 중괄호를 여는 중괄호와 같은 줄로 이동합니다.",
	"c_cpp.configuration.vcFormat.newLine.beforeCatch.markdownDescription": "`catch` 및 유사한 키워드를 새 줄에 배치합니다.",
	"c_cpp.configuration.vcFormat.newLine.beforeElse.markdownDescription": "`else`를 새 줄에 배치합니다.",
	"c_cpp.configuration.vcFormat.newLine.beforeWhileInDoWhile.markdownDescription": "`do`-`while` 루프의 `while`을 새 줄에 배치합니다.",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.description": "함수 이름과 인수 목록의 여는 괄호 사이의 간격",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.insert.description": "함수의 여는 괄호 앞에 공백을 추가합니다.",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.remove.description": "함수의 여는 괄호 앞의 공백이 제거되었습니다.",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.ignore.description": "공백을 입력한 대로 둡니다.",
	"c_cpp.configuration.vcFormat.space.withinParameterListParentheses.description": "함수 매개 변수 목록의 여는 괄호 뒤와 닫는 괄호 앞에 공백이 추가됩니다.",
	"c_cpp.configuration.vcFormat.space.betweenEmptyParameterListParentheses.description": "함수 매개 변수 목록이 비어 있는 경우 해당 괄호 사이에 공백이 삽입됩니다.",
	"c_cpp.configuration.vcFormat.space.afterKeywordsInControlFlowStatements.description": "제어 흐름 문의 키워드와 여는 괄호 사이에 공백이 추가됩니다.",
	"c_cpp.configuration.vcFormat.space.withinControlFlowStatementParentheses.description": "제어 흐름 문의 여는 괄호 뒤와 닫는 괄호 앞에 공백이 추가됩니다.",
	"c_cpp.configuration.vcFormat.space.beforeLambdaOpenParenthesis.description": "람다 인수 목록의 여는 괄호 앞에 공백이 추가됩니다.",
	"c_cpp.configuration.vcFormat.space.withinCastParentheses.description": "C 스타일 캐스트의 여는 괄호 뒤와 닫는 괄호 앞에 공백이 추가됩니다.",
	"c_cpp.configuration.vcFormat.space.afterCastCloseParenthesis.description": "C 스타일 캐스트의 닫는 괄호 뒤에 공백이 추가됩니다.",
	"c_cpp.configuration.vcFormat.space.withinExpressionParentheses.description": "괄호로 묶인 식의 여는 괄호 뒤와 닫는 괄호 앞에 공백이 추가됩니다.",
	"c_cpp.configuration.vcFormat.space.beforeBlockOpenBrace.description": "범위 블록의 여는 중괄호 앞에 공백이 추가됩니다.",
	"c_cpp.configuration.vcFormat.space.betweenEmptyBraces.description": "중괄호가 같은 줄에서 비어 있는 경우 중괄호 사이에 공백이 삽입됩니다.",
	"c_cpp.configuration.vcFormat.space.beforeInitializerListOpenBrace.description": "균일 초기화 및 이니셜라이저 목록의 여는 중괄호 앞에 공백이 추가됩니다.",
	"c_cpp.configuration.vcFormat.space.withinInitializerListBraces.description": "균일 초기화 및 이니셜라이저 목록의 여는 중괄호 뒤와 닫는 중괄호 앞에 공백이 추가됩니다.",
	"c_cpp.configuration.vcFormat.space.preserveInInitializerList.description": "균일 초기화 및 이니셜라이저 목록 내에서 쉼표 주위의 공백이 유지됩니다.",
	"c_cpp.configuration.vcFormat.space.beforeOpenSquareBracket.description": "여는 대괄호 앞에 공백을 추가합니다.",
	"c_cpp.configuration.vcFormat.space.withinSquareBrackets.description": "여는 대괄호 뒤와 닫는 대괄호 앞에 공백을 추가합니다.",
	"c_cpp.configuration.vcFormat.space.beforeEmptySquareBrackets.description": "대괄호가 비어 있는 경우 여는 대괄호 앞에 공백을 추가합니다.",
	"c_cpp.configuration.vcFormat.space.betweenEmptySquareBrackets.description": "대괄호가 비어 있으면 대괄호 사이에 공백을 삽입합니다.",
	"c_cpp.configuration.vcFormat.space.groupSquareBrackets.description": "다차원 배열의 경우 대괄호 사이의 공백을 모두 제거합니다. 공백을 제어하는 기타 설정은 무시됩니다.",
	"c_cpp.configuration.vcFormat.space.withinLambdaBrackets.description": "여는 대괄호 뒤와 닫는 대괄호 앞에 공백을 추가합니다.",
	"c_cpp.configuration.vcFormat.space.betweenEmptyLambdaBrackets.description": "대괄호가 비어 있으면 대괄호 사이에 공백을 삽입합니다.",
	"c_cpp.configuration.vcFormat.space.beforeComma.description": "모든 쉽표 앞에 공백을 추가합니다.",
	"c_cpp.configuration.vcFormat.space.afterComma.description": "모든 쉽표 뒤에 공백을 추가합니다.",
	"c_cpp.configuration.vcFormat.space.removeAroundMemberOperators.description": "멤버 액세스 연산자, 멤버 포인터 연산자 및 범위 확인 연산자 주위의 공백이 제거됩니다.",
	"c_cpp.configuration.vcFormat.space.beforeInheritanceColon.description": "클래스 정의에서 상속된 형식의 콜론 앞에 공백이 추가됩니다.",
	"c_cpp.configuration.vcFormat.space.beforeConstructorColon.description": "생성자 정의에서 콜론 앞에 공백이 추가됩니다.",
	"c_cpp.configuration.vcFormat.space.removeBeforeSemicolon.description": "모든 세미콜론 앞의 공백을 제거합니다.",
	"c_cpp.configuration.vcFormat.space.insertAfterSemicolon.description": "모든 세미콜론 뒤에 공백이 삽입됩니다.",
	"c_cpp.configuration.vcFormat.space.removeAroundUnaryOperator.description": "단항 연산자와 피연산자 사이의 공백을 제거합니다.",
	"c_cpp.configuration.vcFormat.space.aroundBinaryOperator.description": "이항 연산자 주위의 공백",
	"c_cpp.configuration.vcFormat.space.aroundAssignmentOperator.description": "할당 연산자 주위의 공백",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.description": "포인터 및 참조 연산자 주위의 공백",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.left.description": "포인터 및 참조 연산자를 왼쪽에 맞춥니다.",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.center.description": "포인터 및 참조 연산자를 가운데에 맞춥니다.",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.right.description": "포인터 및 참조 연산자를 오른쪽에 맞춥니다.",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.ignore.description": "포인터 및 참조 연산자에 서식이 지정되지 않습니다.",
	"c_cpp.configuration.vcFormat.space.aroundTernaryOperator.description": "조건 연산자 주위의 공백",
	"c_cpp.configuration.vcFormat.space.aroundOperators.insert.description": "연산자 앞뒤에 공백을 추가합니다.",
	"c_cpp.configuration.vcFormat.space.aroundOperators.remove.description": "연산자 앞뒤의 공백을 제거합니다.",
	"c_cpp.configuration.vcFormat.space.aroundOperators.ignore.description": "공백을 입력한 대로 둡니다.",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.description": "블록에 대한 래핑 옵션",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.oneLiners.markdownDescription": "모든 `C_Cpp.vcFormat.newLine.*` 설정의 값에 관계없이 한 줄에 입력된 전체 코드 블록이 한 줄에 유지됩니다.",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.allOneLineScopes.markdownDescription": "모든 `C_Cpp.vcFormat.newLine.*` 설정의 값에 관계없이 여는 중괄호와 닫는 중괄호가 입력된 모든 코드가 한 줄에 유지됩니다.",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.never.markdownDescription": "코드 블록은 항상 `C_Cpp.vcFormat.newLine.*` 설정의 값에 따라 서식이 지정됩니다.",
	"c_cpp.configuration.clang_format_path.markdownDescription": "`clang-format` 실행 파일의 전체 경로입니다. 지정하지 않은 경우 `clang-format`을 환경 경로에서 사용할 수 있으면 해당 실행 파일이 사용됩니다. 환경 경로에 없는 경우에는 확장과 함께 제공된 `clang-format`이 사용됩니다.",
	"c_cpp.configuration.clang_format_style.markdownDescription": "코딩 스타일은 현재 `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`을 지원합니다. `file`을 사용하여 현재 또는 상위 디렉터리의 `.clang-format` 파일에서 스타일을 로드하거나 `file:<경로>/.clang-format`을 사용하여 특정 경로를 참조하세요. `{키: 값, ...}`을 사용하여 특정 매개 변수를 설정합니다. 예를 들어 `Visual Studio` 스타일은 `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`와 유사합니다.",
	"c_cpp.configuration.clang_format_fallbackStyle.markdownDescription": "`clang-format`이 `file` 스타일을 사용하여 호출되지만 `clang-format` 파일을 찾을 수 없는 경우 대체로 사용되는 미리 정의된 스타일의 이름입니다. 가능한 값은 `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`, `none`이거나 `{key: value, ...}`를 사용하여 특정 매개 변수를 설정합니다. 예를 들어 `Visual Studio` 스타일은 `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`와 유사합니다.",
	"c_cpp.configuration.clang_format_sortIncludes.markdownDescription": "설정되는 경우 `SortIncludes` 매개 변수로 결정된 포함 정렬 동작을 재정의합니다.",
	"c_cpp.configuration.intelliSenseEngine.description": "IntelliSense 공급자를 제어합니다.",
	"c_cpp.configuration.intelliSenseEngine.default.description": "별도의 IntelliSense 프로세스를 통해 컨텍스트 인식 결과를 제공합니다.",
	"c_cpp.configuration.intelliSenseEngine.tagParser.description": "\"유사\" 결과를 제공합니다. 컨텍스트를 인식하지 않는 결과입니다.",
	"c_cpp.configuration.intelliSenseEngine.disabled.description": "C/C++ 언어 서비스 기능을 해제합니다.",
	"c_cpp.configuration.autocomplete.markdownDescription": "자동 완성 공급자를 제어합니다. `disabled`에서 단어 기반 완성을 원할 경우 `\"[cpp]\": {\"editor.wordBasedSuggestions\": <value>}`를 설정해야 합니다(`c`와 `cuda-cpp` 언어도 동일).",
	"c_cpp.configuration.autocomplete.default.description": "활성 IntelliSense 엔진을 사용합니다.",
	"c_cpp.configuration.autocomplete.disabled.description": "Visual Studio Code에서 제공하는 단어 기반 완성을 사용합니다.",
	"c_cpp.configuration.errorSquiggles.description": "IntelliSense 엔진에서 감지한 의심스러운 컴파일 오류를 편집기에 다시 보고할지 여부를 제어합니다. 또한 포함 사항을 찾을 수 없는 경우 코드 분석 경고가 보고되는지 여부를 제어합니다. 이 설정은 태그 파서 엔진에서 무시됩니다.",
	"c_cpp.configuration.dimInactiveRegions.description": "비활성 전처리기 블록의 색이 활성 코드와 다르게 지정되는지 여부를 제어합니다. 이 설정은 기본 고대비 테마를 사용하거나 IntelliSense가 사용하지 않도록 설정된 경우에는 영향을 주지 않습니다.",
	"c_cpp.configuration.inactiveRegionOpacity.markdownDescription": "비활성 전처리기 블록의 불투명도를 제어합니다. `0.1`에서 `1.0` 사이에서 크기를 조정합니다. 이 설정은 비활성 영역 흐리게 표시가 사용하도록 설정된 경우에만 적용됩니다.",
	"c_cpp.configuration.inactiveRegionForegroundColor.description": "비활성 전처리기 블록의 글꼴 색 지정을 제어합니다. 입력은 16진수 색 코드 또는 유효한 테마 색의 형식입니다. 설정하지 않으면 기본적으로 편집기의 구문 색 구성표로 설정됩니다. 이 설정은 비활성 영역 흐리게 표시가 사용하도록 설정된 경우에만 적용됩니다.",
	"c_cpp.configuration.inactiveRegionBackgroundColor.description": "비활성 전처리기 블록의 배경색 지정을 제어합니다. 입력은 16진수 색 코드 또는 유효한 테마 색의 형식입니다. 설정하지 않으면 기본적으로 투명으로 설정됩니다. 이 설정은 비활성 영역 흐리게 표시가 사용하도록 설정된 경우에만 적용됩니다.",
	"c_cpp.configuration.inlayHints.autoDeclarationTypes.enabled.markdownDescription": "선언에서 `auto`가 사용될 때 추론된 유형에 대한 인레이 힌트 표시:\n```cpp \n\n auto index /* : int */ = 0;\n```",
	"c_cpp.configuration.inlayHints.autoDeclarationTypes.showOnLeft.markdownDescription": "식별자의 왼쪽에 있는 선언에서 `auto`가 사용될 때 추론된 유형에 대한 인레이 힌트 표시:\n```cpp \n\n auto /* int */ index = 0;\n```",
	"c_cpp.configuration.inlayHints.parameterNames.enabled.markdownDescription": "매개 변수 이름에 대한 인레이 힌트 표시:\n```cpp \n\n int a = getArea(/* width: */ x, /* height: */ y);\n```",
	"c_cpp.configuration.inlayHints.parameterNames.hideLeadingUnderscores.markdownDescription": "매개 변수 이름 힌트에서 선행 `_`를 숨깁니다.",
	"c_cpp.configuration.inlayHints.parameterNames.suppressWhenArgumentContainsName.markdownDescription": "인수 텍스트 또는 인라인 주석에 매개 변수 이름이 포함된 경우 매개 변수 이름 힌트 표시 안 함:\n```cpp \n\n int a = getArea(width, /* height: */ y);\n```",
	"c_cpp.configuration.inlayHints.referenceOperator.enabled.markdownDescription": "비 const 참조에 의해 전달된 매개 변수에 대한 인레이 힌트 참조 연산자 `&` 표시:\n```cpp \n\n swap(/* &first: */ str1, /* &last: */ str2);\n```",
	"c_cpp.configuration.inlayHints.referenceOperator.showSpace.markdownDescription": "const가 아닌 참조로 전달된 매개 변수에 대해 `&` 뒤에 공백이 표시되는지 여부를 제어합니다.\n```cpp \n\n swap(/* & first: */ str1, /* & last: */ str2);\n```",
	"c_cpp.configuration.loggingLevel.markdownDescription": "출력 패널에서 로깅의 세부 정보 표시 수준입니다. 가장 낮은 표시 수준에서 가장 높은 표시 수준의 순서는 `None` < `Error` < `Warning` < `Information` < `Debug`입니다.",
	"c_cpp.configuration.autoAddFileAssociations.markdownDescription": "파일이 C/C++ 파일의 탐색 작업의 대상인 경우 `#files.associations#`에 자동으로 추가되는지 여부를 제어합니다.",
	"c_cpp.configuration.workspaceParsingPriority.markdownDescription": "비활성 작업 영역 파일의 구문 분석에서 100%의 CPU 사용률을 피하기 위해 일시 정지 모드를 사용하는지 여부를 제어합니다. `highest`/`high`/`medium`/`low` 값은 대략 100/75/50/25%의 CPU 사용률에 해당합니다.",
	"c_cpp.configuration.workspaceSymbols.description": "'작업 영역에서 기호로 이동'이 호출될 때 쿼리 결과에 포함할 기호입니다.",
	"c_cpp.configuration.exclusionPolicy.markdownDescription": "`browse.path` 배열의 경로를 통과하는 동안 코드 탐색 데이터베이스에 추가할 파일을 결정할 때 `#files.exclude#`(및 `#C_Cpp.files.exclude#`) 설정을 사용할 시기를 확장에 지시합니다. `#files.exclude#` 설정에 폴더만 포함되어 있는 경우 `checkFolders`가 가장 좋은 선택이며 확장이 코드 탐색 데이터베이스를 초기화하는 속도를 향상시킵니다.",
	"c_cpp.configuration.exclusionPolicy.checkFolders.description": "제외 필터는 폴더당 한 번만 평가됩니다(개별 파일은 검사되지 않음).",
	"c_cpp.configuration.exclusionPolicy.checkFilesAndFolders.description": "제외 필터는 발생한 모든 파일 및 폴더에 대해 평가됩니다.",
	"c_cpp.configuration.preferredPathSeparator.markdownDescription": "`#include` 자동 완성 결과의 경로 구분 기호로 사용되는 문자입니다.",
	"c_cpp.configuration.simplifyStructuredComments.markdownDescription": "`true`인 경우 가리키기 및 자동 완성 도구 설명에 구조적 주석의 특정 레이블만 표시됩니다. 그렇지 않으면 모든 주석이 표시됩니다.",
	"c_cpp.configuration.doxygen.generateOnType.description": "선택한 주석 스타일을 입력한 후 Doxygen 주석을 자동으로 삽입할지 여부를 제어합니다.",
	"c_cpp.configuration.doxygen.generatedStyle.description": "Doxygen 주석의 시작 줄로 사용되는 문자 문자열입니다.",
	"c_cpp.configuration.doxygen.sectionTags.description": "'구조적 설명 단순화' 설정이 활성화된 경우 도구 설명 영역에서 마우스를 가져가면 표시할 Doxygen 섹션 태그를 선택합니다. ",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.string.markdownDescription": "여러 줄 또는 한 줄 주석 블록을 시작하는 패턴입니다. 기본적으로 여러 줄 주석 블록의 계속 패턴은 ` * `로 설정되고, 한 줄 주석 블록의 경우 이 문자열로 설정됩니다.",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.begin.description": "여러 줄 또는 한 줄 주석 블록을 시작하는 패턴입니다.",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.continue.description": "여러 줄 또는 한 줄 주석 블록 내부에서 <Enter> 키를 누를 때 다음 줄에 삽입할 텍스트입니다.",
	"c_cpp.configuration.commentContinuationPatterns.description": "여러 줄 또는 한 줄 주석 블록 내에서 <Enter> 키를 누를 때 사용할 편집기 동작을 정의합니다.",
	"c_cpp.configuration.configurationWarnings.description": "구성 공급자 확장이 소스 파일의 구성을 제공할 수 없는 경우 팝업 알림을 표시할지 여부를 결정합니다.",
	"c_cpp.configuration.intelliSenseCachePath.markdownDescription": "IntelliSense에서 사용하는 캐시되고 미리 컴파일된 헤더의 폴더 경로를 정의합니다. 기본 캐시 경로는 Windows의 `%LocalAppData%/Microsoft/vscode-cpptools`, Linux의 `$XDG_CACHE_HOME/vscode-cpptools/`(또는 `XDG_CACHE_HOME`이 정의되지 않은 경우 `$HOME/.cache/vscode-cpptools/`), macOS의 `$HOME/Library/Caches/vscode-cpptools/`입니다. 경로를 지정하지 않거나 지정한 경로가 잘못된 경우 기본 경로를 사용합니다.",
	"c_cpp.configuration.intelliSenseCacheSize.markdownDescription": "캐시된 미리 컴파일된 헤더에 대한 작업 영역당 하드 드라이브 공간의 최대 크기(MB)입니다. 실제 사용량은 이 값을 기준으로 변동될 수 있습니다. 기본 크기는 `5120`MB입니다. 크기가 `0`이면 미리 컴파일된 헤더 캐싱이 사용하지 않도록 설정됩니다.",
	"c_cpp.configuration.intelliSenseMemoryLimit.markdownDescription": "IntelliSense 프로세스의 메모리 사용량 제한(MB)입니다. 기본은 `4096`이며 최대 제한은 `16384`입니다. 확장은 IntelliSense 프로세스가 제한을 초과하면 해당 프로세스를 종료했다가 다시 시작합니다.",
	"c_cpp.configuration.intelliSenseUpdateDelay.description": "수정 후에 IntelliSense에서 업데이트를 시작하기 전까지의 지연 시간(밀리초)을 제어합니다.",
	"c_cpp.configuration.default.includePath.markdownDescription": "`includePath`가 `c_cpp_properties.json`에 지정되지 않은 경우 구성에 사용할 값입니다. `includePath`가 지정된 경우 배열에 `${default}`를 추가하여 이 설정의 값을 삽입합니다. 일반적으로 시스템에는 다음이 포함되지 않아야 합니다. 대신 `#C_Cpp.default.compilerPath#`를 설정하세요.",
	"c_cpp.configuration.default.defines.markdownDescription": "`defines`가 지정되지 않은 경우 구성에서 사용할 값 또는 `${default}`가 `defines`에 있는 경우 삽입할 값입니다.",
	"c_cpp.configuration.default.macFrameworkPath.markdownDescription": "`macFrameworkPath`가 지정되지 않은 경우 구성에서 사용할 값 또는 `${default}`가 `macFrameworkPath`에 있는 경우 삽입할 값입니다.",
	"c_cpp.configuration.default.windowsSdkVersion.markdownDescription": "Windows에서 사용할 Windows SDK 포함 경로의 버전입니다(예: `10.0.17134.0`).",
	"c_cpp.configuration.default.compileCommands.markdownDescription": "`compileCommands`가 지정되지 않거나 `${default}`로 설정된 경우 구성에서 사용할 값입니다.",
	"c_cpp.configuration.default.forcedInclude.markdownDescription": "`forcedInclude`가 지정되지 않은 경우 구성에서 사용할 값 또는 `${default}`가 `forcedInclude`에 있는 경우 삽입할 값입니다.",
	"c_cpp.configuration.default.intelliSenseMode.markdownDescription": "`intelliSenseMode`가 지정되지 않거나 `${default}`로 설정된 경우 구성에서 사용할 값입니다.",
	"c_cpp.configuration.default.compilerPath.markdownDescription": "`compilerPath`가 지정되지 않거나 `${default}`로 설정된 경우 구성에서 사용할 값입니다.",
	"c_cpp.configuration.default.compilerArgs.markdownDescription": "`compilerArgs`가 지정되지 않거나 `${default}`로 설정된 경우 구성에서 사용할 값입니다.",
	"c_cpp.configuration.default.cStandard.markdownDescription": "`cStandard`가 지정되지 않거나 `${default}`로 설정된 경우 구성에서 사용할 값입니다.",
	"c_cpp.configuration.default.cppStandard.markdownDescription": "`cppStandard`가 지정되지 않거나 `${default}`로 설정된 경우 구성에서 사용할 값입니다.",
	"c_cpp.configuration.default.configurationProvider.markdownDescription": "`configurationProvider`가 지정되지 않거나 `${default}`로 설정된 경우 구성에서 사용할 값입니다.",
	"c_cpp.configuration.default.mergeConfigurations.markdownDescription": "포함 경로, 정의 및 강제 포함을 구성 공급자의 해당 항목과 병합하려면 `true`로 설정합니다.",
	"c_cpp.configuration.default.browse.path.markdownDescription": "`browse.path`가 지정되지 않은 경우 구성에서 사용할 값 또는 `${default}`가 `browse.path`에 있는 경우 삽입할 값입니다.",
	"c_cpp.configuration.default.browse.databaseFilename.markdownDescription": "`browse.databaseFilename`이 지정되지 않거나 `${default}`로 설정된 경우 구성에서 사용할 값입니다.",
	"c_cpp.configuration.default.browse.limitSymbolsToIncludedHeaders.markdownDescription": "`browse.limitSymbolsToIncludedHeaders`가 지정되지 않거나 `${default}`로 설정된 경우 구성에서 사용할 값입니다.",
	"c_cpp.configuration.default.systemIncludePath.markdownDescription": "시스템 포함 경로에 사용할 값입니다. 설정하는 경우 `compilerPath` 및 `compileCommands` 설정을 통해 얻은 시스템 포함 경로를 재정의합니다.",
	"c_cpp.configuration.default.enableConfigurationSquiggles.markdownDescription": "확장이 `c_cpp_properties.json`에서 검색된 오류를 보고하도록 할지를 제어합니다.",
	"c_cpp.configuration.default.customConfigurationVariables.markdownDescription": "`customConfigurationVariables`가 설정되지 않은 경우 구성에서 사용할 값 또는 `${default}`가 `customConfigurationVariables`에 키로 존재하는 경우 삽입할 값입니다.",
	"c_cpp.configuration.updateChannel.markdownDescription": "예정된 기능과 버그 수정을 포함하는 확장의 최신 참가자 빌드를 자동으로 다운로드하여 설치하려면 `Insiders`로 설정합니다.",
	"c_cpp.configuration.updateChannel.deprecationMessage": "이 설정은 사용되지 않습니다. 이제 Marketplace를 통해 시험판 확장을 사용할 수 있습니다.",
	"c_cpp.configuration.default.dotConfig.markdownDescription": "`dotConfig`가 지정되지 않은 경우 구성에서 사용할 값 또는 `${default}`가 `dotConfig`에 있는 경우 삽입할 값입니다.",
	"c_cpp.configuration.experimentalFeatures.description": "\"실험적\" 기능을 사용할 수 있는지 여부를 제어합니다.",
	"c_cpp.configuration.suggestSnippets.markdownDescription": "`true`이면 언어 서버에서 코드 조각을 제공합니다.",
	"c_cpp.configuration.caseSensitiveFileSupport.markdownDescription": "`default`로 설정하면 작업 공간의 파일 시스템이 Windows에서는 대소문자를 구분하지 않고 macOS 또는 Linux에서는 대소문자를 구분하는 것으로 간주됩니다. `enabled`로 설정하면 작업 영역의 파일 시스템이 Windows에서 대소문자를 구분하는 것으로 간주됩니다.",
	"c_cpp.configuration.enhancedColorization.markdownDescription": "사용하도록 설정된 경우 IntelliSense를 기반으로 코드 색이 지정됩니다. `#C_Cpp.intelliSenseEngine#`이 `default`로 설정된 경우에만 이 설정이 적용됩니다.",
	"c_cpp.configuration.codeFolding.description": "사용하도록 설정하면 언어 서버에서 코드 접기 범위를 제공합니다.",
	"c_cpp.configuration.markdownInComments.description": "가리키기 도구 설명에서 Markdown을 사용할 수 있는지 여부를 선택합니다. 기본값으로, Markdown의 하위 집합만 가리키기 도구 설명의 주석에 적용됩니다.",
	"c_cpp.configuration.markdownInComments.subsetEnabled.description": "가리키기 도구 설명에서 '_' 및 '*' 문자를 포함하는 기능을 제외한 모든 Markdown 기능을 활성화합니다.",
	"c_cpp.configuration.markdownInComments.enabled.description": "가리키기 도구 설명에서 모든 Markdown 기능을 활성화합니다.",
	"c_cpp.configuration.markdownInComments.disabled.description": "가리키기 도구 설명에서 모든 Markdown 기능을 비활성화합니다.",
	"c_cpp.configuration.hover.description": "사용하지 않도록 설정하면 언어 서버에서 마우스로 가리키기 세부 정보를 더 이상 제공하지 않습니다.",
	"c_cpp.configuration.vcpkg.enabled.markdownDescription": "[vcpkg 종속성 관리자](https://aka.ms/vcpkg/)에 대해 통합 서비스를 사용하도록 설정합니다.",
	"c_cpp.configuration.addNodeAddonIncludePaths.markdownDescription": "`nan` 및 `node-addon-api`가 종속성일 때 해당 포함 경로를 추가합니다.",
	"c_cpp.configuration.renameRequiresIdentifier.markdownDescription": "`true`이면 '기호 이름 바꾸기'에 유효한 C/C++ 식별자가 필요합니다.",
	"c_cpp.configuration.autocompleteAddParentheses.markdownDescription": "`true`이면 자동 완성에서 `#editor.autoClosingBrackets#` 설정 값에 따라 함수 호출 뒤에 `(`를 자동으로 추가하며, 이 경우 `)`도 추가될 수 있습니다.",
	"c_cpp.configuration.filesExclude.markdownDescription": "폴더를 제외하기 위한 glob 패턴을 구성합니다(`#C_Cpp.exclusionPolicy#`가 변경된 경우 파일도). 이는 C/C++ 확장에만 해당하며 `#files.exclude#`와 더불어 사용되지만 `#files.exclude#`와 달리 현재 작업 영역 폴더 외부의 경로에도 적용되며 탐색기 보기에서 제거되지 않습니다. [glob 패턴](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options)에 대해 자세히 알아보세요.",
	"c_cpp.configuration.filesExcludeBoolean.markdownDescription": "파일 경로를 일치시킬 GLOB 패턴입니다. 패턴을 사용하거나 사용하지 않도록 설정하려면 `true` 또는 `false`로 설정하세요.",
	"c_cpp.configuration.filesExcludeWhen.markdownDescription": "일치하는 파일의 형제에 대한 추가 검사입니다. `$(basename)`을 일치하는 파일 이름에 대한 변수로 사용하세요.",
	"c_cpp.configuration.debugger.useBacktickCommandSubstitution.markdownDescription": "`true`인 경우 디버거 셸 명령 대체가 사용되지 않는 백틱``(`)``을 사용합니다.",
	"c_cpp.configuration.legacyCompilerArgsBehavior.markdownDescription": "컴파일러 인수 설정에서 쉘 이스케이프가 처리되는 방식에 대해 v1.10.0 이전 동작을 활성화합니다. 셸 이스케이프는 v1.10.0부터 arg 배열에서 더 이상 기본적으로 예상되거나 지원되지 않습니다.",
	"c_cpp.configuration.legacyCompilerArgsBehavior.deprecationMessage": "이 설정은 v1.10.0에서 수정된 동작으로의 전환을 지원하기 위해 일시적입니다.",
	"c_cpp.configuration.sshTargetsView.description": "SSH 대상 뷰가 표시되는지 여부를 제어합니다. 기본적으로 SSH 명령이 호출될 때 보기를 사용하도록 설정합니다.",
	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: 기타 참조 결과",
	"c_cpp.contributes.views.sshTargetsView.title": "Cpptools: SSH 대상",
	"c_cpp.contributes.viewsWelcome.contents": "launch.json에 대한 자세한 내용은 [C/C++ 디버깅 구성](https://code.visualstudio.com/docs/cpp/launch-json-reference)을 참조하세요.",
	"c_cpp.configuration.debugShortcut.description": "C++ 파일의 편집기 제목 표시줄에 \"실행 및 디버그\" 재생 버튼과 \"디버그 구성 추가\" 기어를 표시합니다.",
	"c_cpp.debuggers.pipeTransport.description": "있을 경우 VS Code와 MI 지원 디버거 백 엔드 실행 파일(예: gdb) 사이에 표준 입출력을 릴레이하는 파이프로 다른 실행 파일을 사용하여 원격 컴퓨터에 연결되도록 디버거를 지정합니다.",
	"c_cpp.debuggers.pipeTransport.default.pipeProgram": "파이프 프로그램 이름의 정규화된 경로 입력(예: '/usr/bin/ssh')",
	"c_cpp.debuggers.pipeTransport.default.debuggerPath": "대상 컴퓨터에서 디버거의 전체 경로(예: /usr/bin/gdb)입니다.",
	"c_cpp.debuggers.pipeTransport.debuggerPath.description": "대상 컴퓨터에서 디버거의 전체 경로(예: /usr/bin/gdb)입니다.",
	"c_cpp.debuggers.pipeTransport.pipeCwd.description": "파이프 프로그램의 작업 디렉터리에 대한 정규화된 경로입니다.",
	"c_cpp.debuggers.pipeTransport.pipeProgram.description": "실행할 정규화된 파이프 명령입니다.",
	"c_cpp.debuggers.pipeTransport.pipeArgs.description": "연결을 구성하기 위해 파이프 프로그램에 전달되는 명령줄 인수입니다.",
	"c_cpp.debuggers.pipeTransport.pipeEnv.description": "파이프 프로그램에 전달되는 환경 변수입니다.",
	"c_cpp.debuggers.pipeTransport.quoteArgs.description": "pipeProgram의 개별 인수가 문자(예: 공백 또는 탭)를 포함하는 경우 따옴표를 붙여야 하나요? 'false'인 경우 디버거 명령은 더 이상 자동으로 따옴표를 붙이지 않습니다. 기본값은 'true'입니다.",
	"c_cpp.debuggers.logging.description": "메시지 유형을 디버그 콘솔에 기록할지 여부를 결정하는 선택적 플래그입니다.",
	"c_cpp.debuggers.logging.exceptions.description": "예외 메시지를 디버그 콘솔에 기록할지 여부를 결정하는 선택적 플래그입니다. 기본값은 true입니다.",
	"c_cpp.debuggers.logging.moduleLoad.description": "모듈 로드 이벤트를 디버그 콘솔에 기록할지 여부를 결정하는 선택적 플래그입니다. 기본값은 true입니다.",
	"c_cpp.debuggers.logging.programOutput.description": "프로그램 출력을 디버그 콘솔에 기록할지 여부를 결정하는 선택적 플래그입니다. 기본값은 true입니다.",
	"c_cpp.debuggers.logging.engineLogging.description": "진단 디버그 엔진 메시지를 디버그 콘솔에 기록할지 여부를 결정하는 선택적 플래그입니다. 기본값은 false입니다.",
	"c_cpp.debuggers.logging.trace.description": "진단 어댑터 명령 추적을 디버그 콘솔에 기록할지 여부를 결정하는 선택적 플래그입니다. 기본값은 false입니다.",
	"c_cpp.debuggers.logging.traceResponse.description": "진단 어댑터 명령 및 응답 추적을 디버그 콘솔에 기록할지 여부를 결정하는 선택적 플래그입니다. 기본값은 false입니다.",
	"c_cpp.debuggers.cppvsdbg.logging.threadExit.description": "스레드 종료 메시지를 디버그 콘솔에 기록할지를 결정하는 선택적 플래그입니다. 기본값: false.",
	"c_cpp.debuggers.cppvsdbg.logging.processExit.description": "대상 프로세스 종료 메시지를 디버그 콘솔에 기록할지를 결정하는 선택적 플래그입니다. 기본값: true.",
	"c_cpp.debuggers.text.description": "실행할 디버거 명령입니다.",
	"c_cpp.debuggers.description.description": "명령에 대한 선택적 설명입니다.",
	"c_cpp.debuggers.ignoreFailures.description": "True이면 명령 실패가 무시됩니다. 기본값은 false입니다.",
	"c_cpp.debuggers.program.description": "프로그램 실행 파일의 전체 경로입니다.",
	"c_cpp.debuggers.args.description": "프로그램에 전달된 명령줄 인수입니다.",
	"c_cpp.debuggers.cppdbg.type.description": "엔진 유형입니다. \"cppdbg\"여야 합니다.",
	"c_cpp.debuggers.cppvsdbg.type.description": "엔진 유형입니다. \"cppvsdbg\"여야 합니다.",
	"c_cpp.debuggers.targetArchitecture.description": "디버기의 아키텍처입니다. 이 매개 변수를 설정하지 않는 경우 자동으로 검색됩니다. 허용되는 값은 x86, arm, arm64, mips, x64, amd64, x86_64입니다.",
	"c_cpp.debuggers.cwd.description": "대상의 작업 디렉터리입니다.",
	"c_cpp.debuggers.setupCommands.description": "기본 디버거를 설정하기 위해 실행할 하나 이상의 GDB/LLDB 명령입니다. 예: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].",
	"c_cpp.debuggers.postRemoteConnectCommands.description": "디버그 서버에 대한 원격 연결 후 실행되는 하나 이상의 명령입니다.",
	"c_cpp.debuggers.customLaunchSetupCommands.description": "이 항목이 제공되는 경우 대상을 시작하는 데 사용되는 기본 명령은 다른 명령으로 바뀌게 됩니다. 예를 들어 대상 프로세스에 연결하려면 \"-target-attach\"를 사용할 수 있습니다. 빈 명령 목록은 시작 명령을 바꾸지 않으며, 이는 디버거의 시작 옵션이 명령줄 옵션으로 제공되는 경우 유용할 수 있습니다. 예: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].",
	"c_cpp.debuggers.launchCompleteCommand.description": "대상 프로세스가 실행되도록 디버거가 완전히 설정된 후 실행할 명령입니다. 허용되는 값은 \"exec-run\", \"exec-continue\", \"None\"입니다. 기본값은 \"exec-run\"입니다.",
	"c_cpp.debuggers.cppdbg.visualizerFile.description": "이 프로세스를 디버그할 때 사용할 .natvis 파일입니다. 이 옵션은 GDB 자동 서식 지정과 호환되지 않습니다. 이 설정을 사용하는 경우 \"showDisplayString\"을 참조하세요.",
	"c_cpp.debuggers.cppdbg.svdPath.description": "포함된 장치의 SVD 파일에 대한 전체 경로입니다.",
	"c_cpp.debuggers.cppvsdbg.visualizerFile.description": "이 프로세스를 디버그할 때 사용할 .natvis 파일입니다.",
	"c_cpp.debuggers.showDisplayString.description": "visualizerFile을 지정하면 showDisplayString은 표시 문자열을 사용하도록 설정합니다. 이 옵션을 켜면 디버그하는 동안 성능이 저하될 수 있습니다.",
	"c_cpp.debuggers.environment.description": "프로그램의 환경에 추가할 환경 변수입니다. 예: [ { \"name\": \"config\", \"value\": \"Debug\" } ], not [ { \"config\": \"Debug\" } ].",
	"c_cpp.debuggers.envFile.description": "환경 변수 정의를 포함하는 파일의 절대 경로입니다. 이 파일에는 줄마다 등호로 구분된 키 값 쌍이 있습니다(예: 키=값).",
	"c_cpp.debuggers.additionalSOLibSearchPath.description": ".so 파일 검색에 사용할 디렉터리의 세미콜론으로 구분된 목록입니다(예: \"c:\\dir1;c:\\dir2\").",
	"c_cpp.debuggers.MIMode.description": "MIDebugEngine이 연결할 콘솔 디버거를 나타냅니다. 허용되는 값은 \"gdb\" \"lldb\"입니다.",
	"c_cpp.debuggers.miDebuggerPath.description": "MI 디버거(예: gdb)의 경로입니다. 지정되지 않은 디버거 확장은 먼저 경로에서 디버거를 검색합니다.",
	"c_cpp.debuggers.miDebuggerArgs.description": "MI 디버거(예: gdb)의 추가 인수입니다.",
	"c_cpp.debuggers.miDebuggerServerAddress.description": "연결할 MI 디버거 서버의 네트워크 주소입니다(예: localhost:1234).",
	"c_cpp.debuggers.useExtendedRemote.description": "대상 확장 원격 모드를 사용하여 MI 디버거 서버에 연결합니다.",
	"c_cpp.debuggers.stopAtEntry.description": "선택적 매개 변수입니다. True이면 디버거가 대상의 진입점에서 중지됩니다. processId가 전달되는 경우 영향을 주지 않습니다.",
	"c_cpp.debuggers.debugServerPath.description": "시작할 디버그 서버의 전체 경로입니다(선택 사항). 기본값은 null입니다. 이 옵션은 \"miDebugServerAddress\"와 함께 사용되거나 \"-target-select remote <server:port>\"를 실행하는 \"customSetupCommand\"와 자체 서버와 함께 사용됩니다.",
	"c_cpp.debuggers.debugServerArgs.description": "선택적 디버그 서버 인수입니다. 기본값은 null입니다.",
	"c_cpp.debuggers.serverStarted.description": "디버그 서버 출력에서 찾을 서버에서 시작한 패턴(선택 사항)입니다. 기본값은 null입니다.",
	"c_cpp.debuggers.filterStdout.description": "서버에서 시작한 패턴을 stdout 스트림에서 검색하고, stdout를 디버그 출력에 기록합니다. 기본값은 true입니다.",
	"c_cpp.debuggers.filterStderr.description": "서버에서 시작한 패턴을 stderr 스트림에서 검색하고, stderr을 디버그 출력에 기록합니다. 기본값은 false입니다.",
	"c_cpp.debuggers.serverLaunchTimeout.description": "debugServer가 시작될 때까지 디버거가 대기할 선택적 시간(밀리초)입니다. 기본값은 10000입니다.",
	"c_cpp.debuggers.coreDumpPath.description": "지정된 프로그램에 대한 코어 덤프 파일의 선택적 전체 경로입니다. 기본값은 null입니다.",
	"c_cpp.debuggers.cppdbg.externalConsole.description": "True이면 콘솔이 디버기에 대해 시작됩니다. False이면 Linux 및 Windows에서 통합 콘솔에 표시됩니다.",
	"c_cpp.debuggers.cppvsdbg.externalConsole.description": "['콘솔'에서 사용되지 않음] true이면 콘솔이 디버기에 대해 시작됩니다. false이면 콘솔이 시작되지 않습니다.",
	"c_cpp.debuggers.cppvsdbg.console.description": "디버그 대상을 시작할 위치입니다. 정의되지 않은 경우 기본값인 'internalConsole'로 설정됩니다.",
	"c_cpp.debuggers.cppvsdbg.console.internalConsole.description": "VS Code 디버그 콘솔에 출력합니다. 콘솔 입력 읽기(예: 'std::cin' 또는 'scanf')는 지원되지 않습니다.",
	"c_cpp.debuggers.cppvsdbg.console.integratedTerminal.description": "VS Code의 통합 터미널",
	"c_cpp.debuggers.cppvsdbg.console.externalTerminal.description": "콘솔 애플리케이션이 외부 터미널 창에서 시작됩니다. 이 창은 다시 시작 시나리오에서 재사용되며, 애플리케이션이 종료될 때 자동으로 사라지지 않습니다.",
	"c_cpp.debuggers.cppvsdbg.console.newExternalWindow.description": "콘솔 애플리케이션은 애플리케이션이 중지될 때 종료되는 해당 외부 콘솔 창에서 시작됩니다. 콘솔이 아닌 애플리케이션은 터미널 없이 실행되며, stdout/stderr이 무시됩니다.",
	"c_cpp.debuggers.avoidWindowsConsoleRedirection.description": "True이면 통합 터미널 지원에 필요한 디버기 콘솔 리디렉션을 사용하지 않도록 설정합니다.",
	"c_cpp.debuggers.sourceFileMap.description": "디버그 엔진에 전달되는 선택적 소스 파일 매핑입니다(예: '{\"/original/source/path\": \"/original/source/path\"}').",
	"c_cpp.debuggers.processId.anyOf.description": "디버거를 연결할 선택적 프로세스 ID입니다. \"${command:pickProcess}\"를 사용하여 연결할 로컬 실행 프로세스 목록을 가져옵니다. 일부 플랫폼에서는 프로세스에 연결하기 위해 관리자 권한이 필요합니다.",
	"c_cpp.debuggers.symbolSearchPath.description": "기호(pdb) 파일 검색에 사용할 디렉터리의 세미콜론으로 구분된 목록입니다(예: \"c:\\dir1;c:\\dir2\").",
	"c_cpp.debuggers.dumpPath.description": "지정된 프로그램에 대한 코어 덤프 파일의 선택적 전체 경로입니다(예: \"c:\\temp\\app.dmp\"). 기본값은 null입니다.",
	"c_cpp.debuggers.enableDebugHeap.description": "False이면 디버그 힙이 사용하지 않도록 설정된 상태로 프로세스가 시작됩니다. 이렇게 하면 환경 변수 '_NO_DEBUG_HEAP'이 '1'로 설정됩니다.",
	"c_cpp.debuggers.symbolLoadInfo.description": "기호 로드를 명시적으로 제어합니다.",
	"c_cpp.debuggers.symbolLoadInfo.loadAll.description": "true이면 모든 라이브러리의 기호가 로드됩니다. true가 아니면 solib 기호가 로드되지 않습니다. 기본값은 true입니다.",
	"c_cpp.debuggers.symbolLoadInfo.exceptionList.description": "세미콜론 ';'으로 구분된 파일 이름(와일드카드 허용) 목록이며, LoadAll의 동작을 수정합니다. LoadAll이 true이면 목록에 있는 이름과 일치하는 라이브러리의 기호를 로드하지 않습니다. true가 아니면 일치하는 라이브러리의 기호만 로드합니다. 예: \"foo.so;bar.so\"",
	"c_cpp.debuggers.requireExactSource.description": "현재 소스 코드가 PDB와 일치하도록 하는 선택적 플래그입니다.",
	"c_cpp.debuggers.stopAtConnect.description": "true이면 대상에 연결된 후 디버거가 중지됩니다. false이면 연결 후 디버거가 계속됩니다. 기본값은 false입니다.",
	"c_cpp.debuggers.hardwareBreakpoints.description": "원격 대상에 대한 하드웨어 중단점 동작을 명시적으로 제어합니다.",
	"c_cpp.debuggers.hardwareBreakpoints.require.description": "true이면 항상 하드웨어 중단점을 사용합니다. 기본값은 false입니다.",
	"c_cpp.debuggers.hardwareBreakpoints.limit.description": "사용할 수 있는 하드웨어 중단점 수에 대한 선택적 제한입니다. \"require\"가 true이고 \"limit\"가 0보다 큰 경우에만 적용됩니다. 기본값은 0입니다.",
	"c_cpp.debuggers.variables.description": "이 시작 구성에서 재귀적 대체를 위한 변수입니다. 각 변수는 다른 변수를 참조할 수 있습니다.",
	"c_cpp.debuggers.variables.properties.description": "이 시작 구성에서 재귀 대체를 위한 변수입니다. 값은 다른 변수를 참조할 수 있습니다.",
	"c_cpp.debuggers.host.description": "호스트 정보.",
	"c_cpp.debuggers.host.user.description": "사용자가 호스트에 로그인합니다.",
	"c_cpp.debuggers.host.hostName.description": "호스트 이름.",
	"c_cpp.debuggers.host.port.description": "호스트의 SSH 포트. 기본값은 22입니다.",
	"c_cpp.debuggers.host.jumpHost.description": "먼저 점프 호스트에 연결하여 대상 호스트에 연결합니다.",
	"c_cpp.debuggers.host.localForward.description": "로컬(클라이언트) 호스트의 지정된 TCP 포트 또는 Unix 소켓에 대한 연결을 원격 측의 지정된 호스트 및 포트 또는 Unix 소켓으로 전달합니다.",
	"c_cpp.debuggers.host.localForward.bindAddress.description": "로컬 주소",
	"c_cpp.debuggers.host.localForward.port.description": "로컬 포트",
	"c_cpp.debuggers.host.localForward.host.description": "호스트 이름",
	"c_cpp.debuggers.host.localForward.hostPort.description": "호스트 포트",
	"c_cpp.debuggers.host.localForward.localSocket.description": "로컬 소켓",
	"c_cpp.debuggers.host.localForward.remoteSocket.description": "원격 소켓",
	"c_cpp.debuggers.deploySteps.description": "애플리케이션을 배포하는 데 필요한 단계입니다. 순서가 중요합니다.",
	"c_cpp.debuggers.deploySteps.copyFile.description": "SCP 또는 rsync를 사용하여 파일을 복사합니다.",
	"c_cpp.debuggers.deploySteps.copyFile.files.description": "복사할 파일입니다. 경로 패턴을 지원합니다.",
	"c_cpp.debuggers.deploySteps.copyFile.targetDir.description": "대상 디렉터리.",
	"c_cpp.debuggers.deploySteps.copyFile.recursive.description": "true이면 폴더를 재귀적으로 복사합니다.",
	"c_cpp.debuggers.deploySteps.copyFile.scpPath.description": "SCP에 대한 선택적 전체 경로입니다. 지정하지 않으면 SCP가 PATH에 있다고 가정합니다.",
	"c_cpp.debuggers.deploySteps.copyFile.rsyncPath.description": "rsync에 대한 선택적 전체 경로입니다. 지정하지 않은 경우 rsync가 PATH에 있다고 가정합니다.",
	"c_cpp.debuggers.deploySteps.debug": "true이면 디버깅하지 않고 시작할 때 건너뜁니다. false인 경우 디버깅을 시작할 때 건너뜁니다. 정의되지 않은 경우 건너뛰지 마세요.",
	"c_cpp.debuggers.deploySteps.ssh.description": "SSH 명령 단계.",
	"c_cpp.debuggers.deploySteps.ssh.command.description": "SSH를 통해 실행할 명령입니다. SSH 명령에서 '-c' 뒤에 오는 명령입니다.",
	"c_cpp.debuggers.deploySteps.ssh.sshPath.description": "SSH에 대한 선택적 전체 경로입니다. 지정되지 않은 경우 SSH가 PATH에 있다고 가정합니다.",
	"c_cpp.debuggers.deploySteps.continueOn.description": "출력의 선택적 마감 패턴입니다. 이 패턴이 출력에 표시되면 이 단계가 반환되는지 여부에 관계없이 배포 절차를 계속합니다.",
	"c_cpp.debuggers.deploySteps.shell.description": "셸 명령 단계.",
	"c_cpp.debuggers.deploySteps.shell.command.description": "실행할 셸 명령입니다.",
	"c_cpp.debuggers.vsCodeCommand.description": "호출할 VS 코드 명령입니다. VS Code 또는 활성 확장의 명령일 수 있습니다.",
	"c_cpp.debuggers.vsCodeCommand.command.description": "호출할 VS 코드 명령입니다.",
	"c_cpp.debuggers.vsCodeCommand.args.description": "VS Code 명령에 대한 인수입니다.",
	"c_cpp.taskDefinitions.name.description": "작업의 이름",
	"c_cpp.taskDefinitions.command.description": "컴파일을 수행하는 컴파일러 또는 스크립트의 경로",
	"c_cpp.taskDefinitions.args.description": "컴파일러 또는 컴파일 스크립트에 전달할 추가 인수",
	"c_cpp.taskDefinitions.args.value.description": "실제 인수 값입니다.",
	"c_cpp.taskDefinitions.args.quoting.description": "인수 값을 따옴표로 묶을 방법입니다.",
	"c_cpp.taskDefinitions.args.quoting.escape.description": "셸의 이스케이프 문자를 사용하여 문자를 이스케이프합니다(예: Bash에서 \\ 사용).",
	"c_cpp.taskDefinitions.args.quoting.strong.description": "셸의 강력한 따옴표 문자를 사용하여 인수를 따옴표 처리합니다(예: Bash에서 ' 사용).",
	"c_cpp.taskDefinitions.args.quoting.weak.description": "셸의 약한 따옴표 문자를 사용하여 인수를 따옴표 처리합니다(예: Bash에서 \" 사용).",
	"c_cpp.taskDefinitions.options.description": "추가 명령 옵션",
	"c_cpp.taskDefinitions.options.cwd.description": "실행된 프로그램 또는 스크립트의 현재 작업 디렉터리입니다. 생략된 경우 Code의 현재 작업 영역 루트가 사용됩니다.",
	"c_cpp.taskDefinitions.detail.description": "작업의 추가 세부 정보",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.description": "같은 소스 트리의 현재 및 컴파일 시간 경로입니다. EditorPath에 있는 파일은 중단점 일치를 위해 CompileTimePath 경로에 매핑되고 stacktrace 위치를 표시할 때 CompileTimePath에서 EditorPath로 매핑됩니다.",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.editorPath.description": "편집기가 사용할 소스 트리의 경로입니다.",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.useForBreakpoints.description": "이 항목이 스택 프레임 위치 매핑에만 사용되면 False입니다. 이 항목이 중단점 위치를 지정할 때도 사용되어야 하면 True입니다.",
	"c_cpp.debuggers.symbolOptions.description": "기호(.pdb 파일)를 찾아서 로드하는 방법을 제어하는 옵션입니다.",
	"c_cpp.debuggers.unknownBreakpointHandling.description": "적중 시 외부에서 설정되는 중단점이(일반적으로 원시 GDB 명령을 통해) 처리되는 방식을 제어합니다.\n허용 값은 애플리케이션에서 예외가 발생한 것처럼 동작하는 \"throw\"와 디버그 세션만 일시 중지하는 \"stop\"입니다. 기본값은 \"throw\"입니다.",
	"c_cpp.debuggers.VSSymbolOptions.description": "디버그 어댑터에 기호를 찾고 로드하기 위한 구성을 제공합니다.",
	"c_cpp.debuggers.VSSymbolOptions.searchPaths.description": ".pdb 파일을 검색하는 기호 서버 URL(예: http​://MyExampleSymbolServer) 또는 디렉터리(예: /build/symbols)의 배열입니다. 이러한 디렉터리가 모듈 및 pdb가 원래 삭제된 경로 옆에 있는 기본 위치 외에 검색됩니다.",
	"c_cpp.debuggers.VSSymbolOptions.searchMicrosoftSymbolServer.description": "'true'인 경우 Microsoft 기호 서버(https​://msdl.microsoft.com​/download/symbols)가 기호 검색 경로에 추가됩니다. 지정하지 않으면 이 옵션의 기본값은 'false'입니다.",
	"c_cpp.debuggers.VSSymbolOptions.cachePath.description": "기호 서버에서 다운로드한 기호를 캐시해야 하는 디렉터리입니다. 지정되지 않은 경우 Windows에서 디버거는 기본적으로 %TEMP%\\SymbolCache로 설정됩니다.",
	"c_cpp.debuggers.VSSymbolOptions.moduleFilter.description": "디버거에서 기호(.pdb 파일)를 로드하려고 시도할 모듈(.dll 파일)을 제어하는 옵션을 제공합니다.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.description": "디버그 어댑터에 기호를 로드하기 위한 구성을 제공합니다.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.description": "두 가지 기본 운영 모드 중 모듈 필터가 작동하는 모드를 제어합니다.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.loadAllButExcluded.enumDescriptions": "모듈이 'excludedModules' 배열에 있지 않으면 모든 모듈에 대한 기호를 로드합니다.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.loadOnlyIncluded.enumDescriptions": "'includedModules' 배열에 있거나 'includeSymbolsNextToModules' 설정을 통해 포함되는 경우가 아니면 모듈에 대한 기호를 로드하지 않도록 합니다.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.excludedModules.description": "디버거에서 기호를 로드하지 않아야 하는 모듈의 배열입니다. 와일드카드(예: MyCompany.*.dll)가 지원됩니다.\n\n'모드'가 'loadAllButExcluded'로 설정되어 있지 않으면 이 속성은 무시됩니다.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.includedModules.description": "디버거에서 기호를 로드해야 하는 모듈의 배열입니다. 와일드카드(예: MyCompany.*.dll)가 지원됩니다.\n\n'모드'가 'loadOnlyIncluded'로 설정되어 있지 않으면 이 속성은 무시됩니다.",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.includeSymbolsNextToModules.description": "True 이면 'includedModules' 배열에 없는 모듈에 대해 디버거는 모듈 자체 및 시작 실행 파일 옆을 계속 확인하지만 기호 검색 목록의 경로는 확인하지 않습니다. 이 옵션의 기본값은 'true'입니다.\n\n'모드'가 'loadOnlyIncluded'로 설정되어 있지 않으면 이 속성은 무시됩니다.",
	"c_cpp.semanticTokenTypes.referenceType.description": "C++/CLI 참조 형식의 스타일입니다.",
	"c_cpp.semanticTokenTypes.cliProperty.description": "C++/CLI 속성의 스타일입니다.",
	"c_cpp.semanticTokenTypes.genericType.description": "C++/CLI 제네릭 형식의 스타일입니다.",
	"c_cpp.semanticTokenTypes.valueType.description": "C++/CLI 값 형식의 스타일입니다.",
	"c_cpp.semanticTokenTypes.templateFunction.description": "C++ 템플릿 함수의 스타일입니다.",
	"c_cpp.semanticTokenTypes.templateType.description": "C++ 템플릿 형식의 스타일입니다.",
	"c_cpp.semanticTokenTypes.operatorOverload.description": "C++ 오버로드된 연산자의 스타일입니다.",
	"c_cpp.semanticTokenTypes.memberOperatorOverload.description": "C++ 오버로드된 연산자 멤버 함수의 스타일입니다.",
	"c_cpp.semanticTokenTypes.newOperator.description": "C++ `new` 또는 `delete` 연산자의 스타일입니다.",
	"c_cpp.semanticTokenTypes.customLiteral.description": "C++ 사용자 정의 리터럴의 스타일입니다.",
	"c_cpp.semanticTokenTypes.numberLiteral.description": "C++ 사용자 정의 리터럴 번호의 스타일입니다.",
	"c_cpp.semanticTokenTypes.stringLiteral.description": "C++ 사용자 정의 리터럴 문자열의 스타일입니다.",
	"c_cpp.semanticTokenModifiers.global.description": "전체인 기호에 사용할 스타일입니다.",
	"c_cpp.semanticTokenModifiers.local.description": "로컬인 기호에 사용할 스타일입니다.",
	"c_cpp.debuggers.logging.natvisDiagnostics.description": "진단 natvis 메시지를 디버그 콘솔에 기록할지 여부를 결정하는 선택적 플래그입니다. 기본값은 None입니다.",
	"c_cpp.debuggers.logging.category.verbose.description": "개발 중 대화형 조사에 사용되는 로그입니다. 이러한 로그에는 주로 디버깅에 유용한 정보가 포함되어야 하며 장기적인 가치는 없습니다.",
	"c_cpp.debuggers.logging.category.warning.description": "애플리케이션 흐름에서 비정상적이거나 예기치 않은 이벤트를 강조 표시하지만 그렇지 않으면 애플리케이션 실행이 중지되지 않는 로그입니다.",
	"c_cpp.debuggers.logging.category.error.description": "오류로 인해 현재 실행 흐름이 중지될 때 강조 표시되는 로그입니다. 애플리케이션 전체의 실패가 아니라 현재 활동의 실패를 나타내야 합니다.",
	"c_cpp.debuggers.logging.category.none.description": "로그 메시지 작성에 사용되지 않습니다. 로깅 범주가 메시지를 작성하지 않도록 지정합니다.",
	"c_cpp.walkthrough.title": "C++ 개발 시작",
	"c_cpp.walkthrough.description": "VS Code의 풍부한 C++ 개발 환경을 살펴보세요.",
	"c_cpp.walkthrough.set.up.title": "C++ 환경 설정",
	"c_cpp.walkthrough.activating.description": "C++ 확장을 활성화하여 C++ 환경이 설정되었는지 확인합니다.\n확장 프로그램 활성화 중...",
	"c_cpp.walkthrough.no.compilers.windows.description": "컴퓨터에서 C++ 확장을 사용하는 데 필요한 C++ 컴파일러를 찾을 수 없습니다. 오른쪽의 지침에 따라 설치한 다음 아래의 \"새 컴파일러 찾기\"를 클릭하세요.\n[새 컴파일러 찾기](command:C_Cpp.RescanCompilers?%22walkthrough%22)",
	"c_cpp.walkthrough.no.compilers.description": "내 컴퓨터에서 C++ 확장을 사용하는 데 필요한 C++ 컴파일러를 찾을 수 없습니다. “C++ 컴파일러 설치”를 선택하여 컴파일러를 설치하거나 오른쪽의 설치 지침에 따른 다음, 아래의 “새 컴파일러 찾기”를 클릭합니다.\n[C++ 컴파일러 설치](command:C_Cpp.InstallCompiler?%22walkthrough%22)\n[새 컴파일러 찾기](command:C_Cpp.RescanCompilers?%22walkthrough%22)",
	"c_cpp.walkthrough.compilers.found.description": "C++ 확장은 C++ 컴파일러와 함께 작동합니다. 아래 버튼을 클릭하여 컴퓨터에 이미 있는 항목 중에서 하나를 선택하세요.\n[기본 컴파일러 선택](command:C_Cpp.SelectIntelliSenseConfiguration?%22walkthrough%22)",
	"c_cpp.walkthrough.compilers.found.altText": "기본 컴파일러 빠른 선택 선택과 사용자 시스템에서 발견된 컴파일러 목록(이 중 하나가 선택됨)을 보여주는 이미지입니다.",
	"c_cpp.walkthrough.create.cpp.file.title": "C++ 파일 만들기",
	"c_cpp.walkthrough.create.cpp.file.description": "C++를 [열거나](command:toSide:workbench.action.files.openFile) [만드세요](command:toSide:workbench.action.files.newUntitledFile?%7B%22languageId%22%3A%22cpp%22%7D). \"helloworld.cpp\"와 같이 \".cpp\" 확장자로 저장해야 합니다. \n[C++ 파일 만들기](command:toSide:workbench.action.files.newUntitledFile?%7B%22languageId%22%3A%22cpp%22%7D)",
	"c_cpp.walkthrough.create.cpp.file.altText": "C++ 프로젝트를 사용하여 C++ 파일 또는 폴더를 엽니다.",
	"c_cpp.walkthrough.command.prompt.title": "개발자 명령 프롬프트에서 시작",
	"c_cpp.walkthrough.command.prompt.description": "Microsoft Visual Studio C++ 컴파일러를 사용하는 경우 C++ 확장을 사용하려면 개발자 명령 프롬프트에서 VS Code를 시작해야 합니다. 다시 시작하려면 오른쪽의 지침을 따르세요.\n[Window 다시 로드](command:workbench.action.reloadWindow)",
	"c_cpp.walkthrough.run.debug.title": "C++ 파일 실행 및 디버그",
	"c_cpp.walkthrough.run.debug.mac.description": "C++ 파일을 열고 편집기의 오른쪽 상단 모서리에 있는 재생 버튼을 클릭하거나 파일에서 F5를 누릅니다. 디버거와 함께 실행하려면 \"clang++ - 활성 파일 빌드 및 디버그\"를 선택합니다.",
	"c_cpp.walkthrough.run.debug.linux.description": "C++ 파일을 열고 편집기의 오른쪽 상단 모서리에 있는 재생 버튼을 클릭하거나 파일에서 F5를 누릅니다. 디버거와 함께 실행하려면 \"g++- 활성 파일 빌드 및 디버그\"를 선택합니다.",
	"c_cpp.walkthrough.run.debug.windows.description": "C++ 파일을 열고 편집기의 오른쪽 상단 모서리에 있는 재생 버튼을 클릭하거나 파일에서 F5를 누릅니다. 디버거와 함께 실행하려면 \"cl.exe - 활성 파일 빌드 및 디버그\"를 선택합니다.",
	"c_cpp.walkthrough.run.debug.windows.altText": "C++ 파일의 중단점, f5 버튼 및 오른쪽 상단의 실행 기호를 보여주는 이미지",
	"c_cpp.walkthrough.customize.debugging.title": "디버깅 사용자 지정",
	"c_cpp.walkthrough.customize.debugging.mac.description": "디버그 구성을 사용자 지정하려면 작업 표시줄에서 탐색기를 선택하고 C++ 파일이 포함된 폴더를 엽니다. C++ 파일을 열고 재생 단추 오른쪽에 있는 \"디버그 구성 추가\"를 선택합니다. 새 디버그 구성은 프로젝트의 launch.json 파일에 저장됩니다. \n[자세한 정보](https://code.visualstudio.com/docs/cpp/config-linux#_debug-helloworldcpp)",
	"c_cpp.walkthrough.customize.debugging.linux.description": "디버그 구성을 사용자 지정하려면 작업 표시줄에서 탐색기를 선택하고 C++ 파일이 포함된 폴더를 엽니다. C++ 파일을 열고 재생 단추 오른쪽에 있는 \"디버그 구성 추가\"를 선택합니다. 새 디버그 구성은 프로젝트의 launch.json 파일에 저장됩니다. \n[자세한 정보](https://code.visualstudio.com/docs/cpp/config-msvc#_debug-helloworldcpp)",
	"c_cpp.walkthrough.customize.debugging.windows.description": "디버그 구성을 사용자 지정하려면 작업 표시줄에서 탐색기를 선택하고 C++ 파일이 포함된 폴더를 엽니다. C++ 파일을 열고 재생 단추 오른쪽에 있는 \"디버그 구성 추가\"를 선택합니다. 새 디버그 구성은 프로젝트의 launch.json 파일에 저장됩니다. \n[자세한 정보](https://code.visualstudio.com/docs/cpp/config-clang-mac#_debug-helloworldcpp)",
	"c_cpp.walkthrough.customize.debugging.altText": "드롭다운에서 디버그 구성 추가를 보여 주는 이미지",
	"c_cpp.codeActions.refactor.inline.macro.title": "인라인 매크로",
	"c_cpp.codeActions.refactor.inline.macro.description": "매크로 호출을 확장된 코드로 바꿉니다.",
	"c_cpp.codeActions.refactor.extract.function.title": "함수로 추출",
	"c_cpp.codeActions.refactor.extract.function.description": "선택한 코드를 자유 또는 멤버 함수에 추출합니다.",
	"c_cpp.configuration.refactoring.includeHeader.markdownDescription": "선언/정의 만들기와 같은 리팩터링 작업을 수행할 때 리팩터링된 함수/기호의 헤더 파일을 해당 소스 파일에 포함할지 여부를 제어합니다.",
	"c_cpp.configuration.refactoring.includeHeader.always.description": "헤더 파일이 소스 파일에 명시적으로 포함되지 않은 경우 항상 헤더 파일을 포함합니다.",
	"c_cpp.configuration.refactoring.includeHeader.ifNeeded.description": "헤더 파일이 소스 파일에 명시적으로 포함되지 않았거나 암시적 포함을 통해 포함된 경우에만 헤더 파일을 포함합니다.",
	"c_cpp.configuration.refactoring.includeHeader.never.description": "헤더 파일을 포함하지 않습니다.",
	"c_cpp.languageModelTools.configuration.displayName": "C/C++ 구성",
	"c_cpp.languageModelTools.configuration.userDescription": "언어 표준 버전 및 대상 플랫폼과 같은 활성 C 또는 C++ 파일의 구성입니다."
}