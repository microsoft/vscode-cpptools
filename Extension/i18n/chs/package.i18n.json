/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"c_cpp.capabilities.untrustedWorkspaces.description": "多个设置可以导致执行工作区本地进程，例如 C_Cpp.clang_format_path、C_Cpp.addNodeAddonIncludePaths、C_Cpp.default.compilerPath、C_Cpp.default.configurationProvider 和 C_Cpp.default.compileCommands，以及 c_cpp_properties.json 中的等效属性。",
	"c_cpp.command.configurationSelect.title": "选择配置...",
	"c_cpp.command.configurationProviderSelect.title": "更改配置提供程序...",
	"c_cpp.command.configurationEditJSON.title": "编辑配置(JSON)",
	"c_cpp.command.configurationEditUI.title": "编辑配置(UI)",
	"c_cpp.command.switchHeaderSource.title": "切换标头/源",
	"c_cpp.command.enableErrorSquiggles.title": "启用错误波形曲线",
	"c_cpp.command.disableErrorSquiggles.title": "禁用错误波形曲线",
	"c_cpp.command.toggleIncludeFallback.title": "在包含错误上切换 IntelliSense 引擎回退",
	"c_cpp.command.toggleDimInactiveRegions.title": "切换非活动区域着色",
	"c_cpp.command.resetDatabase.title": "重置 IntelliSense 数据库",
	"c_cpp.command.takeSurvey.title": "参加调查",
	"c_cpp.command.buildAndDebugActiveFile.title": "生成和调试活动文件",
	"c_cpp.command.logDiagnostics.title": "日志诊断",
	"c_cpp.command.referencesViewGroupByType.title": "按引用类型分组",
	"c_cpp.command.referencesViewUngroupByType.title": "取消按引用类型分组",
	"c_cpp.command.rescanWorkspace.title": "重新扫描工作区",
	"c_cpp.command.vcpkgClipboardInstallSuggested.title": "将 vcpkg 安装命令复制到剪贴板",
	"c_cpp.command.vcpkgOnlineHelpSuggested.title": "访问 vcpkg 帮助页",
	"c_cpp.command.generateEditorConfig.title": "从 VC 格式设置生成 EditorConfig 内容",
	"c_cpp.command.GoToNextDirectiveInGroup.title": "转到条件组中的下一个预处理器指令",
	"c_cpp.command.GoToPrevDirectiveInGroup.title": "转到条件组中的上一个预处理器指令",
	"c_cpp.configuration.formatting.description": "配置格式化引擎",
	"c_cpp.configuration.formatting.clangFormat.description": "将使用 clang-format 设置代码的格式。",
	"c_cpp.configuration.formatting.vcFormat.description": "将使用 Visual C++ 格式设置引擎来设置代码的格式。",
	"c_cpp.configuration.formatting.Default.description": "默认情况下，clang-format 将用于设置代码格式。但如果找到更接近要设置格式代码的具有相关设置的 .editorconfig 文件，并且 clang_format_style 为默认值 “file”，则将使用 Visual C++ 格式设置引擎。",
	"c_cpp.configuration.formatting.Disabled.description": "将禁用代码格式设置。",
	"c_cpp.configuration.vcFormat.indent.braces.description": "按照在“编辑器: 制表符大小”设置中指定的量缩进大括号。",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.description": "确定新行缩进的基准",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.outermostParenthesis.description": "相对于最外侧的左括号缩进新行。",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.innermostParenthesis.description": "相对于最内侧的左括号缩进新行。",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.statementBegin.description": "相对于当前语句的开头缩进新行。",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.description": "键入新行时，新行对齐到左括号下或基于 “C_Cpp.vcFormat.indent.multiLineRelativeTo” 对齐。",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.alignToParenthesis.description": "新行对齐到左括号下。",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.indent.description": "新行基于 “C_Cpp.vcFormat.indent.multiLineRelativeTo” 缩进。",
	"c_cpp.configuration.vcFormat.indent.preserveWithinParentheses.description": "在现有代码中，保留括号内新行现有的缩进对齐方式。",
	"c_cpp.configuration.vcFormat.indent.caseLabels.description": "按照在“编辑器: 制表符大小”设置中指定的量，相对于 switch 语句缩进标签。",
	"c_cpp.configuration.vcFormat.indent.caseContents.description": "按照在“编辑器: 制表符大小”设置中指定的量，相对于标签缩进 case 块中的代码",
	"c_cpp.configuration.vcFormat.indent.caseContentsWhenBlock.description": "按照在“编辑器: 制表符大小”设置中指定的量，缩进 case 语句后面的大括号",
	"c_cpp.configuration.vcFormat.indent.lambdaBracesWhenParameter.description": "按照在“编辑器: 制表符大小”设置中指定的量，相对于语句的开头缩进用作函数参数的 lambda 的大括号",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.description": "跳转标签的位置",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.oneLeft.description": "按照在“编辑器: 制表符大小”设置中指定的量，将 goto 标签移到当前代码缩进的左侧",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.leftmostColumn.description": "将 goto 标签置于代码的最左侧边缘。",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.none.description": "不会格式化 goto 标签。",
	"c_cpp.configuration.vcFormat.indent.preprocessor.description": "预处理器指令的位置",
	"c_cpp.configuration.vcFormat.indent.preprocessor.oneLeft.description": "按照在“编辑器: 制表符大小”设置中指定的量，将预处理器指令置于当前代码缩进的左侧",
	"c_cpp.configuration.vcFormat.indent.preprocessor.leftmostColumn.description": "预处理器指令位于代码的最左侧边缘。",
	"c_cpp.configuration.vcFormat.indent.preprocessor.none.description": "不会格式化预处理器指令。",
	"c_cpp.configuration.vcFormat.indent.accessSpecifiers.description": "按照在“编辑器: 制表符大小”设置中指定的量，相对于类或结构定义缩进访问说明符",
	"c_cpp.configuration.vcFormat.indent.namespaceContents.description": "按照在“编辑器: 制表符大小”设置中指定的量，相对于封闭命名空间缩进代码",
	"c_cpp.configuration.vcFormat.indent.preserveComments.description": "在格式设置操作过程中未更改注释的缩进。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.namespace.description": "用于命名空间的左大括号的位置",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.type.description": "用于类型定义的左大括号的位置",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.lambda.description": "用于 lambda 函数的左大括号的位置",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.function.description": "用于函数的左大括号的位置",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.block.description": "用于控制块的左大括号的位置",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.newLine.description": "将左大括号移动到新行。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.sameLine.description": "左大括号保留在同一行上，并在每个左大括号的前面添加一个空格。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.ignore.description": "左大括号没有格式化。",
	"c_cpp.configuration.vcFormat.newLine.scopeBracesOnSeparateLines.description": "在单独的行上放置用于范围的左大括号和右大括号。",
	"c_cpp.configuration.vcFormat.newLine.closeBraceSameLine.emptyType.description": "对于空类型，将右大括号移动到左大括号所在的同一行。",
	"c_cpp.configuration.vcFormat.newLine.closeBraceSameLine.emptyFunction.description": "对于空的函数体，将右大括号移动到左大括号所在的同一行。",
	"c_cpp.configuration.vcFormat.newLine.beforeCatch.description": "将 \"catch\" 和相似的关键字放在新行上。",
	"c_cpp.configuration.vcFormat.newLine.beforeElse.description": "将 \"else\" 放在新行上。",
	"c_cpp.configuration.vcFormat.newLine.beforeWhileInDoWhile.description": "将 do-while 循环中的 \"while\" 放在新行上。",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.description": "在函数名称与参数列表的左括号之间插入空格",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.insert.description": "在函数的左括号前面添加一个空格。",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.remove.description": "删除函数左括号前的空格。",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.ignore.description": "保留输入的空格。",
	"c_cpp.configuration.vcFormat.space.withinParameterListParentheses.description": "在函数参数列表中的左括号后面和右括号前面添加一个空格。",
	"c_cpp.configuration.vcFormat.space.betweenEmptyParameterListParentheses.description": "当函数参数列表为空时，在其括号之间插入一个空格。",
	"c_cpp.configuration.vcFormat.space.afterKeywordsInControlFlowStatements.description": "在关键字与控制流语句中的左括号之间添加一个空格。",
	"c_cpp.configuration.vcFormat.space.withinControlFlowStatementParentheses.description": "在控制流语句的左括号后面和右括号前面添加一个空格。",
	"c_cpp.configuration.vcFormat.space.beforeLambdaOpenParenthesis.description": "在 lambda 参数列表的左括号前面添加一个空格。",
	"c_cpp.configuration.vcFormat.space.withinCastParentheses.description": "在 C 样式的强制转换的左括号后面和右括号前面添加一个空格。",
	"c_cpp.configuration.vcFormat.space.afterCastCloseParenthesis.description": "在 C 样式的强制转换的右括号后面添加一个空格。",
	"c_cpp.configuration.vcFormat.space.withinExpressionParentheses.description": "在带圆括号的表达式的左括号后面和右括号前面添加一个空格。",
	"c_cpp.configuration.vcFormat.space.beforeBlockOpenBrace.description": "在范围块的左大括号前面添加一个空格。",
	"c_cpp.configuration.vcFormat.space.betweenEmptyBraces.description": "当大括号为空且位于同一行时，在它们之间插入一个空格。",
	"c_cpp.configuration.vcFormat.space.beforeInitializerListOpenBrace.description": "在统一初始化和初始值设定项列表的左大括号前面添加一个空格。",
	"c_cpp.configuration.vcFormat.space.withinInitializerListBraces.description": "在统一初始化和初始值设定项列表的左大括号后面和右大括号前面添加一个空格。",
	"c_cpp.configuration.vcFormat.space.preserveInInitializerList.description": "在统一初始化和初始值设定项列表中，逗号两侧的空格会保留。",
	"c_cpp.configuration.vcFormat.space.beforeOpenSquareBracket.description": "在左方括号之前添加一个空格。",
	"c_cpp.configuration.vcFormat.space.withinSquareBrackets.description": "在左方括号后面和右方括号前面添加一个空格。",
	"c_cpp.configuration.vcFormat.space.beforeEmptySquareBrackets.description": "当方括号为空时，在左方括号前面添加一个空格。",
	"c_cpp.configuration.vcFormat.space.betweenEmptySquareBrackets.description": "当方括号为空时，在方括号之间插入一个空格。",
	"c_cpp.configuration.vcFormat.space.groupSquareBrackets.description": "对于多维数组，删除方括号之间的所有空格。控制空格的其他设置将被重写。",
	"c_cpp.configuration.vcFormat.space.withinLambdaBrackets.description": "在左方括号后面和右方括号前面添加一个空格。",
	"c_cpp.configuration.vcFormat.space.betweenEmptyLambdaBrackets.description": "当方括号为空时，在方括号之间插入一个空格。",
	"c_cpp.configuration.vcFormat.space.beforeComma.description": "在每个逗号前添加一个空格。",
	"c_cpp.configuration.vcFormat.space.afterComma.description": "在每个逗号后面添加一个空格。",
	"c_cpp.configuration.vcFormat.space.removeAroundMemberOperators.description": "成员访问运算符、指向成员的指针运算符和范围解析运算符前后的空格会被删除。",
	"c_cpp.configuration.vcFormat.space.beforeInheritanceColon.description": "在类定义中继承的类型的冒号前面添加一个空格。",
	"c_cpp.configuration.vcFormat.space.beforeConstructorColon.description": "在构造函数定义中的冒号前面添加一个空格。",
	"c_cpp.configuration.vcFormat.space.removeBeforeSemicolon.description": "将移除每个分号前的空格。",
	"c_cpp.configuration.vcFormat.space.insertAfterSemicolon.description": "在每个分号后面插入一个空格。",
	"c_cpp.configuration.vcFormat.space.removeAroundUnaryOperator.description": "移除一元运算符和操作数之间的空格。",
	"c_cpp.configuration.vcFormat.space.aroundBinaryOperator.description": "二元运算符两侧的空格",
	"c_cpp.configuration.vcFormat.space.aroundAssignmentOperator.description": "赋值运算符两侧的空格",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.description": "指针和引用运算符两侧的空格",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.left.description": "指针和引用运算符左对齐。",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.center.description": "指针和引用运算符居中对齐。",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.right.description": "指针和引用运算符右对齐。",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.ignore.description": "指针和引用运算符没有格式化。",
	"c_cpp.configuration.vcFormat.space.aroundTernaryOperator.description": "条件运算符两侧的空格",
	"c_cpp.configuration.vcFormat.space.aroundOperators.insert.description": "在运算符的前后添加一个空格。",
	"c_cpp.configuration.vcFormat.space.aroundOperators.remove.description": "移除运算符前后的空格。",
	"c_cpp.configuration.vcFormat.space.aroundOperators.ignore.description": "保留输入的空格。",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.description": "块的换行选项",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.oneLiners.description": "无论任何“VC 格式: 新行”设置的值如何，在一行输入的完整代码块都保留在一行上",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.allOneLineScopes.description": "无论任何“VC 格式: 新行”设置的值如何，在同一行输入左大括号和右大括号的任何代码都保留在同一行上",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.never.description": "始终根据“VC 格式: 新行”设置来设定代码块的格式",
	"c_cpp.configuration.clang_format_path.description": "clang 格式可执行文件的完整路径。如果未指定，并且 clang 格式在环境路径中可用，则使用该格式。如果在环境路径中找不到 clang 格式，则将使用与该扩展绑定的 clang 格式的副本。",
	"c_cpp.configuration.clang_format_style.description": "编码样式，当前支持: Visual Studio、LLVM、Google、Chromium、Mozilla、WebKit。使用 \"file\" 从当前目录或父目录中的 .clang 格式文件中加载样式。使用 {键: 值, ...} 设置特定参数。例如，\"Visual Studio\" 样式类似于: { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }",
	"c_cpp.configuration.clang_format_fallbackStyle.description": "如果使用样式 \"file\" 调用 clang 格式但是找不到 .clang 格式文件，则使用预定义的样式的名称作为回退。可能的值为 Visual Studio、LLVM、Google、Chromium、Mozilla、WebKit、none，或使用 {key: value, ...} 设置特定参数。例如，\"Visual Studio\" 样式类似于: { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }",
	"c_cpp.configuration.clang_format_sortIncludes.description": "如果已设置，则重写由 SortIncludes 参数确定的包含排序行为。",
	"c_cpp.configuration.intelliSenseEngine.description": "控制 IntelliSense 提供程序。“标记分析器”提供非上下文感知的“模糊”结果。“默认”提供上下文感知结果。“已禁用”将关闭 C/C++ 语言服务功能。",
	"c_cpp.configuration.intelliSenseEngineFallback.description": "控制 IntelliSense 引擎是否自动切换到包含 #include 错误的翻译单元的标记分析器。",
	"c_cpp.configuration.autocomplete.description": "控制自动完成提供程序。“默认”使用活动 IntelliSense 引擎。“已禁用”使用由 Visual Studio Code 提供的基于单词的完成。",
	"c_cpp.configuration.errorSquiggles.description": "控制是否向编辑器回传 IntelliSense 引擎检测到的可疑编译错误。标记分析器引擎会忽略此设置。",
	"c_cpp.configuration.dimInactiveRegions.description": "控制非活动预处理程序块的颜色是否与活动代码不同。如果禁用了 IntelliSense 或使用“默认高对比度”主题，则此设置不起任何作用。",
	"c_cpp.configuration.inactiveRegionOpacity.description": "控制非活动预处理程序块的不透明度。介于 0.1 和 1.0 之间。此设置仅在启用了非活动区域变暗时适用。",
	"c_cpp.configuration.inactiveRegionForegroundColor.description": "控制非活动预处理程序块的字体颜色。输入的格式为十六进制颜色代码或有效的主题颜色。如果未设置，则默认为编辑器的语法颜色方案。此设置仅在启用非活动区域变暗时适用。",
	"c_cpp.configuration.inactiveRegionBackgroundColor.description": "控制非活动预处理程序块的背景颜色。输入的格式为十六进制颜色代码或有效的主题颜色。如果未设置，则默认为透明。此设置仅在启用了非活动区域变暗时适用。",
	"c_cpp.configuration.loggingLevel.description": "输出面板中日志记录的详细程度。从最低详细程度到最高详细程度的顺序为: None < Error < Warning < Information < Debug。",
	"c_cpp.configuration.autoAddFileAssociations.description": "控制当文件是来自 C/C++ 文件的导航操作的目标时，是否将文件自动添加到 files.associations。",
	"c_cpp.configuration.workspaceParsingPriority.description": "控制在分析非活动工作区文件时是否使用休眠以避免 CPU 使用率达到 100%。最高/高/中等/低的值约对应于 100/75/50/25% 的 CPU 使用率。",
	"c_cpp.configuration.workspaceSymbols.description": "调用“转到工作区中的符号”时要包含在查询结果中的符号。",
	"c_cpp.configuration.exclusionPolicy.description": "在遍历 \"browse.path\" 数组中的路径并确定应将哪些文件添加到代码导航数据库中时，指示扩展何时使用 \"files.exclude\" 设置。\"checkFolders\" 表示仅为每个文件夹评估一次排除筛选器(不检查单个文件)。\"checkFilesAndFolders\" 表示将对遇到的每个文件和文件夹评估排除筛选器。如果 \"files.exclude\" 设置仅包含文件夹，则 \"checkFolders\" 是最佳选择，可提高扩展对代码导航数据库执行初始化的速度。",
	"c_cpp.configuration.preferredPathSeparator.description": "要作为 #include 自动完成结果的路径分隔符使用的字符。",
	"c_cpp.configuration.simplifyStructuredComments.description": "如果为 true，则悬停和自动完成的工具提示将仅显示结构化注释的特定标签。否则，显示所有注释。",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.string.description": "开启一个多行或单行注释块的模式。多行注释块的延续模式默认为 \"*\"，单行注释块的延续模式默认为此字符串。",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.begin.description": "开启一个多行或单行注释块的模式。",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.continue.description": "在多行或单行注释块内按下 Enter 键时要插入到下一行的文本。",
	"c_cpp.configuration.commentContinuationPatterns.description": "定义在多行或单行注释块内按下 Enter 键时的编辑器行为。",
	"c_cpp.configuration.configurationWarnings.description": "确定在配置提供程序扩展无法提供源文件配置时是否显示弹出通知。",
	"c_cpp.configuration.intelliSenseCachePath.description": "为 IntelliSense 使用的缓存预编译标头定义文件夹路径。Windows 上的默认缓存路径为 \"%LocalAppData%/Microsoft/vscode-cpptools\"，Linux 上为 \"$XDG_CACHE_HOME/vscode-cpptools/\" (若未定义 XDG_CACHE_HOME，则为 \"$HOME/.cache/vscode-cpptools/\")，Mac 上为 \"$HOME/Library/Caches/vscode-cpptools/\"。如果未指定路径或指定的路径无效，则使用默认路径。",
	"c_cpp.configuration.intelliSenseCacheSize.description": "缓存的预编译标头的每个工作区硬盘驱动器空间的最大大小(MB)；实际使用量可能在此值上下波动。默认大小为 5120 MB。当大小为 0 时，预编译的标头缓存将被禁用。",
	"c_cpp.configuration.intelliSenseMemoryLimit.description": "IntelliSense 进程的内存使用限制(MB)。默认限制为 4096 MB，最大限制为 16 GB。当 IntelliSense 进程超出限制时，扩展将关闭并重新启动该进程。",
	"c_cpp.configuration.intelliSenseUpdateDelay.description": "控制修改之后到 IntelliSense 开始更新之间的延迟(以毫秒为单位)。",
	"c_cpp.configuration.default.includePath.description": "在 cpp_properties.json 中未指定 \"includePath\" 时要在配置中使用的值。如果指定了 \"includePath\"，则向数组添加 \"${default}\" 以从此设置插入值。",
	"c_cpp.configuration.default.defines.description": "未指定 \"defines\" 时要在配置中使用的值，或 \"defines\" 中存在 \"${default}\" 时要插入的值。",
	"c_cpp.configuration.default.macFrameworkPath.description": "未指定 \"macFrameworkPath\" 时要在配置中使用的值，或 \"macFrameworkPath\" 中存在 \"${default}\" 时要插入的值。",
	"c_cpp.configuration.default.windowsSdkVersion.description": "要在 Windows 上使用的 Windows SDK 包含路径的版本，例如 \"10.0.17134.0\"。",
	"c_cpp.configuration.default.compileCommands.description": "未指定 \"compileCommands\" 时或将其设置为 \"${default}\" 时要在配置中使用的值。",
	"c_cpp.configuration.default.forcedInclude.description": "未指定 \"forcedInclude\" 时要在配置中使用的值，或 \"forcedInclude\" 中存在 \"${default}\" 时要插入的值。",
	"c_cpp.configuration.default.intelliSenseMode.description": "未指定 \"intelliSenseMode\" 时或将其设置为 \"${default}\" 时要在配置中使用的值。",
	"c_cpp.configuration.default.compilerPath.description": "未指定 \"compilerPath\" 时或将其设置为 \"${default}\" 时要在配置中使用的值。",
	"c_cpp.configuration.default.compilerArgs.description": "未指定 \"compilerArgs\" 时或将其设置为 \"${default}\" 时要在配置中使用的值。",
	"c_cpp.configuration.default.cStandard.description": "未指定 \"cStandard\" 时或将其设置为 \"${default}\" 时要在配置中使用的值。",
	"c_cpp.configuration.default.cppStandard.description": "未指定 \"cppStandard\" 时或将其设置为 \"${default}\" 时要在配置中使用的值。",
	"c_cpp.configuration.default.configurationProvider.description": "未指定 \"configurationProvider\" 时或将其设置为 \"${default}\" 时要在配置中使用的值。",
	"c_cpp.configuration.default.browse.path.description": "未指定 \"browse. path\" 时要在配置中使用的值，或 \"browse.path\" 中存在 \"${default}\" 时要插入的值。",
	"c_cpp.configuration.default.browse.databaseFilename.description": "未指定 \"browse.databaseFilename\" 时或将其设置为 \"${default}\" 时要在配置中使用的值。",
	"c_cpp.configuration.default.browse.limitSymbolsToIncludedHeaders.description": "未指定 \"browse.limitSymbolsToIncludedHeaders\" 时或将其设置为 \"${default}\" 时要在配置中使用的值。",
	"c_cpp.configuration.default.systemIncludePath.description": "要用于系统包含路径的值。如果已设置，它会覆盖通过 \"compilerPath\" 和 \"compileCommands\" 设置获取的系统包含路径。",
	"c_cpp.configuration.default.enableConfigurationSquiggles.description": "控制扩展是否报告在 c_cpp_properties.json 中检测到的错误。",
	"c_cpp.configuration.default.customConfigurationVariables.description": "未设置 \"customConfigurationVariables\" 时要在配置中使用的值，或 \"customConfigurationVariables\" 中存在 \"${default}\" 作为键时要插入的值。",
	"c_cpp.configuration.updateChannel.description": "设置为“预览体验”以自动下载并安装扩展的最新预览体验版本，其中包括即将推出的功能和 bug 修复。",
	"c_cpp.configuration.experimentalFeatures.description": "控制“实验性”功能是否可用。",
	"c_cpp.configuration.suggestSnippets.description": "如果为 true，则由语言服务器提供片段。",
	"c_cpp.configuration.enhancedColorization.description": "如果启用，则根据 IntelliSense 对代码设定颜色。此设置仅在 intelliSenseEngine 设置为“默认”时适用。",
	"c_cpp.configuration.codeFolding.description": "如果启用，则由语言服务器提供代码折叠范围。",
	"c_cpp.configuration.vcpkg.enabled.markdownDescription": "为 [vcpkg 依赖关系管理器](https://aka.ms/vcpkg/)启用集成服务。",
	"c_cpp.configuration.addNodeAddonIncludePaths.description": "当它们是依赖项时，从 nan 和 node-addon-api 添加 include 路径。",
	"c_cpp.configuration.renameRequiresIdentifier.description": "如果为 true，则“重命名符号”将需要有效的 C/C++ 标识符。",
	"c_cpp.configuration.autocompleteAddParentheses.description": "如果为 true，则自动完成功能将在函数调用后自动添加 \"(\"，这种情况下还可以添加 \")\"，具体取决于 \"editor.autoClosingBrackets\" 设置的值。",
	"c_cpp.configuration.filesExclude.description": "为排除文件夹(和文件，如果 \"C_Cpp.exclusionPolicy\" 已更改)配置 glob 模式。这些是除了 \"files.exclude\" 之外的 C/C++ 特定扩展，但与 \"files.exclude\" 不同，它们未从资源管理器视图中移除。了解 glob 模式的详细信息 [此处](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options)。",
	"c_cpp.configuration.filesExcludeBoolean.description": "匹配文件路径所依据的 glob 模式。设置为 true 或 false 可启用或禁用该模式。",
	"c_cpp.configuration.filesExcludeWhen.description": "对匹配文件的同级文件的其他检查。使用 $(basename) 作为匹配文件名的变量。",
	"c_cpp.configuration.debugger.useBacktickCommandSubstitution.description": "如果为 true，调试程序 shell 命令替换将使用过时的反引号(`)。",
	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: 其他引用结果",
	"c_cpp.contributes.viewsWelcome.contents": "要了解有关 launch.json 的信息，请参阅 [配置 C/C++ 调试](https://code.visualstudio.com/docs/cpp/launch-json-reference)。",
	"c_cpp.debuggers.pipeTransport.description": "如果存在，这会指示调试程序使用其他可执行文件作为管道来连接到远程计算机，此管道将在 VS Code 和已启用 MI 的调试程序后端可执行文件(如 gdb)之间中继标准输入/输入。",
	"c_cpp.debuggers.pipeTransport.default.pipeProgram": "输入管道程序名称的完全限定路径，例如 \"/usr/bin/ssh\"",
	"c_cpp.debuggers.pipeTransport.default.debuggerPath": "目标计算机上调试程序的完整路径，例如 /usr/bin/gdb。",
	"c_cpp.debuggers.pipeTransport.debuggerPath.description": "目标计算机上调试程序的完整路径，例如 /usr/bin/gdb。",
	"c_cpp.debuggers.pipeTransport.pipeCwd.description": "管道程序工作目录的完全限定的路径。",
	"c_cpp.debuggers.pipeTransport.pipeProgram.description": "要执行的完全限定的管道命令。",
	"c_cpp.debuggers.pipeTransport.pipeArgs.description": "传递给管道程序配置连接的命令行参数。",
	"c_cpp.debuggers.pipeTransport.pipeEnv.description": "传递给程序的环境变量。",
	"c_cpp.debuggers.pipeTransport.quoteArgs.description": "如果 pipeProgram 的单个参数包含字符(如空格或制表符)，是否应引用它? 如果为 “false”，则将不再自动引用调试程序命令。默认值为 “true”。",
	"c_cpp.debuggers.logging.description": "用于确定应将哪些类型的消息记录到调试控制台的可选标志。",
	"c_cpp.debuggers.logging.exceptions.description": "用于确定是否应将异常消息记录到调试控制台的可选标志。默认为 true。",
	"c_cpp.debuggers.logging.moduleLoad.description": "用于确定是否应将模块加载事件记录到调试控制台的可选标志。默认为 true。",
	"c_cpp.debuggers.logging.programOutput.description": "用于确定是否应将程序输出记录到调试控制台的可选标志。默认为 true。",
	"c_cpp.debuggers.logging.engineLogging.description": "用于确定是否应将诊断调试引擎消息记录到调试控制台的可选标志。默认为 false。",
	"c_cpp.debuggers.logging.trace.description": "用于确定是否应将诊断适配器命令跟踪记录到调试控制台的可选标志。默认为 false。",
	"c_cpp.debuggers.logging.traceResponse.description": "用于确定是否应将诊断适配器命令和响应跟踪记录到调试控制台的可选标志。默认为 false。",
	"c_cpp.debuggers.cppvsdbg.logging.threadExit.description": "用于确定是否应将线程退出消息记录到调试控制台的可选标记。默认值: false。",
	"c_cpp.debuggers.cppvsdbg.logging.processExit.description": "用于确定是否应将目标进程退出消息记录到调试控制台的可选标记。默认值: true。",
	"c_cpp.debuggers.text.description": "要执行的调试命令。",
	"c_cpp.debuggers.description.description": "此命令的可选说明。",
	"c_cpp.debuggers.ignoreFailures.description": "如果为 true，应忽略此命令的失败。默认值为 false。",
	"c_cpp.debuggers.program.description": "程序可执行文件的完整路径。",
	"c_cpp.debuggers.args.description": "传递给程序的命令行参数。",
	"c_cpp.debuggers.cppdbg.type.description": "引擎的类型。必须为 \"cppdbg\"。",
	"c_cpp.debuggers.cppvsdbg.type.description": "引擎的类型。必须为 \"cppvsdbg\"。",
	"c_cpp.debuggers.targetArchitecture.description": "调试对象的体系结构。如果未设置此参数，将进行自动检测。允许的值有 x86、arm、arm64、mips、x64、amd64、x86_64。",
	"c_cpp.debuggers.cwd.description": "目标的工作目录",
	"c_cpp.debuggers.setupCommands.description": "为了安装基础调试程序而执行的一个或多个 GDB/LLDB 命令。示例: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }]。",
	"c_cpp.debuggers.customLaunchSetupCommands.description": "如果已提供，将使用其他命令替换用于启动目标的默认命令。例如，附加到目标进程的命令可以为 \"-target-attach\"。如果是空命令列表，将不会用任何内容替换启动命令。此功能可在向调试程序提供启动选项作为命令行选项时很有用。示例: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }]。",
	"c_cpp.debuggers.launchCompleteCommand.description": "调试程序完全安装后，为了使目标进程运行而执行的命令。允许的值为 \"exec-run\"、\"exec-continue\"、\"None\"。默认值为 \"exec-run\"。",
	"c_cpp.debuggers.cppdbg.visualizerFile.description": "调试此进程时要使用的 .natvis 文件。此选项与 GDB 整齐打印不兼容。如果使用此设置，请同时查看 \"showDisplayString\"。",
	"c_cpp.debuggers.cppvsdbg.visualizerFile.description": "调试此进程时要使用的 .natvis 文件。",
	"c_cpp.debuggers.showDisplayString.description": "指定了 visualizerFile 时，showDisplayString 将启用显示字符串。启用此选项可能会导致调试期间的性能下降。",
	"c_cpp.debuggers.environment.description": "要添加到程序环境的环境变量。示例: [ { \"name\": \"config\", \"value\": \"Debug\" } ]，而不是 [ { \"config\": \"Debug\" } ]。",
	"c_cpp.debuggers.envFile.description": "包含环境变量定义的文件的绝对路径。此文件具有每行由等号分隔的键值对。例如: 键=值",
	"c_cpp.debuggers.additionalSOLibSearchPath.description": "要用于搜索 .so 文件的目录列表(以分号分隔)。示例: \"c:\\dir1;c:\\dir2\"。",
	"c_cpp.debuggers.MIMode.description": "指示 MIDebugEngine 要连接到的控制台调试程序。允许的值为 \"gdb\"、\"lldb\"。",
	"c_cpp.debuggers.miDebuggerPath.description": "MI 调试程序(如 gdb)的路径。如果未指定，将首先在路径中搜索调试程序。",
	"c_cpp.debuggers.miDebuggerArgs.description": "MI 调试程序(如 gdb)的其他参数。",
	"c_cpp.debuggers.miDebuggerServerAddress.description": "要连接到的 MI 调试程序服务器的网络地址(示例: localhost:1234)。",
	"c_cpp.debuggers.stopAtEntry.description": "可选参数。如果为 true，则调试程序应在目标的入口点处停止。如果传递了 processId，则不起任何作用。",
	"c_cpp.debuggers.debugServerPath.description": "到要启动的调试服务器的可选完整路径。默认值为 null。该路径与 “miDebugServerAddress” 或带有运行 “-target-select remote <server:port>” 的 “customSetupCommand” 的自有服务器配合使用。",
	"c_cpp.debuggers.debugServerArgs.description": "可选调试服务器参数。默认为 null。",
	"c_cpp.debuggers.serverStarted.description": "要在调试服务器输出中查找的可选服务器启动模式。默认为 null。",
	"c_cpp.debuggers.filterStdout.description": "在 stdout 流中搜索服务器启动模式，并将 stdout 记录到默认输出。默认为 true。",
	"c_cpp.debuggers.filterStderr.description": "在 stderr 流中搜索服务器启动模式，并将 stderr 记录到调试输出。默认为 false。",
	"c_cpp.debuggers.serverLaunchTimeout.description": "调试程序等待 debugServer 启动的可选时间(毫秒)。默认为 10000。",
	"c_cpp.debuggers.coreDumpPath.description": "指定程序的核心转储文件的可选完整路径。默认为 null。",
	"c_cpp.debuggers.cppdbg.externalConsole.description": "如果为 true，则为调试对象启动控制台。如果为 false，它在 Linux 和 Windows 上会显示在集成控制台中。",
	"c_cpp.debuggers.cppvsdbg.externalConsole.description": "[已通过“控制台”弃用]如果为 true，将为调试对象启动控制台。如果为 false，将不启动任何控制台。",
	"c_cpp.debuggers.cppvsdbg.console.description": "启动调试目标的位置。如果未定义，则默认为 \"internalConsole\"。",
	"c_cpp.debuggers.cppvsdbg.console.internalConsole.description": "输出到 VS Code 调试控制台。这不支持读取控制台输入(例如: \"std::cin\" 或 \"scanf\")",
	"c_cpp.debuggers.cppvsdbg.console.integratedTerminal.description": "VS Code 的集成终端",
	"c_cpp.debuggers.cppvsdbg.console.externalTerminal.description": "控制台应用程序将在外部终端窗口中启动。该窗口将在重新启动方案中重复使用，并且在应用程序退出时不会自动消失。",
	"c_cpp.debuggers.cppvsdbg.console.newExternalWindow.description": "控制台应用程序将在自身的外部控制台窗口中启动，该窗口将在应用程序停止时结束。非控制台应用程序将在没有终端的情况下运行，并且 stdout/stderr 将被忽略。",
	"c_cpp.debuggers.avoidWindowsConsoleRedirection.description": "如果为 true，则禁用集成终端支持所需的调试对象控制台重定向。",
	"c_cpp.debuggers.sourceFileMap.description": "传递到调试引擎的可选源文件映射。示例: \"{ \"/original/source/path\":\"/current/source/path\" }\"",
	"c_cpp.debuggers.processId.anyOf.description": "要将调试程序附加到的可选进程 ID。使用 \"${command:pickProcess}\" 获取要附加到的本地运行进程的列表。请注意，一些平台需要管理员权限才能附加到进程。",
	"c_cpp.debuggers.symbolSearchPath.description": "用于搜索符号(即 pdb)文件的目录列表(以分号分隔)。示例: \"c:\\dir1;c:\\dir2\"。",
	"c_cpp.debuggers.dumpPath.description": "指定程序的转储文件的可选完整路径。例如: \"c:\\temp\\app.dmp\"。默认为 null。",
	"c_cpp.debuggers.enableDebugHeap.description": "如果为 false，将在禁用调试堆的情况下启动该进程。这会将环境变量 \"_NO_DEBUG_HEAP\" 设置为 \"1\"。",
	"c_cpp.debuggers.symbolLoadInfo.description": "对符号加载的显式控制。",
	"c_cpp.debuggers.symbolLoadInfo.loadAll.description": "如果为 true，则将加载所有 lib 的符号；否则不加载任何 solib 符号。默认值为 true。",
	"c_cpp.debuggers.symbolLoadInfo.exceptionList.description": "以分号 \";\" 分隔的文件名列表(允许使用通配符)。修改 LoadAll 的行为。如果 LoadAll 为 true，则不加载与列表中任何名称匹配的 lib 的符号。否则，仅为匹配的 lib 加载符号。示例: \"foo.so;bar.so\"",
	"c_cpp.debuggers.requireExactSource.description": "可选标志，用于要求当前源代码与 pdb 匹配。",
	"c_cpp.debuggers.stopAtConnect.description": "如果为 true，则调试器在连接到目标后应停止。如果为 false，则连接后，调试器将继续工作。默认值为 false。",
	"c_cpp.debuggers.hardwareBreakpoints.description": "对远程目标的硬件断点行为的显式控制。",
	"c_cpp.debuggers.hardwareBreakpoints.require.description": "如果为 true，请始终使用硬件断点。默认值为 false。",
	"c_cpp.debuggers.hardwareBreakpoints.limit.description": "要使用的可用硬件断点数量的可选限制。仅在“需要”为 true 且“限制”大于 0 时强制使用。默认值为 0。",
	"c_cpp.taskDefinitions.name.description": "任务的名称",
	"c_cpp.taskDefinitions.command.description": "执行编译的编译器或脚本的路径",
	"c_cpp.taskDefinitions.args.description": "要传递给编译器或编译脚本的其他参数",
	"c_cpp.taskDefinitions.options.description": "其他命令选项",
	"c_cpp.taskDefinitions.options.cwd.description": "已执行程序或脚本的当前工作目录。如果省略，则使用代码的当前工作区根。",
	"c_cpp.taskDefinitions.detail.description": "任务类型的其他详细信息",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.description": "相同源树的当前路径和编译时路径。EditorPath 下的文件会映射到 CompileTimePath 路径以进行断点匹配，并在显示 stacktrace 位置时，从 CompileTimePath 映射到 EditorPath。",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.editorPath.description": "编辑器将使用的源树的路径。",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.useForBreakpoints.description": "如果此条目仅用于堆栈帧位置映射，则为 False。如果在指定断点位置时也需要使用此条目，则为 True。",
	"c_cpp.debuggers.symbolOptions.description": "用于控制如何找到和加载符号(.pdb 文件)的选项。",
	"c_cpp.debuggers.VSSymbolOptions.description": "提供用于找到符号并将其加载到调试适配器的配置。",
	"c_cpp.debuggers.VSSymbolOptions.searchPaths.description": "在其中搜索 .pdb 文件的符号服务器 URL (例如 http​://MyExampleSymbolServer)或目录(例如 /build/symbols)的数组。除了默认位置，还将搜索这些目录 - 在模块以及 pdb 最初放置到的路径的旁边。",
	"c_cpp.debuggers.VSSymbolOptions.searchMicrosoftSymbolServer.description": "如果为 \"true\"，则 Microsoft 符号服务器(https​://msdl.microsoft.com​/download/symbols)会添加到符号搜索路径。如果未指定，此选项会默认为 \"false\"。",
	"c_cpp.debuggers.VSSymbolOptions.cachePath.description": "从符号服务器下载的符号应缓存到的目录。如果未指定，则在 Windows 上，调试程序将默认为 %TEMP%\\SymbolCache。",
	"c_cpp.debuggers.VSSymbolOptions.moduleFilter.description": "提供选项来控制调试程序将尝试为哪些模块(.dll 文件)加载符号(.pdb 文件)。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.description": "提供用于将符号加载到调试适配器的配置。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.description": "控制模块筛选器在两种基本操作模式的下一种模式下操作。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.loadAllButExcluded.enumDescriptions": "为所有模块加载符号，除非模块在 \"excludedModules\" 数组中。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.loadOnlyIncluded.enumDescriptions": "请勿尝试为任何模块加载符号，除非该模块在 \"includedModules\" 数组中，或者它通过 \"includeSymbolsNextToModules\" 设置包含在内。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.excludedModules.description": "调试程序不得为其加载符号的模块数组。支持通配符(例如: MyCompany.*.dll)。\n\n会忽略此属性，除非“模式”设置为 \"loadAllButExcluded\"。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.includedModules.description": "调试程序应为其加载符号的模块数组。支持通配符(例如: MyCompany.*.dll)。\n\n会忽略此属性，除非“模式”设置为 \"loadOnlyIncluded\"。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.includeSymbolsNextToModules.description": "如果为 true，则对于未在 \"includedModules\" 数组中的任何模块，调试程序将在模块本身和启动可执行文件旁边进行检查，但它将不检查符号搜索列表上的路径。此选项默认为 \"true\"\n\n会忽略此属性，除非“模式”设置为 \"loadOnlyIncluded\"。"
}