/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"microsoft.c.cpp.extension": "Microsoft C/C++ 扩展",
	"c.cpp.extension": "C/C++ 扩展",
	"open.this.editor": "使用以下命令打开此编辑器:",
	"edit.configurations.ui": "C/C++: 编辑配置(UI)",
	"switch.to.json": "通过单击文件链接或使用以下命令切换到 {0} 文件:",
	"edit.configurations.in.json": "编辑 JSON 文件中的配置",
	"edit.configurations.json": "C/C++: 编辑配置(JSON)",
	"check.the.schema": "转到 {0}，详细了解 C/C++ 属性。",
	"view.schema.reference": "属性架构引用",
	"intellisense.configurations": "IntelliSense 配置",
	"intellisense.configurations.description": "使用此编辑器编辑在基础 {0} 文件中定义的 IntelliSense 设置。在此编辑器中所做的更改仅适用于所选的配置。要一次编辑多个配置，请转到 {1}。",
	"configuration.name": "配置名称",
	"configuration.name.description": "用于标识某个配置的友好名称。{0}、{1} 和 {2} 是特殊标识符，用于将在这些平台上自动选择的配置。",
	"select.configuration.to.edit": "选择要编辑的配置集。",
	"add.configuration.button": "添加配置",
	"configuration.name.input": "配置名称...",
	"ok.button": "确定",
	"cancel.button": "取消",
	"compiler.path": "编译器路径",
	"compiler.path.description": "用于生成项目来启用更准确的 IntelliSense 的编译器的完整路径，例如 {0}。扩展将查询编译器以确定要用于 IntelliSense 的系统是否包含路径和默认定义。",
	"specify.a.compiler": "指定编译器路径或从下拉列表中选择检测到的编译器路径。",
	"no.compiler.paths.detected": "(未检测到编译器路径)",
	"compiler.args": "编译器参数",
	"compiler.arguments": "用于修改所使用的包含或定义的编译器参数，例如 {0}、{1} 等。",
	"one.argument.per.line": "每行一个参数。",
	"intellisense.mode": "IntelliSense 模式",
	"intellisense.mode.description": "要使用的 IntelliSense 模式，该模式映射到 MSVC、gcc 或 Clang 的平台和体系结构变体。如果未设置或设置为 {0}，则扩展将选择该平台的默认值。Windows 默认为 {1}，Linux 默认为 {2}，macOS 默认为 {3}。选择特定 IntelliSense 模式以替代 {4} 模式。仅指定 {5} 变体(例如 {6})的 IntelliSense 模式是旧模式，它们会根据主机平台自动转换为 {7} 变体。",
	"include.path": "包含路径",
	"include.path.description": "include 路径是包括源文件中随附的头文件(如 {0})的文件夹。指定 IntelliSense 引擎在搜索包含的头文件时要使用的列表路径。对这些路径进行的搜索不是递归搜索。指定 {1} 可指示递归搜索。例如，{2} 将搜索所有子目录，而 {3} 则不会。如果在安装了 Visual Studio 的 Windows 上，或者在 {4} 设置中指定了编译器，则无需在此列表中列出系统 include 路径。",
	"one.include.path.per.line": "每行一个包含路径。",
	"defines": "定义",
	"defines.description": "分析文件时 IntelliSense 引擎要使用的预处理器定义的列表。(可选)使用 {0} 设置值，例如 {1}。",
	"one.definition.per.line": "每行一个定义。",
	"c.standard": "C 标准",
	"c.standard.description": "用于 IntelliSense 的 C 语言标准的版本。注意: GNU 标准仅用于查询设置编译器以获取 GNU 定义，并且 IntelliSense 将模拟等效的 C 标准版本。",
	"cpp.standard": "C++ 标准",
	"cpp.standard.description": "用于 IntelliSense 的 C++ 语言标准的版本。注意: GNU 标准仅用于查询设置用来获取 GNU 定义的编译器，并且 IntelliSense 将模拟等效的 C++ 标准版本。",
	"advanced.settings": "高级设置",
	"configuration.provider": "配置提供程序",
	"configuration.provider.description": "可为源文件提供 IntelliSense 配置信息的 VS Code 扩展 ID。例如，使用 VS Code 扩展 ID {0} 从 CMake Tools 扩展提供配置信息。",
	"windows.sdk.version": "Windows SDK 版本",
	"windows.sdk.version.description": "要在 Windows 上使用的 Windows SDK 包含路径版本，例如 {0}。",
	"mac.framework.path": "Mac 框架路径",
	"mac.framework.path.description": "Intellisense 引擎在 Mac 框架中搜索包含的标头时要使用的路径的列表。仅在 macOS 的配置中受支持。",
	"one.path.per.line": "每行一个路径。",
	"forced.include": "强制包含",
	"forced.include.description": "在处理源文件中的任何其他字符之前应包含的文件的列表。按列出的顺序包含文件。",
	"one.file.per.line": "每行一个文件。",
	"dot.config": "点配置",
	"dot.config.description": "Kconfig 系统创建的 .config 文件的路径。Kconfig 系统生成包含所有定义的文件以生成项目。使用 Kconfig 系统的项目示例包括 Linux 内核和 NuttX RTOS。",
	"compile.commands": "编译命令",
	"compile.commands.description": "工作区的 {0} 文件的完整路径。将使用在此文件中所发现的包含路径和定义，而不是为 {1} 和 {2} 设置设定的值。如果编译命令数据库不包含与你在编辑器中打开的文件对应的翻译单元条目，则将显示一条警告消息，并且扩展将改用 {3} 和 {4} 设置。",
	"merge.configurations": "合并配置",
	"merge.configurations.description": "如果为 {0} (或已选中)，则将包含路径、定义和强制包含与来自配置提供程序包含路径、定义和强制包含合并。",
	"browse.path": "浏览: 路径",
	"browse.path.description": "标记分析器的路径列表，它用于搜索源文件所包含的标头。如果省略，{0} 将用作 {1}。默认情况下，以递归方式搜索这些路径。指定 {2} 可指示非递归搜索。例如: {3} 将在所有子目录中搜索，而 {4} 不会。",
	"one.browse.path.per.line": "每行一个浏览路径。",
	"limit.symbols": "浏览: 将符号限制为包含的标头",
	"limit.symbols.checkbox": "如果为 {0} (或已勾选)，则标记分析器将仅分析在 {1} 中由源文件直接或间接包含的代码文件。如果为 {2} (或未选中)，标记分析器将分析在 {3} 列表内指定路径中找到的所有代码文件。",
	"database.filename": "浏览: 数据库文件名",
	"database.filename.description": "所生成的符号数据库的路径。这指示扩展将标记分析器的符号数据库保存在工作区默认存储位置以外的其他位置。如果指定了相对路径，则它将相对于工作区的默认存储位置(而不是工作区文件夹本身)。{0} 变量可用于指定相对于工作区文件夹的路径(例如 {1})。"
}