/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"c_cpp.subheaders.intelliSense.title": "IntelliSense",
	"c_cpp.subheaders.formatting.title": "格式化",
	"c_cpp.subheaders.codeDocumentation.title": "程式碼文件",
	"c_cpp.subheaders.codeAnalysis.title": "Code Analysis",
	"c_cpp.subheaders.debugging.title": "偵錯",
	"c_cpp.subheaders.resourceManagement.title": "資源管理",
	"c_cpp.subheaders.miscellaneous.title": "雜項",
	"c_cpp.capabilities.untrustedWorkspaces.description": "多個設定可能會導致執行工作區的處理序本機，例如 C_Cpp.clang_format_path、C_Cpp.codeAnalysis.clangTidy.path、C_Cpp.addNodeAddonIncludePaths、C_Cpp.default.compilerPath、C_Cpp.default.configurationProvider、C_Cpp.default.compileCommands，以及 c_cpp_properties.json 中的對等屬性。",
	"c_cpp.command.configurationSelect.title": "選取組態...",
	"c_cpp.command.configurationProviderSelect.title": "變更組態提供者...",
	"c_cpp.command.configurationEditJSON.title": "編輯組態 (JSON)",
	"c_cpp.command.configurationEditUI.title": "編輯組態 (UI)",
	"c_cpp.command.selectIntelliSenseConfiguration.title": "選取 IntelliSense 設定...",
	"c_cpp.command.installCompiler.title": "安裝 C++ 編譯器",
	"c_cpp.command.rescanCompilers.title": "掃描編譯器",
	"c_cpp.command.switchHeaderSource.title": "切換標頭/來源",
	"c_cpp.command.enableErrorSquiggles.title": "啟用錯誤波浪線",
	"c_cpp.command.disableErrorSquiggles.title": "停用錯誤波浪線",
	"c_cpp.command.toggleDimInactiveRegions.title": "切換非使用中的區域著色",
	"c_cpp.command.resetDatabase.title": "重設 IntelliSense 資料庫",
	"c_cpp.command.takeSurvey.title": "填寫問卷",
	"c_cpp.command.restartIntelliSenseForFile.title": "為使用中檔案重新啟動 IntelliSense",
	"c_cpp.command.logDiagnostics.title": "記錄診斷",
	"c_cpp.command.referencesViewGroupByType.title": "依參考型別分組",
	"c_cpp.command.referencesViewUngroupByType.title": "依參考型別取消分組",
	"c_cpp.command.rescanWorkspace.title": "重新掃描工作區",
	"c_cpp.command.vcpkgClipboardInstallSuggested.title": "將 vcpkg 安裝命令複製到剪貼簿",
	"c_cpp.command.vcpkgOnlineHelpSuggested.title": "瀏覽 vcpkg 說明頁面",
	"c_cpp.command.generateEditorConfig.title": "從 VC 格式設定產生 EditorConfig 內容",
	"c_cpp.command.GoToNextDirectiveInGroup.title": "前往條件式群組中的下一個前置處理器指示詞",
	"c_cpp.command.GoToPrevDirectiveInGroup.title": "前往條件式群組中的上一個前置處理器指示詞",
	"c_cpp.command.CreateDeclarationOrDefinition.title": "建立宣告/定義",
	"c_cpp.command.RunCodeAnalysisOnActiveFile.title": "在使用中檔案上執行程式碼分析",
	"c_cpp.command.RunCodeAnalysisOnOpenFiles.title": "在開啟檔案上執行程式碼分析",
	"c_cpp.command.RunCodeAnalysisOnAllFiles.title": "在所有檔案上執行程式碼分析",
	"c_cpp.command.RemoveAllCodeAnalysisProblems.title": "清除所有程式碼分析問題",
	"c_cpp.command.BuildAndDebugFile.title": "偵錯 C/C++ 檔案",
	"c_cpp.command.BuildAndRunFile.title": "執行 C/C++ 檔案",
	"c_cpp.command.AddDebugConfiguration.title": "新增偵錯組態",
	"c_cpp.command.GenerateDoxygenComment.title": "產生 Doxygen 註解",
	"c_cpp.command.addSshTarget.title": "新增 SSH 目標",
	"c_cpp.command.removeSshTarget.title": "移除 SSH 目標",
	"c_cpp.command.setActiveSshTarget.title": "將此 SSH 目標設定為使用中目標",
	"c_cpp.command.selectActiveSshTarget.title": "選取使用中的 SSH 目標",
	"c_cpp.command.selectSshTarget.title": "選取 SSH 目標",
	"c_cpp.command.activeSshTarget.title": "取得使用中的 SSH 目標",
	"c_cpp.command.refreshCppSshTargetsView.title": "重新整理",
	"c_cpp.command.sshTerminal.title": "連線至這個在新終端機中的 SSH 目標",
	"c_cpp.configuration.maxConcurrentThreads.markdownDescription": "用於語言服務處理的並行執行緒數目上限。該值是提示，且可能不會一律使用。預設的 `null` (空白) 會使用可用的邏輯處理器數目。",
	"c_cpp.configuration.maxCachedProcesses.markdownDescription": "用於語言服務處理的快取處理序數目上限。預設的 `null` (空白) 使用的邏輯處理器數目是可用邏輯處理器的兩倍。",
	"c_cpp.configuration.maxMemory.markdownDescription": "記憶體上限 (MB) 可供語言服務處理。超過此記憶體使用量之後，同時快取及執行的處理序將會減少。預設的 `null` (空白) 會使用系統的可用記憶體。",
	"c_cpp.configuration.maxSymbolSearchResults.markdownDescription": "「移至工作區中的符號」顯示的結果數目上限。預設為 `5000`。",
	"c_cpp.configuration.intelliSense.maxCachedProcesses.markdownDescription": "要繼續執行的 IntelliSense 處理序數目上限。預設的 `null` (空白) 會使用繼承自 `#C_Cpp.maxCachedProcesses#` 的值。",
	"c_cpp.configuration.intelliSense.maxMemory.markdownDescription": "超過此記憶體使用量 (MB) 後，較舊的 IntelliSense 處理序將會在建立新處理序之前先關閉。預設的 `null` (空白) 會使用繼承自 `#C_Cpp.maxMemory#` 的值。",
	"c_cpp.configuration.references.maxConcurrentThreads.markdownDescription": "用於「尋找所有參考」與「重新命名」的並行執行緒數目上限。預設的 `null` (空白) 會使用繼承自 `#C_Cpp.maxConcurrentThreads#` 的值。",
	"c_cpp.configuration.references.maxCachedProcesses.markdownDescription": "「尋找所有參考」與「重新命名」在記憶體中保留的處理序數目上限。預設值 `0` 將停用此功能。`null` (空白) 的值會使用繼承自 `#C_Cpp.maxCachedProcesses#` 的值。",
	"c_cpp.configuration.references.maxMemory.markdownDescription": "超過此記憶體使用量 (MB) 之後，同時快取及執行的「尋找所有參考」與「重新命名」處理序將會減少。預設的 `null` (空白) 會使用繼承自 `#C_Cpp.maxMemory#` 的值。",
	"c_cpp.configuration.codeAnalysis.maxConcurrentThreads.markdownDescription": "用於程式碼分析的同時執行緒數目上限。預設的 `null` (空白) 會使用繼承自 `#C_Cpp.maxConcurrentThreads#` 的值。",
	"c_cpp.configuration.codeAnalysis.maxMemory.markdownDescription": "超過此記憶體使用量 (MB) 之後，同時執行的程式碼分析處理序將會減少。預設的 `null` (空白) 會使用繼承自 `#C_Cpp.maxMemory#` 的值。",
	"c_cpp.configuration.codeAnalysis.updateDelay.markdownDescription": "當 `#files.autoSave#` 為 `afterDelay` 且 `#C_Cpp.codeAnalysis.runAutomatically#` 為 `true` 時，控制從編輯觸發儲存之後，程式碼分析開始處理之前的延遲 (毫秒)。",
	"c_cpp.configuration.codeAnalysis.exclude.markdownDescription": "設定 Glob 模式以排除用於程式碼分析的資料夾與檔案。不在工作區資料夾之下的檔案將一律排除。從 `#files.exclude#` 與 `#C_Cpp.files.exclude#` 繼承值。深入了解 [Glob 模式](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options)。",
	"c_cpp.configuration.codeAnalysis.excludeBoolean.markdownDescription": "要符合檔案路徑的 Glob 模式。設為 `true` 或 `false` 可啟用或停用模式。",
	"c_cpp.configuration.codeAnalysis.excludeWhen.markdownDescription": "對相符檔案同層級進行額外檢查。請使用 `$(basename)` 作為相符檔案名稱的變數。",
	"c_cpp.configuration.codeAnalysis.runAutomatically.markdownDescription": "若為 `true`，則程式碼分析將會在檔案開啟或儲存之後，自動在該檔案上執行。",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showDisable.markdownDescription": "如果為`true`，則在可用時 (下次執行程式碼分析時)，將會顯示 '停用' 程式碼動作。使用 '停用' 程式碼動作時，它會將警告碼新增到 `C_Cpp.codeAnalysis.clangTidy.checks.disabled` 設定。",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showDocumentation.markdownDescription": "如果為 `true`，則在可用時 (下次執行程式碼分析時)，將會顯示 '顯示的文件' 程式碼動作。",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.description": "控制可使用哪些 '清除' 程式碼分析問題程式碼動作選項。變更設定以顯示更多選項可能需要重新執行程式碼分析。",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.None.description": "不顯示 '清除' 程式碼動作。",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.AllOnly.description": "如果只有一種類型，則只顯示 '清除所有' 程式碼動作 (如果只有一種類型，則顯示 '清除所有 <type>，或如果只有一個問題，則顯示 '清除此')。",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.AllAndAllType.description": "顯示 '清除所有' 程式碼動作 (如果有多種問題類型) 和 '清除所有 <type>' 程式碼動作 (如果 <type> 只有一個問題，則顯示 '清除此')",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.AllAndAllTypeAndThis.description": "顯示 '清除所有' (如果有多個問題類型)、'清除所有 <type>' (如果 <type> 有多個問題) 和 '清除此' 程式碼動作",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.formatFixes.markdownDescription": "如果為 `true`，格式就會在由「修正」程式碼動作變更的行上執行。",
	"c_cpp.configuration.codeAnalysis.clangTidy.enabled.markdownDescription": "若為 `true`，會啟用使用 `clang-tidy` 的程式碼分析，並會在 `#C_Cpp.codeAnalysis.runAutomatically#` 為 `true` (預設) 時，在開啟或儲存檔案後執行。",
	"c_cpp.configuration.codeAnalysis.clangTidy.path.markdownDescription": "`clang-tidy` 可執行檔的完整路徑。若未指定可執行檔，且可在環境路徑中使用 `clang-tidy`，則會加以使用。若在環境路徑中找不到可執行檔，則會使用與延伸模組搭配的 `clang-tidy`。",
	"c_cpp.configuration.codeAnalysis.clangTidy.config.markdownDescription": "以 YAML/JSON 格式指定 `clang-tidy` 組態: `{Checks: '-*,clang-analyzer-*', CheckOptions: [{索引鍵: x, 值: y}]}`。當值為空白時，`clang-tidy` 將會嘗試為其父目錄中的每個來源檔案尋找名為 `.clang-tidy` 的檔案。",
	"c_cpp.configuration.codeAnalysis.clangTidy.fallbackConfig.markdownDescription": "當 `#C_Cpp.codeAnalysis.clangTidy.config#` 未設定且找不到 `.clang-tidy` 檔案時，指定 YAML/JSON 格式的 `clang-tidy` 組態用作遞補: `{Checks: '-*,clang-analyzer-*', CheckOptions: [{索引鍵: x, 值: y}]}`。",
	"c_cpp.configuration.codeAnalysis.clangTidy.headerFilter.markdownDescription": "符合輸出診斷來源之標頭名稱的 POSIX 擴充規則運算式 (ERE)。來自每個編譯單位之主要檔案的診斷將一律顯示。支援 `${workspaceFolder}` 變數 (如果沒有 `.clang-tidy` 檔案，則作為預設後援值)。若此選項並非 `null` (空白)，則會覆寫 `.clang-tidy` 檔案中的 `HeaderFilterRegex` 選項 (如果有的話)。",
	"c_cpp.configuration.codeAnalysis.clangTidy.args.markdownDescription": "要傳遞給 `clang-tidy` 的其他命令列引數。這些命令列引數會比對等的 `C_Cpp.codeAnalysis.clangTidy.*` 設定優先考慮。",
	"c_cpp.configuration.codeAnalysis.clangTidy.useBuildPath.markdownDescription": "如果設定了 `true` 和 `compileCommands`，則 `-p=<build-path>` 引數會傳遞至 `clang-tidy`，而非在 `--` 之後傳遞組建引數。若未設定環境變數以找到系統包含的環境變數，可能無法運作。",
	"c_cpp.configuration.codeAnalysis.clangTidy.checks.enabled.markdownDescription": "已啟用的 `clang-tidy` 檢查清單。值會附加到 `.clang-tidy` 檔案中的 `Checks` 或 `#C_Cpp.codeAnalysis.clangTidy.config#` (如果有的話)。除非明確地停用，否則一律使用預設檢查 `clang-analyzer-*`。",
	"c_cpp.configuration.codeAnalysis.clangTidy.checks.disabled.markdownDescription": "已停用的 `clang-tidy` 檢查清單。值會附加到 `.clang-tidy` 檔案中的 `Checks` 或 `#C_Cpp.codeAnalysis.clangTidy.config#` (如果有的話)。",
	"c_cpp.configuration.formatting.description": "選擇格式設定引擎。",
	"c_cpp.configuration.formatting.clangFormat.markdownDescription": "將使用 `clang-format` 來格式化程式碼。",
	"c_cpp.configuration.formatting.vcFormat.markdownDescription": "將使用 Visual C++ 格式化引擎來格式化程式碼。",
	"c_cpp.configuration.formatting.Default.markdownDescription": "根據預設，會使用 `clang-format` 將程式碼格式化。不過，如果具有相關設定之 `.editorconfig` 檔案更接近要格式化的程式碼，且 `#C_Cpp.clang_format_style#` 為預設值 `file`，則將會使用 Visual C++ 格式引擎。",
	"c_cpp.configuration.formatting.Disabled.markdownDescription": "將停用程式碼格式化。",
	"c_cpp.configuration.vcFormat.indent.braces.markdownDescription": "大括弧會依據 `#editor.tabSize#` 設定中指定的數量縮排。",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.description": "決定新縮排相對於。",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.outermostParenthesis.description": "相對於最外層的左括弧，縮排新行。",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.innermostParenthesis.description": "相對於最內層的左括弧，縮排新行。",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.statementBegin.description": "相對於目前陳述式的開頭，縮排新行。",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.markdownDescription": "鍵入新行時，新行會對齊左括弧或依 `#C_Cpp.vcFormat.indent.multiLineRelativeTo#` 對齊。",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.alignToParenthesis.markdownDescription": "將新行對齊在左括弧下。",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.indent.markdownDescription": "新行會依據 `#C_Cpp.vcFormat.indent.multiLineRelativeTo#` 縮排。",
	"c_cpp.configuration.vcFormat.indent.preserveWithinParentheses.description": "在現有程式碼中，將新行的現有縮排對齊保留在括弧內。",
	"c_cpp.configuration.vcFormat.indent.caseLabels.markdownDescription": "標籤會依據 `#editor.tabSize#` 設定中指定的數量，按照 switch 陳述式的相對位置縮排。",
	"c_cpp.configuration.vcFormat.indent.caseContents.markdownDescription": "`case` 區塊中的程式碼，會依據 `#editor.tabSize#` 設定中指定的數量，按照其標籤的相對位置縮排。",
	"c_cpp.configuration.vcFormat.indent.caseContentsWhenBlock.markdownDescription": "使用 `#editor.tabSize#` 設定中指定的數量，在案例陳述式後面縮排大括弧。",
	"c_cpp.configuration.vcFormat.indent.lambdaBracesWhenParameter.markdownDescription": "使用 `#editor.tabSize#` 設定中指定的數量，按照陳述式開頭的相對位置，縮排用為函式參數的 Lambdas 大括弧。",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.description": "goto 標籤的位置。",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.oneLeft.markdownDescription": "依據 `#editor.tabSize#` 設定中指定的數量，將 goto 標籤定位在目前程式碼縮排的左側。",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.leftmostColumn.markdownDescription": "將 goto 標籤固定在程式碼的最左側。",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.none.markdownDescription": "將不會格式化 goto 標籤。",
	"c_cpp.configuration.vcFormat.indent.preprocessor.description": "前置處理器指示詞的位置。",
	"c_cpp.configuration.vcFormat.indent.preprocessor.oneLeft.markdownDescription": "前置處理器指令會以 `#editor.tabSize#` 設定中指定的數量，定位於目前程式碼縮排的左邊。",
	"c_cpp.configuration.vcFormat.indent.preprocessor.leftmostColumn.markdownDescription": "前置處理器指示詞位於程式碼的最左側。",
	"c_cpp.configuration.vcFormat.indent.preprocessor.none.markdownDescription": "將不會格式化前置處理器指示詞。",
	"c_cpp.configuration.vcFormat.indent.accessSpecifiers.markdownDescription": "存取指定名稱會依據 `#editor.tabSize#` 設定中指定的數量，按照類別或結構定義的相對位置縮排。",
	"c_cpp.configuration.vcFormat.indent.namespaceContents.markdownDescription": "程式碼會以 `#editor.tabSize#` 設定中指定的數量，相對於其包含的命名空間縮排。",
	"c_cpp.configuration.vcFormat.indent.preserveComments.description": "格式化作業期間，註解的縮排未變更。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.namespace.description": "命名空間之左大括弧的位置。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.type.description": "型別定義之左大括弧的位置。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.lambda.description": "Lambda 函式之左大括弧的位置。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.function.description": "函式之左大括弧的位置。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.block.description": "控制區塊之左大括弧的位置。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.newLine.description": "將左大括號移至新行。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.sameLine.description": "將左大括號保持在同一行，並在每個左大括號前加入一個空格。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.ignore.description": "左大括號未格式化。",
	"c_cpp.configuration.vcFormat.newLine.scopeBracesOnSeparateLines.description": "將範圍的左大括號與右大括號置於不同行。",
	"c_cpp.configuration.vcFormat.newLine.closeBraceSameLine.emptyType.description": "若是空的類型，會將右大括號移至與左大括號同一行。",
	"c_cpp.configuration.vcFormat.newLine.closeBraceSameLine.emptyFunction.description": "若是空的函式主體，會將右大括號移至與左大括號同一行。",
	"c_cpp.configuration.vcFormat.newLine.beforeCatch.markdownDescription": "將 `catch` 和類似的關鍵字放在新行。",
	"c_cpp.configuration.vcFormat.newLine.beforeElse.markdownDescription": "將 `else` 置於新行。",
	"c_cpp.configuration.vcFormat.newLine.beforeWhileInDoWhile.markdownDescription": "將 `do`-`while` 迴圈中的 `while` 置於新行。",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.description": "在引數清單中的函式名稱與左括弧之間新增空格。",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.insert.description": "在函式的左括弧前，加入一個空格。",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.remove.description": "已移除函式左括號之前的空格。",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.ignore.description": "將空格保持輸入的狀態。",
	"c_cpp.configuration.vcFormat.space.withinParameterListParentheses.description": "在函式參數清單的左括弧後與右括弧前，加入一個空格。",
	"c_cpp.configuration.vcFormat.space.betweenEmptyParameterListParentheses.description": "若函式參數清單是空的，則在其括弧之間插入空格。",
	"c_cpp.configuration.vcFormat.space.afterKeywordsInControlFlowStatements.description": "在控制流程陳述式的關鍵字與左括弧之間，加入一個空格。",
	"c_cpp.configuration.vcFormat.space.withinControlFlowStatementParentheses.description": "在控制流程陳述式的左括弧後與右括弧前，加入一個空格。",
	"c_cpp.configuration.vcFormat.space.beforeLambdaOpenParenthesis.description": "在 Lambda 引數清單的左括弧前，加入一個空格。",
	"c_cpp.configuration.vcFormat.space.withinCastParentheses.description": "在 C-style 轉換的左括弧後與右括弧前，加入一個空格。",
	"c_cpp.configuration.vcFormat.space.afterCastCloseParenthesis.description": "在 C-Style 轉換的右括弧後，加入一個空格。",
	"c_cpp.configuration.vcFormat.space.withinExpressionParentheses.description": "在括有括弧之運算式的左括弧後與右括弧前，加入一個空格。",
	"c_cpp.configuration.vcFormat.space.beforeBlockOpenBrace.description": "在範圍區塊的左大括號前，加入一個空格。",
	"c_cpp.configuration.vcFormat.space.betweenEmptyBraces.description": "若同一行的大括號是空的，在其間插入空格。",
	"c_cpp.configuration.vcFormat.space.beforeInitializerListOpenBrace.description": "在統一初始設定與初始設定清單的左大括號前，加入一個空格。",
	"c_cpp.configuration.vcFormat.space.withinInitializerListBraces.description": "在統一初始設定與初始設定清單的左大括號後以及右大括號前，加入一個空格。",
	"c_cpp.configuration.vcFormat.space.preserveInInitializerList.description": "統一初始設定與初始設定清單內，逗號前後會保留空格。",
	"c_cpp.configuration.vcFormat.space.beforeOpenSquareBracket.description": "在左方括號前面加入空格。",
	"c_cpp.configuration.vcFormat.space.withinSquareBrackets.description": "在左方括號後面和右方括號前面加入空格。",
	"c_cpp.configuration.vcFormat.space.beforeEmptySquareBrackets.description": "如果方括號空白，在左方括號前面加入空格。",
	"c_cpp.configuration.vcFormat.space.betweenEmptySquareBrackets.description": "如果方括號空白，在方括號之間插入空格。",
	"c_cpp.configuration.vcFormat.space.groupSquareBrackets.description": "針對多維陣列，移除方括號間的所有空格。覆寫其他控制空格的設定。",
	"c_cpp.configuration.vcFormat.space.withinLambdaBrackets.description": "在左方括號後面和右方括號前面加入空格。",
	"c_cpp.configuration.vcFormat.space.betweenEmptyLambdaBrackets.description": "如果方括號空白，在方括號之間插入空格。",
	"c_cpp.configuration.vcFormat.space.beforeComma.description": "在每一個逗號前面加入空格。",
	"c_cpp.configuration.vcFormat.space.afterComma.description": "在每一個逗號後面加入空格。",
	"c_cpp.configuration.vcFormat.space.removeAroundMemberOperators.description": "移除成員存取運算子、成員指標運算子與範圍解析運算子前後的空格。",
	"c_cpp.configuration.vcFormat.space.beforeInheritanceColon.description": "在類別定義中，繼承而來類型的冒號前，加入一個空格。",
	"c_cpp.configuration.vcFormat.space.beforeConstructorColon.description": "在建構函式定義的冒號前，加入一個空格。",
	"c_cpp.configuration.vcFormat.space.removeBeforeSemicolon.description": "移除每一個分號前的空格。",
	"c_cpp.configuration.vcFormat.space.insertAfterSemicolon.description": "在每個分號之後，插入一個空格。",
	"c_cpp.configuration.vcFormat.space.removeAroundUnaryOperator.description": "移除一元運算子與運算元之間的空格。",
	"c_cpp.configuration.vcFormat.space.aroundBinaryOperator.description": "二元運算子前後的空格。",
	"c_cpp.configuration.vcFormat.space.aroundAssignmentOperator.description": "指派運算子前後的空格。",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.description": "在指標與參考運算子前後新增空格。",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.left.description": "指標與參考運算子靠左對齊。",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.center.description": "指標與參考運算子置中。",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.right.description": "指標與參考運算子靠右對齊。",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.ignore.description": "指標與參考運算子未格式化。",
	"c_cpp.configuration.vcFormat.space.aroundTernaryOperator.description": "條件運算子前後的空格。",
	"c_cpp.configuration.vcFormat.space.aroundOperators.insert.description": "在運算子的前後都加入空格。",
	"c_cpp.configuration.vcFormat.space.aroundOperators.remove.description": "移除運算子前後的空格。",
	"c_cpp.configuration.vcFormat.space.aroundOperators.ignore.description": "將空格保持輸入的狀態。",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.description": "區塊的換行選項。",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.oneLiners.markdownDescription": "在一行中所輸入的完整程式碼區塊都保留在同一行，而不考慮任何 `C_Cpp.vcFormat.newLine.*` 設定。",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.allOneLineScopes.markdownDescription": "在一行中所輸入由左大括號和右大括號括住的任何程式碼，都保留在同一行，而不考慮任何 `C_Cpp.vcFormat.newLine.*` 設定。",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.never.markdownDescription": "程式碼區塊一律根據 `C_Cpp.vcFormat.newLine.*` 設定的值來格式化。",
	"c_cpp.configuration.clang_format_path.markdownDescription": "此為 `clang-format` 可執行檔的完整路徑。如果未指定，且在環境路徑中可用 `clang-format`，即會使用該格式。如果在環境路徑中找不到，則會使用延伸模組所配備的 `clang-format`。",
	"c_cpp.configuration.clang_format_style.markdownDescription": "編碼樣式，目前支援: `Visual Studio`、`LLVM`、`Google`、`Chromium`、`Mozilla`、`WebKit`、`Microsoft`、`GNU`。使用 `file` 可從目前目錄或父目錄的 `.clang-format` 檔案載入樣式，或使用 `file:<路徑>/.clang-format` 參照特定路徑。使用 `{索引鍵: 值, ...}` 可設定特定參數。例如，`Visual Studio` 樣式類似於: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`。",
	"c_cpp.configuration.clang_format_fallbackStyle.markdownDescription": "當已使用樣式 `file` 叫用 `clang-format`，但找不到 `.clang-format` 檔案時，用作後援的預先定義樣式名稱。可能的值包括 `Visual Studio`、`LLVM`、`Google`、`Chromium`、`Mozilla`、`WebKit`、`Microsoft`、`GNU`、`none` 或使用 `{索引鍵: 值, ...}` 來設定特定參數。例如，`Visual Studio` 樣式類似於: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`。",
	"c_cpp.configuration.clang_format_sortIncludes.markdownDescription": "若設定，會覆寫 `SortIncludes` 參數所決定的包含排序行為。",
	"c_cpp.configuration.intelliSenseEngine.description": "控制 IntelliSense 提供者。",
	"c_cpp.configuration.intelliSenseEngine.default.description": "透過單獨的 IntelliSense 處理序提供內容感知結果。",
	"c_cpp.configuration.intelliSenseEngine.tagParser.description": "提供不屬於內容意識的 `模糊` 結果。",
	"c_cpp.configuration.intelliSenseEngine.disabled.description": "關閉 C/C++ 語言服務功能。",
	"c_cpp.configuration.autocomplete.markdownDescription": "控制自動完成提供者。若設為 `disabled` 且您想要以文字方式完成，您也必須設定 `\"[cpp]\": {\"editor.wordBasedSuggestions\": <value>}` (且 `c` 及 `cuda-cpp` 語言也相同)。",
	"c_cpp.configuration.autocomplete.default.description": "使用作用中 IntelliSense 引擎。",
	"c_cpp.configuration.autocomplete.disabled.description": "使用 Visual Studio Code 所提供的文字型完成。",
	"c_cpp.configuration.errorSquiggles.description": "該設定會控制是否將 IntelliSense 引擎偵測到的可疑編譯錯誤回報給編輯器。其也會在找不到內容時，控制是否回報程式碼分析警告。標籤剖析器引擎已忽略此設定。",
	"c_cpp.configuration.dimInactiveRegions.description": "控制非作用中前置處理器區塊的色彩是否與作用中程式碼不同。如果 IntelliSense 停用或使用預設高對比佈景主題，則此設定沒有效果。",
	"c_cpp.configuration.inactiveRegionOpacity.markdownDescription": "控制非作用中前置處理器區塊的不透明度。在 `0.1` 與 `1.0` 之間縮放。只有在啟用非作用中區域變暗時，才會套用此設定。",
	"c_cpp.configuration.inactiveRegionForegroundColor.description": "控制非作用中前置處理器區塊的前景色彩。輸入的格式為十六進位色彩代碼或有效的佈景主題色彩。若未設定，會預設為編輯器的語法著色配置。只有在啟用非作用中區域變暗時，才會套用此設定。",
	"c_cpp.configuration.inactiveRegionBackgroundColor.description": "控制非作用中前置處理器區塊的背景色彩。輸入的格式為十六進位色彩代碼或有效的佈景主題色彩。若未設定，會預設為透明。只有在啟用非作用中區域變暗時，才會套用此設定。",
	"c_cpp.configuration.inlayHints.autoDeclarationTypes.enabled.markdownDescription": "宣告中使用 `auto` 時，顯示推算類型的內嵌提示:\n```cpp \n\n auto index /* : int */ = 0;\n```",
	"c_cpp.configuration.inlayHints.autoDeclarationTypes.showOnLeft.markdownDescription": "在識別碼左側的宣告中使用 `auto` 時，顯示推算類型的內嵌提示:\n```cpp \n\n auto /* int */ index = 0;\n```",
	"c_cpp.configuration.inlayHints.parameterNames.enabled.markdownDescription": "顯示參數名稱的內嵌提示:\n```cpp \n\n int a = getArea(/* width: */ x, /* height: */ y);\n```",
	"c_cpp.configuration.inlayHints.parameterNames.hideLeadingUnderscores.markdownDescription": "隱藏參數名稱提示中的前置 `_`。",
	"c_cpp.configuration.inlayHints.parameterNames.suppressWhenArgumentContainsName.markdownDescription": "當引數文字或內嵌註解包含參數名稱時，隱藏參數名稱提示:\n```cpp \n\n int a = getArea(width, /* height: */ y);\n```",
	"c_cpp.configuration.inlayHints.referenceOperator.enabled.markdownDescription": "顯示非 const 參照所傳遞之參數的內嵌提示參照運算子 `&`:\n```cpp \n\n swap(/* &first: */ str1, /* &last: */ str2);\n```",
	"c_cpp.configuration.inlayHints.referenceOperator.showSpace.markdownDescription": "控制是否針對非 const 參照所傳遞的參數在 `&` 之後顯示空格:\n```cpp \n\n swap(/* & first: */ str1, /* & last: */ str2);\n```",
	"c_cpp.configuration.loggingLevel.markdownDescription": "輸出面板中記錄的詳細程度。從最不詳細到最詳細的層級順序為: `None` < `Error` < `Warning` < `Information` < `Debug`。",
	"c_cpp.configuration.autoAddFileAssociations.markdownDescription": "控制是否會在檔案為 C/C++ 檔案的瀏覽作業目標時，自動將檔案新增至 `#files.associations#`。",
	"c_cpp.configuration.workspaceParsingPriority.markdownDescription": "控制非作用中工作區檔案的剖析是否會使用睡眠來避免使用 100% 的 CPU。值 `highest`/`high`/`medium`/`low` 會約略對應至 100/75/50/25% CPU 使用率。",
	"c_cpp.configuration.workspaceSymbols.description": "叫用 [前往工作區中的符號] 時，要包含在查詢結果中的符號。",
	"c_cpp.configuration.exclusionPolicy.markdownDescription": "在流覽 `browse.path` 陣列中的路徑並決定哪些檔案應新增至程式碼瀏覽資料庫時，指示延伸模組何時使用 `#files.exclude#` (和 `#C_Cpp.files.exclude#`) 設定。如果您的 `#files.exclude#` 設定只包含資料夾，則 `checkFolders` 是最佳選擇，而且會加快延伸模組初始化程式碼瀏覽資料庫的速度。",
	"c_cpp.configuration.exclusionPolicy.checkFolders.description": "排除篩選每個資料夾只會評估一次 (不會檢查個別檔案)。",
	"c_cpp.configuration.exclusionPolicy.checkFilesAndFolders.description": "將會針對每個遇到的檔案和資料夾評估排除篩選。",
	"c_cpp.configuration.preferredPathSeparator.markdownDescription": "用作 `#include` 自動完成結果路徑分隔符號的字元。",
	"c_cpp.configuration.simplifyStructuredComments.markdownDescription": "若為 `true`，暫留與自動完成的工具提示只會顯示特定結構化註解標籤，否則將會顯示所有註解。",
	"c_cpp.configuration.doxygen.generateOnType.description": "控制是否在輸入選擇的註解樣式後自動插入 Doxygen 註解。",
	"c_cpp.configuration.doxygen.generatedStyle.description": "作為 Doxygen 註解起始行的字元字串。",
	"c_cpp.configuration.doxygen.sectionTags.description": "選取啟用 [簡化結構化註解] 設定時，要在於工具提示區域暫留時顯示的 [Doxygen] 區段標籤。 ",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.string.markdownDescription": "開始多行或單行註解區塊的模式。對於多行註解區塊，接續模式預設為 ` * `，或此字串表示單行註解區塊。",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.begin.description": "開始多行或單行註解區塊的模式。",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.continue.description": "在多行或單行註解區塊中按下 ENTER 時，將在下一行插入的文字。",
	"c_cpp.configuration.commentContinuationPatterns.description": "定義在多行或單行註解區塊按下 ENTER 的編輯器行為。",
	"c_cpp.configuration.configurationWarnings.description": "決定當組態提供者延伸模組無法提供來源檔案的組態時，是否會顯示快顯通知。",
	"c_cpp.configuration.intelliSenseCachePath.markdownDescription": "定義 IntelliSense 使用之快取先行編譯標頭檔的資料夾路徑。預設快取路徑在 Windows 上為 `%LocalAppData%/Microsoft/vscode-cpptools`，在 Linux 上為 `$XDG_CACHE_HOME/vscode-cpptools/` (若未定義 `XDG_CACHE_HOME`，則為 `$HOME/.cache/vscode-cpptools/`)，在 macOS 上則為 `$HOME/Library/Caches/vscode-cpptools/`。如果未指定路徑或指定的路徑無效，就會使用預設路徑。",
	"c_cpp.configuration.intelliSenseCacheSize.markdownDescription": "快取之先行編譯標頭檔可使用的每個工作區硬碟空間大小上限 (MB); 實際使用量會在此值附近波動。預設大小為 `5120` MB。若大小為 `0`，將會停用先行編譯標頭檔快取。",
	"c_cpp.configuration.intelliSenseMemoryLimit.markdownDescription": "IntelliSense 流程的記憶體使用量上限 (MB)。預設值為 `4096`，最大值為 `16384`。當超過此限制時，延伸模組將會關閉並重新啟動 IntelliSense 流程。",
	"c_cpp.configuration.intelliSenseUpdateDelay.description": "控制 IntelliSense 在修改之後，開始更新前的延遲 (毫秒)。",
	"c_cpp.configuration.default.includePath.markdownDescription": "在 `c_cpp_properties.json` 中未指定 `includePath` 時，要在設定中使用的值。如果指定了 `includePath`，請將 `${default}` 新增至陣列，以插入此設定的值。通常不應包含系統 include; 請改為設定 `#C_Cpp compilerPath#`。",
	"c_cpp.configuration.default.defines.markdownDescription": "當 `defines` 未指定時，要在設定中使用的值，或 `defines` 中有 `${default}` 時要插入的值。",
	"c_cpp.configuration.default.macFrameworkPath.markdownDescription": "當 `macFrameworkPath` 未指定時，要在設定中使用的值，或 `macFrameworkPath` 中有 `${default}` 時要插入的值。",
	"c_cpp.configuration.default.windowsSdkVersion.markdownDescription": "要在 Windows 上使用的 Windows SDK 包含路徑版本，例如 `10.0.17134.0`。",
	"c_cpp.configuration.default.compileCommands.markdownDescription": "當 `compileCommands` 未指定或設定為 `${default}` 時，要在組態中使用的值。",
	"c_cpp.configuration.default.forcedInclude.markdownDescription": "當 `forcedInclude` 未指定時，要在設定中使用的值，或 `forcedInclude` 中有 `${default}` 時要插入的值。",
	"c_cpp.configuration.default.intelliSenseMode.markdownDescription": "當 `intelliSenseMode` 未指定或設定為 `${default}` 時，要在組態中使用的值。",
	"c_cpp.configuration.default.compilerPath.markdownDescription": "當 `compilerPath` 未指定或設定為 `${default}` 時，要在組態中使用的值。",
	"c_cpp.configuration.default.compilerArgs.markdownDescription": "當 `compilerArgs` 未指定或設定為 `${default}` 時，要在組態中使用的值。",
	"c_cpp.configuration.default.cStandard.markdownDescription": "當 `cStandard` 未指定或設定為 `${default}` 時，要在組態中使用的值。",
	"c_cpp.configuration.default.cppStandard.markdownDescription": "當 `cppStandard` 未指定或設定為 `${default}` 時，要在組態中使用的值。",
	"c_cpp.configuration.default.configurationProvider.markdownDescription": "當 `configurationProvider` 未指定或設定為 `${default}` 時，要在組態中使用的值。",
	"c_cpp.configuration.default.mergeConfigurations.markdownDescription": "設定為 `true` 以合併包含路徑、定義和強制包含來自設定提供者的路徑。",
	"c_cpp.configuration.default.browse.path.markdownDescription": "當 `browse.path` 未指定時，要在設定中使用的值，或 `browse.path` 中有 `${default}` 時要插入的值。",
	"c_cpp.configuration.default.browse.databaseFilename.markdownDescription": "當 `browse.databaseFilename` 未指定或設定為 `${default}` 時，要在組態中使用的值。",
	"c_cpp.configuration.default.browse.limitSymbolsToIncludedHeaders.markdownDescription": "當 `browse.limitSymbolsToIncludedHeaders` 未指定或設定為 `${default}` 時，要在組態中使用的值。",
	"c_cpp.configuration.default.systemIncludePath.markdownDescription": "要用於系統包含路徑的值。若設定，會覆寫透過 `compilerPath` 和 `compileCommands` 設定所取得的系統包含路徑。",
	"c_cpp.configuration.default.enableConfigurationSquiggles.markdownDescription": "控制延伸模組是否會回報 `c_cpp_properties.json` 中偵測到的錯誤。",
	"c_cpp.configuration.default.customConfigurationVariables.markdownDescription": "當未設定 `customConfigurationVariables` 時要在組態中使用的值，或當 `${default}` 在 `customConfigurationVariables` 中顯示為索引鍵時要插入的值。",
	"c_cpp.configuration.updateChannel.markdownDescription": "設定為 `Insiders` 以自動下載並安裝最新的延伸模組測試人員組建，其中包括即將推出的功能和錯誤修正。",
	"c_cpp.configuration.updateChannel.deprecationMessage": "此設定已過時。發行前版本擴充功能現在可透過 Marketplace 取得。",
	"c_cpp.configuration.default.dotConfig.markdownDescription": "當 `dotConfig` 未指定時，要在設定中使用的值，或 `dotConfig` 中有 `${default}` 時要插入的值。",
	"c_cpp.configuration.experimentalFeatures.description": "控制「實驗性」功能是否可用。",
	"c_cpp.configuration.suggestSnippets.markdownDescription": "若為 `true`，則由語言伺服器提供程式碼片段。",
	"c_cpp.configuration.caseSensitiveFileSupport.markdownDescription": "如果設定為 `default`，則工作區的檔案系統會在 Windows 上假設為不區分大小寫，而在 macOS 或 Linux 上區分大小寫。如果設為 `enabled`，則工作區的檔案系統在 Windows 上會假設為區分大小寫。",
	"c_cpp.configuration.enhancedColorization.markdownDescription": "若啟用，將會依據 IntelliSense 顯示彩色的程式碼。僅當 `#C_Cpp.intelliSenseEngine#` 設為 `default` 時，才適用此設定。",
	"c_cpp.configuration.codeFolding.description": "若啟用，則由語言伺服器提供程式碼摺疊功能範圍。",
	"c_cpp.configuration.markdownInComments.description": "選取是否可在暫留工具提示中使用 Markdown。根據預設，只會將 Markdown 子集套用至暫留工具提示中的註解。",
	"c_cpp.configuration.markdownInComments.subsetEnabled.description": "啟用暫留工具提示中的所有 Markdown 功能，但包含 '_' 和 '*' 字元的功能除外。",
	"c_cpp.configuration.markdownInComments.enabled.description": "啟用暫留工具提示中的所有 Markdown 功能。",
	"c_cpp.configuration.markdownInComments.disabled.description": "停用暫留工具提示中的所有 Markdown 功能。",
	"c_cpp.configuration.hover.description": "如果停用，語言伺服器將不再提供暫留詳細資料。",
	"c_cpp.configuration.vcpkg.enabled.markdownDescription": "啟用 [vcpkg 相依性管理員](https://aka.ms/vcpkg/) 的整合服務。",
	"c_cpp.configuration.addNodeAddonIncludePaths.markdownDescription": "當 `nan` 和 `node-addon-api` 為相依性時，從中新增 include 路徑。",
	"c_cpp.configuration.renameRequiresIdentifier.markdownDescription": "若為 `true`，則「重新命名符號」需要有效的 C/C++ 識別碼。",
	"c_cpp.configuration.autocompleteAddParentheses.markdownDescription": "若為 `true`，自動完成將會在函式呼叫之後自動新增 `(`，在這種情況下也可能會新增 `)`，取決於 `editor.autoClosingBrackets` 設定的值。",
	"c_cpp.configuration.filesExclude.markdownDescription": "設定 Glob 模式以排除資料夾 (若變更 `#C_Cpp.exclusionPolicy#`，則也會排除檔案)。這些模式為 C/C++ 延伸模組所特有，且是對 `#files.exclude#` 的外加，但與 `#files.exclude#` 不同的是，它們也適用於目前工作區資料夾以外的路徑，並且不會將其從總管檢視中移除。深入了解 [Glob 模式](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options)。",
	"c_cpp.configuration.filesExcludeBoolean.markdownDescription": "要符合檔案路徑的 Glob 模式。設為 `true` 或 `false` 可啟用或停用模式。",
	"c_cpp.configuration.filesExcludeWhen.markdownDescription": "對相符檔案同層級進行額外檢查。請使用 `$(basename)` 作為相符檔案名稱的變數。",
	"c_cpp.configuration.debugger.useBacktickCommandSubstitution.markdownDescription": "若為 `true`，偵錯工具殼層命令替代將會使用已淘汰的反引號 ``(`)``。",
	"c_cpp.configuration.legacyCompilerArgsBehavior.markdownDescription": "啟用 v1.10.0 之前的行為，以了解如何在編譯器自參數設定中處理殼層逸出。自 v1.10.0 開始，引數陣列中不再預期或預設支援殼層逸出。",
	"c_cpp.configuration.legacyCompilerArgsBehavior.deprecationMessage": "此設定是暫時性的，可支援轉換至 v1.10.0 中的更正行為。",
	"c_cpp.configuration.sshTargetsView.description": "控制是否顯示 SSH 目標檢視。根據預設，在叫用 SSH 命令時會啟用該檢視。",
	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: 其他參考結果",
	"c_cpp.contributes.views.sshTargetsView.title": "Cpptools: SSH 目標",
	"c_cpp.contributes.viewsWelcome.contents": "如需深入了解 launch.json，請參閱 [設定 C/C++ 偵錯](https://code.visualstudio.com/docs/cpp/launch-json-reference)。",
	"c_cpp.configuration.debugShortcut.description": "在 C++ 檔案的編輯器標題列中顯示 [執行及偵錯] 播放按鈕和 [新增偵錯組態] 齒輪。",
	"c_cpp.debuggers.pipeTransport.description": "出現時，會指示偵錯工具使用另一個可執行檔來連線至遠端電腦，該管道會在 VS Code 與 MI 啟用偵錯工具後端可執行檔之間傳送標準輸入/輸出 (例如 gdb)。",
	"c_cpp.debuggers.pipeTransport.default.pipeProgram": "輸入管道程式名稱的完整路徑，例如 '/usr/bin/ssh'。",
	"c_cpp.debuggers.pipeTransport.default.debuggerPath": "目標機器的偵錯工具完整路徑，例如 /use/bin/gdb。",
	"c_cpp.debuggers.pipeTransport.debuggerPath.description": "目標機器的偵錯工具完整路徑，例如 /use/bin/gdb。",
	"c_cpp.debuggers.pipeTransport.pipeCwd.description": "管道程式工作目錄的完整路徑。",
	"c_cpp.debuggers.pipeTransport.pipeProgram.description": "要執行的完整管道命令。",
	"c_cpp.debuggers.pipeTransport.pipeArgs.description": "傳遞至管道程式以設定連線的命令列引數。",
	"c_cpp.debuggers.pipeTransport.pipeEnv.description": "傳遞至管道程式的環境變數。",
	"c_cpp.debuggers.pipeTransport.quoteArgs.description": "若 pipeProgram 的個別引數包含字元 (例如空格或定位字元)，是否應該加上引號? 若設定為 'false'，不會再自動為偵錯工具命令加上引號。預設為 'true'。",
	"c_cpp.debuggers.logging.description": "選擇性旗標，用以判斷應記錄到偵錯主控台的訊息類型。",
	"c_cpp.debuggers.logging.exceptions.description": "選擇性旗標，用以判斷是否應將例外狀況訊息記錄到偵錯主控台。預設為 true。",
	"c_cpp.debuggers.logging.moduleLoad.description": "選擇性旗標，用以判斷是否應將模組載入事件記錄到偵錯主控台。預設為 true。",
	"c_cpp.debuggers.logging.programOutput.description": "選擇性旗標，用以判斷是否應將程式輸出記錄到偵錯主控台。預設為 true。",
	"c_cpp.debuggers.logging.engineLogging.description": "選擇性旗標，用以判斷是否應將診斷偵錯引擎訊息記錄到偵錯主控台。預設為 false。",
	"c_cpp.debuggers.logging.trace.description": "選擇性旗標，用以判斷是否應將診斷介面卡命令追蹤記錄到偵錯主控台。預設為 false。",
	"c_cpp.debuggers.logging.traceResponse.description": "選擇性旗標，用以判斷是否應將診斷介面卡命令和回應追蹤記錄到偵錯主控台。預設為 false。",
	"c_cpp.debuggers.cppvsdbg.logging.threadExit.description": "選用旗標，可決定是否要將執行緒結束訊息記錄到偵錯主控台。預設: false。",
	"c_cpp.debuggers.cppvsdbg.logging.processExit.description": "選用旗標，可決定是否要將目標處理序結束訊息記錄到偵錯主控台。預設: true。",
	"c_cpp.debuggers.text.description": "要執行的偵錯工具命令。",
	"c_cpp.debuggers.description.description": "命令的選擇性描述。",
	"c_cpp.debuggers.ignoreFailures.description": "若為 true，則應略過來自命令的失敗。預設值為 false。",
	"c_cpp.debuggers.program.description": "程式可執行檔的完整路徑。",
	"c_cpp.debuggers.args.description": "傳遞至程式的命令列引數。",
	"c_cpp.debuggers.cppdbg.type.description": "引擎的類型。必須是 \"cppdbg\"。",
	"c_cpp.debuggers.cppvsdbg.type.description": "引擎的類型。必須是 \"cppvsdbg\"。",
	"c_cpp.debuggers.targetArchitecture.description": "偵錯項目的架構。除非設定此參數，否則將會受到自動偵測。允許的值為 x86、arm、arm64、mips、x64、amd64 及 x86_64。",
	"c_cpp.debuggers.cwd.description": "目標的工作目錄。",
	"c_cpp.debuggers.setupCommands.description": "為了安裝基礎偵錯工具而要執行的一或多個 GDB/LLDB 命令。範例: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }]。",
	"c_cpp.debuggers.postRemoteConnectCommands.description": "會在遠端連線到偵錯伺服器之後執行的一或多個命令。",
	"c_cpp.debuggers.customLaunchSetupCommands.description": "如有提供，這會以其他命令取代用於啟動目標的預設命令。舉例來說，這可以是 \"-target-attach\" 以附加到目標處理序。空的命令清單會將啟動命令取代為沒有任何項目，這在將啟動選項作為命令列選項提供給偵錯工具時相當實用。範例: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }]。",
	"c_cpp.debuggers.launchCompleteCommand.description": "為了讓目標處理序執行，而要在偵錯工具完全設定後執行的命令。允許的值為 \"exec-run\"、\"exec-continue\" 及 \"None\"。預設值為 \"exec-run\"。",
	"c_cpp.debuggers.cppdbg.visualizerFile.description": "偵錯此處理序時要使用的 .natvis 檔案。此選項與 GDB 美化顯示不相容。若使用此設定，也請參閱 \"showDisplayString\"。",
	"c_cpp.debuggers.cppdbg.svdPath.description": "內嵌裝置 SVD 檔案的完整路徑。",
	"c_cpp.debuggers.cppvsdbg.visualizerFile.description": "偵錯此處理序時要使用的 .natvis 檔案。",
	"c_cpp.debuggers.showDisplayString.description": "指定 visualizerFile 時，showDisplayString 會啟用顯示字串。開啟此選項可能會導致偵錯期間的效能變慢。",
	"c_cpp.debuggers.environment.description": "要新增至程式環境的環境變數。範例: [ { \"name\": \"config\", \"value\": \"Debug\" } ]，非 [ { \"config\": \"Debug\" } ]。",
	"c_cpp.debuggers.envFile.description": "包含環境變數定義之檔案的絕對路徑。此檔案具有以等號分隔每行的索引鍵值組。例如「鍵=值」。",
	"c_cpp.debuggers.additionalSOLibSearchPath.description": "要用於搜尋 .so 檔案的目錄清單 (以分號分隔)。範例: \"c:\\dir1;c:\\dir2\"。",
	"c_cpp.debuggers.MIMode.description": "表示 MIDebugEngine 將連線的主控台偵錯工具。允許的值為 \"gdb\" \"lldb\"。",
	"c_cpp.debuggers.miDebuggerPath.description": "MI 偵錯工具 (例如 gdb) 的路徑。若未指定，會先搜尋偵錯工具的路徑。",
	"c_cpp.debuggers.miDebuggerArgs.description": "MI 偵錯工具 (例如 gdb) 的其他引數。",
	"c_cpp.debuggers.miDebuggerServerAddress.description": "MI 偵錯工具伺服器要連線至的網路位址 (範例: localhost:1234)。",
	"c_cpp.debuggers.useExtendedRemote.description": "使用目標延伸的遠端模式連線到 MI 偵錯工具伺服器。",
	"c_cpp.debuggers.stopAtEntry.description": "選擇性參數。若為 true，則偵錯工具應該在目標的進入點停止。如果已傳遞 processId。就沒有效果。",
	"c_cpp.debuggers.debugServerPath.description": "要啟動的偵錯伺服器選用完整路徑。預設為 Null。使用時，會將 \"miDebugServerAddress\" 或您自己的伺服器與 \"customSetupCommand\" 連接，以執行 \"-target-select remote <伺服器:連接埠>\"。",
	"c_cpp.debuggers.debugServerArgs.description": "選擇性偵錯伺服器引數。預設為 null。",
	"c_cpp.debuggers.serverStarted.description": "要在偵錯伺服器輸出中尋找的選擇性伺服器啟動模式。預設為 null。",
	"c_cpp.debuggers.filterStdout.description": "搜尋 stdout 資料流以取得伺服器啟動的模式，並將 stdout 記錄到偵錯輸出。預設為 true。",
	"c_cpp.debuggers.filterStderr.description": "搜尋 stderr 資料流以取得伺服器啟動的模式，並將 stderr 記錄到偵錯輸出。預設為 false。",
	"c_cpp.debuggers.serverLaunchTimeout.description": "偵錯工具等待 debugServer 啟動的選擇性時間，以毫秒為單位。預設為 10000。",
	"c_cpp.debuggers.coreDumpPath.description": "指定程式的核心傾印檔案選擇性完整路徑。預設為 null。",
	"c_cpp.debuggers.cppdbg.externalConsole.description": "若為 true，將會啟動偵錯項目的主控台。若為 false，則在 Linux 和 Windows 上會出現在整合式主控台內。",
	"c_cpp.debuggers.cppvsdbg.externalConsole.description": "['console' 已淘汰此項] 若為 true，會為偵錯項目啟動主控台。若為 false，則不會啟動任何主控台。",
	"c_cpp.debuggers.cppvsdbg.console.description": "要在何處啟動偵錯目標。如果未定義，則預設為 'internalConsole'。",
	"c_cpp.debuggers.cppvsdbg.console.internalConsole.description": "輸出到 VS Code 偵錯主控台。這不支援讀取主控台輸入 (例如: 'std::cin' 或 'scanf')。",
	"c_cpp.debuggers.cppvsdbg.console.integratedTerminal.description": "VS Code 的整合式終端機。",
	"c_cpp.debuggers.cppvsdbg.console.externalTerminal.description": "主控台應用程式將會在外部終端視窗中啟動。此視窗將在重新啟動情節中重複使用，且在應用程式結束時不會自動消失。",
	"c_cpp.debuggers.cppvsdbg.console.newExternalWindow.description": "主控台應用程式將會在其本身的外部主控台視窗中啟動，該視窗會在應用程式停止時結束。非主控台應用程式將在沒有終端的情況下執行，而且將忽略 stdout/stderr。",
	"c_cpp.debuggers.avoidWindowsConsoleRedirection.description": "若為 true，則停用整合式終端機支援需要的偵錯項目主控台重新導向。",
	"c_cpp.debuggers.sourceFileMap.description": "傳遞給偵錯引擎的選擇性來源檔案對應。範例: '{ \"/original/source/path\":\"/current/source/path\" }'。",
	"c_cpp.debuggers.processId.anyOf.description": "要附加偵錯工具的選擇性處理序識別碼。使用 \"${command:pickProcess}\" 可取得要附加的本機執行中處理序清單。請注意，某些平台需要系統管理員權限才能附加至處理序。",
	"c_cpp.debuggers.symbolSearchPath.description": "要用於搜尋符號 (即 pdb) 檔案的目錄清單 (以分號分隔)。範例: \"c:\\dir1;c:\\dir2\"。",
	"c_cpp.debuggers.dumpPath.description": "指定程式之傾印檔案的選擇性完整路徑。範例: \"c:\\temp\\app.dmp\"。預設為 null。",
	"c_cpp.debuggers.enableDebugHeap.description": "若為 false，將會啟動已停用偵錯堆積的處理序。這會將環境變數 '_NO_DEBUG_HEAP' 設為 '1'。",
	"c_cpp.debuggers.symbolLoadInfo.description": "符號載入的明確控制。",
	"c_cpp.debuggers.symbolLoadInfo.loadAll.description": "若為 true，將會載入所有程式庫的符號，否則不會載入任何 solib 符號。預設值為 true。",
	"c_cpp.debuggers.symbolLoadInfo.exceptionList.description": "以分號 ';' 分隔的檔名清單 (允許使用萬用字元)。修改 LoadAll 的行為。如果 LoadAll 為 true，則不會載入與清單中任何名稱相符的程式庫符號。否則只會載入相符的程式庫符號。範例:「foo.so;bar.so」。",
	"c_cpp.debuggers.requireExactSource.description": "要求目前原始程式碼與 pdb 相符的選用旗標。",
	"c_cpp.debuggers.stopAtConnect.description": "如果為 True，則偵錯工具應於連接至目標後停止。如果為 False，則偵錯工具將在連接後繼續。預設為 False。",
	"c_cpp.debuggers.hardwareBreakpoints.description": "明確控制遠端目標的硬體中斷點行為。",
	"c_cpp.debuggers.hardwareBreakpoints.require.description": "如果為 True，請一律使用硬體中斷點。預設為 False。",
	"c_cpp.debuggers.hardwareBreakpoints.limit.description": "可用硬體中斷點數目的選用限制。只有在「需要」為 True 且「限制」大於 0 時強制執行。預設為 0。",
	"c_cpp.debuggers.variables.description": "用於在此啟動設定中遞迴替代的變數。每個變數可能參照其他項目。",
	"c_cpp.debuggers.variables.properties.description": "用於在此啟動設定中遞迴替代的變數。值可能參照其他變數。",
	"c_cpp.debuggers.host.description": "主機資訊。",
	"c_cpp.debuggers.host.user.description": "使用者登入主機。",
	"c_cpp.debuggers.host.hostName.description": "主機名稱。",
	"c_cpp.debuggers.host.port.description": "主機上的 SSH 連接埠。預設值為 22。",
	"c_cpp.debuggers.host.jumpHost.description": "先與跳板機建立連線，以連線至目標主機。",
	"c_cpp.debuggers.host.localForward.description": "將通往至本機 (用戶端) 主機上指定的 TCP 連接埠或 Unix 通訊端的連線轉送至遠端上指定的主機和連接埠或 Unix 通訊端",
	"c_cpp.debuggers.host.localForward.bindAddress.description": "本機位址",
	"c_cpp.debuggers.host.localForward.port.description": "本機連接埠",
	"c_cpp.debuggers.host.localForward.host.description": "主機名稱",
	"c_cpp.debuggers.host.localForward.hostPort.description": "主機連接埠",
	"c_cpp.debuggers.host.localForward.localSocket.description": "本機通訊端",
	"c_cpp.debuggers.host.localForward.remoteSocket.description": "遠端通訊端",
	"c_cpp.debuggers.deploySteps.description": "部署應用程式所需的步驟。順序很重要。",
	"c_cpp.debuggers.deploySteps.copyFile.description": "使用 SCP 或 rsync 複製檔案。",
	"c_cpp.debuggers.deploySteps.copyFile.files.description": "要複製的檔案。支援路徑模式。",
	"c_cpp.debuggers.deploySteps.copyFile.targetDir.description": "目標目錄。",
	"c_cpp.debuggers.deploySteps.copyFile.recursive.description": "若為 True，會以遞迴方式複製資料夾。",
	"c_cpp.debuggers.deploySteps.copyFile.scpPath.description": "SCP 的選用完整路徑。如果未指定，則會假設 SCP 在 PATH 上",
	"c_cpp.debuggers.deploySteps.copyFile.rsyncPath.description": "rsync 的選用完整路徑。如果未指定，則會假設 rsync 在 PATH 上",
	"c_cpp.debuggers.deploySteps.debug": "如果為 True，則在啟動而不偵錯的情況下略過。如果為 False，則在啟動而偵錯的情況下略過。如果未定義，則永不略過。",
	"c_cpp.debuggers.deploySteps.ssh.description": "SSH 命令步驟。",
	"c_cpp.debuggers.deploySteps.ssh.command.description": "要透過 SSH 執行的命令。SSH 命令中 '-c' 之後的命令。",
	"c_cpp.debuggers.deploySteps.ssh.sshPath.description": "SSH 的選用完整路徑。如果未指定，則會假設 SSH 在 PATH 上",
	"c_cpp.debuggers.deploySteps.continueOn.description": "輸出中選用的完成模式。當輸出中出現此模式，則會繼續執行部署程序 (而無論此步驟是否傳回)。",
	"c_cpp.debuggers.deploySteps.shell.description": "殼層命令步驟。",
	"c_cpp.debuggers.deploySteps.shell.command.description": "要執行的殼層命令。",
	"c_cpp.debuggers.vsCodeCommand.description": "要叫用的 VS Code 命令。可以是 VS Code 中的命令或使用中的延伸模組。",
	"c_cpp.debuggers.vsCodeCommand.command.description": "要叫用的 VS Code 命令。",
	"c_cpp.debuggers.vsCodeCommand.args.description": "VS Code 命令的引數。",
	"c_cpp.taskDefinitions.name.description": "工作的名稱。",
	"c_cpp.taskDefinitions.command.description": "執行編譯的編譯器或指令碼路徑。",
	"c_cpp.taskDefinitions.args.description": "要傳遞給編譯器或編譯指令碼的其他引數。",
	"c_cpp.taskDefinitions.args.value.description": "實際引數值。",
	"c_cpp.taskDefinitions.args.quoting.description": "如何引用參數值。",
	"c_cpp.taskDefinitions.args.quoting.escape.description": "使用殼層的逸出字元 (例如 \\ 在 Bash 下) 來逸出字元。",
	"c_cpp.taskDefinitions.args.quoting.strong.description": "使用殼層的強引號字元來引用引數 (強引號字元例如 ' 在 Bash 下)。",
	"c_cpp.taskDefinitions.args.quoting.weak.description": "使用殼層的弱引號字元來引用引數 (弱引號字元例如 \" 在 Bash 下)。",
	"c_cpp.taskDefinitions.options.description": "其他命令選項。",
	"c_cpp.taskDefinitions.options.cwd.description": "所執行程式或指令碼的目前工作目錄。如果省略，則會使用 Code 的目前工作區根目錄。",
	"c_cpp.taskDefinitions.detail.description": "工作的其他詳細資料。",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.description": "相同來源樹狀的目前路徑和編譯時間路徑。在顯示 stacktrace 位置時，在 EditorPath 下找到的檔案會對應到 CompileTimePath 路徑，以進行中斷點必對，並會從 CompileTimePath 對應到 EditorPath。",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.editorPath.description": "編輯器要使用的來源樹狀路徑。",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.useForBreakpoints.description": "若此項目只用於堆疊框架位置對應，則為 False; 若在指定中斷點位置時也應該使用此項目，則為 True。",
	"c_cpp.debuggers.symbolOptions.description": "控制如何找到並載入符號 (.pdb 檔案) 的選項。",
	"c_cpp.debuggers.unknownBreakpointHandling.description": "控制叫用時如何處理在外部設定的中斷點 (通常是透過原始 GDB 命令)。\n允許的值為 \"throw\"，其作用就像應用程式擲出例外，以及 \"stop\"，其只會暫停偵錯工作階段。預設值為 \"throw\"。",
	"c_cpp.debuggers.VSSymbolOptions.description": "提供將符號尋找及載入至偵錯介面卡的設定。",
	"c_cpp.debuggers.VSSymbolOptions.searchPaths.description": "符號陣列伺服器 URL (範例: http​://MyExampleSymbolServer) 或目錄 (範例: /build/symbols) 搜尋 .pdb 檔案。除了預設位置 (位於模組旁和 pdb 原先放置的路徑)，也會搜尋這些目錄。",
	"c_cpp.debuggers.VSSymbolOptions.searchMicrosoftSymbolServer.description": "如果是 'true'，則會將 Microsoft 符號伺服器 (https​://msdl.microsoft.com​/download/symbols) 新增至符號搜尋路徑。若未指定，這個選項會預設為 'false'。",
	"c_cpp.debuggers.VSSymbolOptions.cachePath.description": "應該快取從符號伺服器下載的符號所在目錄。若未指定，則在 Windows 上，偵錯工具會預設為 %TEMP%\\SymbolCache。",
	"c_cpp.debuggers.VSSymbolOptions.moduleFilter.description": "提供選項，以控制偵錯工具會嘗試為其載入符號 (.pdb 檔案) 的模組 (.dll 檔案)。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.description": "提供將符號載入至偵錯介面卡的設定。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.description": "控制模組篩選作業在兩個基本作業模式中的哪一個。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.loadAllButExcluded.enumDescriptions": "載入所有模組的符號，除非模組位於 'excludedModules' 陣列中。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.loadOnlyIncluded.enumDescriptions": "請勿嘗試載入任何模組的符號，除非其位於 'includedModules' 陣列中，或包含在 'includeSymbolsNextToModules' 設定中。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.excludedModules.description": "偵錯工具不應為其載入符號的模組陣列。支援萬用字元 (範例: MyCompany.*.dll)。\n\n除非 '模式' 設定為 'loadAllButExcluded'，否則會忽略此屬性。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.includedModules.description": "偵錯工具應該為其載入符號的模組陣列。支援萬用字元 (範例: MyCompany.*.dll)。\n\n除非 '模式' 設定為 'loadOnlyIncluded'，否則會忽略此屬性。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.includeSymbolsNextToModules.description": "若為 True，針對不在 'includedModules' 陣列中的任何模組，偵錯工具仍會檢查模組本身和啟動可執行檔的旁邊，但不會檢查符號搜尋清單上的路徑。此選項預設為 'true'。\n\n除非 '模式' 設定為 'loadOnlyIncluded'，否則會忽略此屬性。",
	"c_cpp.semanticTokenTypes.referenceType.description": "C++/CLI 參考類型的樣式。",
	"c_cpp.semanticTokenTypes.cliProperty.description": "C++/CLI 屬性的樣式。",
	"c_cpp.semanticTokenTypes.genericType.description": "C++/CLI 泛型類型的樣式。",
	"c_cpp.semanticTokenTypes.valueType.description": "C++/CLI 數值類型的樣式。",
	"c_cpp.semanticTokenTypes.templateFunction.description": "C++ 範本函數的樣式。",
	"c_cpp.semanticTokenTypes.templateType.description": "C++ 範本類型的樣式。",
	"c_cpp.semanticTokenTypes.operatorOverload.description": "C++ 超載運算子的樣式。",
	"c_cpp.semanticTokenTypes.memberOperatorOverload.description": "C++ 超載運算子成員函數的樣式。",
	"c_cpp.semanticTokenTypes.newOperator.description": "C++ `new` 或 `delete` 運算子的樣式。",
	"c_cpp.semanticTokenTypes.customLiteral.description": "C++ 使用者定義文字的樣式。",
	"c_cpp.semanticTokenTypes.numberLiteral.description": "C++ 使用者定義文字編號的樣式。",
	"c_cpp.semanticTokenTypes.stringLiteral.description": "C++ 使用者定義常值字串的樣式。",
	"c_cpp.semanticTokenModifiers.global.description": "要用於全域符號的樣式。",
	"c_cpp.semanticTokenModifiers.local.description": "要用於本機符號的樣式。",
	"c_cpp.debuggers.logging.natvisDiagnostics.description": "選擇性旗標，用以判斷是否應將診斷 natvis 訊息記錄到偵錯主控台。預設為 None。",
	"c_cpp.debuggers.logging.category.verbose.description": "開發期間用於互動式調查的記錄。這些記錄應該主要包含有助於偵錯的資訊，而且沒有長期價值。",
	"c_cpp.debuggers.logging.category.warning.description": "在應用程式流程中醒目提示或非預期事件，但不會導致應用程式停止執行停止的記錄。",
	"c_cpp.debuggers.logging.category.error.description": "當目前的執行流程因失敗而停止時，會醒目提示記錄。這些應該表示目前活動失敗，而不是整個應用程式的失敗。",
	"c_cpp.debuggers.logging.category.none.description": "非用於寫入記錄訊息。指定記錄類別不應寫入任何訊息。",
	"c_cpp.walkthrough.title": "開始使用 C++ 開發",
	"c_cpp.walkthrough.description": "深入了解 VS Code 豐富的 C++ 開發體驗。",
	"c_cpp.walkthrough.set.up.title": "設定您的 C++ 環境",
	"c_cpp.walkthrough.activating.description": "啟用 C++ 延伸模組，以判斷是否已設定您的 C++ 環境。\n正在啟用延伸模組...",
	"c_cpp.walkthrough.no.compilers.windows.description": "我們在您的電腦上找不到 C++ 編譯器，需要此編譯器才能使用 C++ 延伸模組。請遵循右側的指示安裝編譯器，然後按一下下方的 [尋找我的新編譯器]。\n[尋找我的新編譯器](command:C_Cpp.RescanCompilers?%22walkthrough%22)",
	"c_cpp.walkthrough.no.compilers.description": "我們在您的電腦上找不到 C++ 編譯器，需要此編譯器才能使用 C++ 延伸模組。請選取 [安裝 C++ 編譯器] 為您安裝編譯器，或遵循右側的指示安裝編譯器，然後按一下下方的 [尋找我的新編譯器]。\n[安裝 C++ 編譯器](command:C_Cpp.InstallCompiler?%22walkthrough%22)\n[尋找我的新編譯器](command:C_Cpp.RescanCompilers?%22walkthrough%22)",
	"c_cpp.walkthrough.compilers.found.description": "C++ 延伸模組可與 C++ 編譯器搭配運作。按一下下方的按鈕，從電腦上已存在的編譯器選取一個。\n[選取我的預設編譯器](command:C_Cpp.SelectIntelliSenseConfiguration?%22walkthrough%22)",
	"c_cpp.walkthrough.compilers.found.altText": "影像顯示選取預設編譯器快速選取，以及在使用者電腦上找到的編譯器清單 (已選取其中一個)。",
	"c_cpp.walkthrough.create.cpp.file.title": "建立 C++ 檔案",
	"c_cpp.walkthrough.create.cpp.file.description": "[開啟](command:toSide:workbench.action.files.openFile) 或 [建立](command:toSide:workbench.action.files.newUntitledFile?%7B%22languageId%22%3A%22cpp%22%7D) C++ 檔案。務必使用 \".cpp\" 副檔名來儲存它，例如 \"helloworld.cpp\"。\n[建立 C++ 檔案](command:toSide:workbench.action.files.newUntitledFile?%7B%22languageId%22%3A%22cpp%22%7D)",
	"c_cpp.walkthrough.create.cpp.file.altText": "使用 C++ 專案開啟 C++ 檔案或資料夾。",
	"c_cpp.walkthrough.command.prompt.title": "從開發人員命令提示字元啟動",
	"c_cpp.walkthrough.command.prompt.description": "使用 Microsoft Visual Studio C++ 編譯器時，C++ 延伸模組會要求您從開發人員命令提示字元啟動 VS Code。請遵循右側的指示來重新啟動。\n[重新載入視窗](command:workbench.action.reloadWindow)",
	"c_cpp.walkthrough.run.debug.title": "執行和偵錯您的 C++ 檔案",
	"c_cpp.walkthrough.run.debug.mac.description": "開啟您的 C++ 檔案，然後按一下編輯器右上角的執行按鈕，或在開啟檔案上時按 F5。選取 [clang++ - 建置及偵錯使用中的檔案] 以使用偵錯工具執行。",
	"c_cpp.walkthrough.run.debug.linux.description": "開啟您的 C++ 檔案，然後按一下編輯器右上角的執行按鈕，或在開啟檔案上時按 F5。選取 [g++ - 建置及偵錯使用中的檔案] 以使用偵錯工具執行。",
	"c_cpp.walkthrough.run.debug.windows.description": "開啟您的 C++ 檔案，然後按一下編輯器右上角的播放按鈕，或在開啟檔案上時按 F5。選取 [cl.exe - 建置及偵錯使用中的檔案] 以使用偵錯工具執行。",
	"c_cpp.walkthrough.run.debug.windows.altText": "影像顯示 C++ 檔案中的中斷點、F5 按鈕，以及右上方的執行符號",
	"c_cpp.walkthrough.customize.debugging.title": "自訂偵錯",
	"c_cpp.walkthrough.customize.debugging.mac.description": "若要自訂您的偵錯設定，請在活動列中選取 [檔案總管]，然後開啟包含 C++ 檔案的資料夾。開啟 C++ 檔案，然後選取 [播放] 按鈕右邊的 [新增偵錯設定]。新的偵錯組態已儲存至專案的 launch.json 檔案。\n[深入了解](https://code.visualstudio.com/docs/cpp/config-linux#_debug-helloworldcpp)",
	"c_cpp.walkthrough.customize.debugging.linux.description": "若要自訂您的偵錯設定，請在活動列中選取 [檔案總管]，然後開啟包含 C++ 檔案的資料夾。開啟 C++ 檔案，然後選取 [播放] 按鈕右邊的 [新增偵錯設定]。新的偵錯組態已儲存至專案的 launch.json 檔案。\n[深入了解](https://code.visualstudio.com/docs/cpp/config-msvc#_debug-helloworldcpp)",
	"c_cpp.walkthrough.customize.debugging.windows.description": "若要自訂您的偵錯設定，請在活動列中選取 [檔案總管]，然後開啟包含 C++ 檔案的資料夾。開啟 C++ 檔案，然後選取 [播放] 按鈕右邊的 [新增偵錯設定]。新的偵錯組態已儲存至專案的 launch.json 檔案。\n[深入了解](https://code.visualstudio.com/docs/cpp/config-clang-mac#_debug-helloworldcpp)",
	"c_cpp.walkthrough.customize.debugging.altText": "影像顯示下拉式清單中 [新增偵錯組態]",
	"c_cpp.codeActions.refactor.inline.macro.title": "內嵌巨集",
	"c_cpp.codeActions.refactor.inline.macro.description": "以展開程式碼取代巨集調用。",
	"c_cpp.codeActions.refactor.extract.function.title": "擷取至函式",
	"c_cpp.codeActions.refactor.extract.function.description": "將選取的程式碼擷取至自由或成員函式。",
	"c_cpp.configuration.refactoring.includeHeader.markdownDescription": "控制在執行重構動作時，是否要將重構函式/符號的標頭檔案包含到其對應的來源檔案，例如建立宣告/定義。",
	"c_cpp.configuration.refactoring.includeHeader.always.description": "如果標頭檔案未明確包含在其來源檔案中，則一律包含該標頭檔案。",
	"c_cpp.configuration.refactoring.includeHeader.ifNeeded.description": "只有當標頭檔案未明確包含在其來源檔案或隱含包含時，才包含該標頭檔案。",
	"c_cpp.configuration.refactoring.includeHeader.never.description": "永不包含標頭檔案。",
	"c_cpp.languageModelTools.configuration.displayName": "C/C++ 設定",
	"c_cpp.languageModelTools.configuration.userDescription": "使用中 C 或 C++ 檔案的設定，例如語言標準版本和目標平台。"
}