/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"microsoft.c.cpp.extension": "Microsoft C/C++ 延伸模組",
	"c.cpp.extension": "C/C++ 延伸模組",
	"open.this.editor": "使用命令開啟此編輯器:",
	"edit.configurations.ui": "C/C++: 編輯組態 (UI)",
	"switch.to.json": "按一下檔案連結或使用以下命令切換至 {0} 檔案:",
	"edit.configurations.in.json": "編輯 JSON 檔案中的組態",
	"edit.configurations.json": "C/C++: 編輯組態 (JSON)",
	"check.the.schema": "若要深入了解 C/C++ 屬性，請前往 {0}。",
	"view.schema.reference": "屬性結構描述參考",
	"intellisense.configurations": "IntelliSense 組態",
	"intellisense.configurations.description": "使用此編輯器來編輯基礎 {0} 檔案中定義的 IntelliSense 設定。在此編輯器中進行的變更只會套用到選取的組態。若要一次編輯多個組態，請前往 {1}。",
	"configuration.name": "設定名稱",
	"configuration.name.description": "識別組態的易記名稱。{0}、{1} 及 {2} 是特殊識別項，適用於會在這些平台上自動選取的組態。",
	"select.configuration.to.edit": "選取組態檔以編輯內容。",
	"add.configuration.button": "新增設定",
	"configuration.name.input": "組態名稱...",
	"ok.button": "確定",
	"cancel.button": "取消",
	"compiler.path": "編譯器路徑",
	"compiler.path.description": "用於建置專案的編譯器完整路徑 (例如 {0})，其可讓 IntelliSense 更加精準。該延伸模組將會查詢編譯器，決定要用於 IntelliSense 的系統 include 路徑與預設的定義。",
	"specify.a.compiler": "指定編譯器路徑，或從下拉式清單中選取偵測到的編譯器路徑。",
	"no.compiler.paths.detected": "(未偵測到編譯器路徑)",
	"compiler.args": "編譯器引數",
	"compiler.arguments": "用來修改所使用之包含或定義的編譯器引數，例如 {0}、{1} 等。",
	"one.argument.per.line": "每行一個引數。",
	"intellisense.mode": "IntelliSense 模式",
	"intellisense.mode.description": "要使用的 IntelliSense 模式 (對應到 MSVC、gcc 或 Clang 的平台及架構變體)。如果未設定或設為 {0}，延伸模組會選擇該平台的預設。Windows 預設為 {1}、Linux 預設為 {2}、macOS 預設為 {3}。選取特定的 IntelliSense 模式可覆寫 {4} 模式。僅指定 {5} 變體 (例如 {6}) 的 IntelliSense 模式即為舊版模式，會依據主機平台自動轉換為 {7} 變體。",
	"include.path": "包含路徑",
	"include.path.description": "include 路徑是包含來源檔案所含之標頭檔 (例如 {0}) 的資料夾。請為 Intellisense 引擎指定搜尋所含標頭檔時所要使用的路徑清單。這些路徑不會重複搜尋。若要重複搜尋，請指定 {1}。例如 {2} 會搜尋所有子目錄，而 {3} 不會。若在安裝了 Visual Studio 的 Windows 上，或在 {4} 設定中指定了編譯器，就無須在此清單中列出系統的 include 路徑。",
	"one.include.path.per.line": "每行一個包含路徑。",
	"defines": "定義",
	"defines.description": "剖析檔案時，IntelliSense 引擎要使用的前置處理器定義清單。可使用 {0} 來設定值，例如 {1}。",
	"one.definition.per.line": "每行一個定義。",
	"c.standard": "C 標準",
	"c.standard.description": "用於 IntelliSense 的 C 語言標準版本。注意: GNU 標準僅會用於查詢設定編譯器以取得 GNU 定義，而 IntelliSense 將會模擬相同的 C 標準版本。",
	"cpp.standard": "C++ 標準",
	"cpp.standard.description": "用於 IntelliSense 的 C++ 語言標準版本。注意: GNU 標準僅會用於查詢設定編譯器以取得 GNU 定義，而 IntelliSense 將會模擬相同的 C++ 標準版本。",
	"advanced.settings": "進階設定",
	"configuration.provider": "組態提供者",
	"configuration.provider.description": "可為來源檔案提供 IntelliSense 設定資訊 VS Code 延伸模組的識別碼。例如，使用 VS Code 延伸模組識別碼 {0} 從 CMake 工具延伸模組提供組態資訊。",
	"windows.sdk.version": "Windows SDK 版本",
	"windows.sdk.version.description": "要在 Windows 上使用的 Windows SDK 包含路徑版本，例如 {0}。",
	"mac.framework.path": "Mac 架構路徑",
	"mac.framework.path.description": "供 Intellisense 引擎在 Mac 架構中搜尋包含的標頭時使用的路徑清單。僅在 macOS 的組態上支援。",
	"one.path.per.line": "每行一個路徑。",
	"forced.include": "強制包含",
	"forced.include.description": "處理來源檔案中的任何其他字元前，應包含的檔案清單。檔案會包含在列出的清單中。",
	"one.file.per.line": "每行一個檔案。",
	"dot.config": "點設定",
	"dot.config.description": "Kconfig 系統所建立之 .config 檔案的路徑。Kconfig 系統會產生具有建置專案之所有定義的檔案。使用 Kconfig 系統的專案範例為 Linux 核心與 NuttX RTOS。",
	"compile.commands": "編譯命令",
	"compile.commands.description": "工作區 {0} 檔案的完整路徑。系統會使用在這個檔案中找到的 include 路徑和 define，而不是為 {1} 與 {2} 設定所指定的值。如果在編譯命令資料庫中，對應到您在編輯器中開啟之檔案的編譯單位，沒有任何項目，就會出現警告訊息，而延伸模組會改為使用 {3} 和 {4} 設定。",
	"merge.configurations": "合併設定",
	"merge.configurations.description": "當為 {0} (或核取) 時，合併包含路徑、定義和強制包含來自設定提供者的路徑。",
	"browse.path": "瀏覽: 路徑",
	"browse.path.description": "供標籤剖析器在搜尋原始程式檔包含的標頭時使用的路徑清單。若省略，就會使用 {0} 當作 {1}。根據預設，會在這些路徑進行遞迴搜尋。指定 {2} 來指示非遞迴搜尋。例如: {3} 會在所有子目錄中搜尋，但 {4} 不會。",
	"one.browse.path.per.line": "每行一個瀏覽路徑。",
	"limit.symbols": "瀏覽: 將符號限制為包含的標頭",
	"limit.symbols.checkbox": "若為 {0} (或已選取)，標籤剖析器只會剖析 {1} 中原始程式檔直接或間接包含的程式碼檔。若為 {2} (或未選取)，標籤剖析器會剖析在 {3} 清單中的指定路徑找到的所有程式碼檔。",
	"database.filename": "瀏覽: 資料庫檔案名稱",
	"database.filename.description": "產生符號資料庫路徑。這會指示延伸模組將標籤剖析器的符號資料庫儲存在工作區預設儲存位置以外的某處。如果指定了相對路徑，就會是相對於工作區預設儲存位置 (非工作區資料夾本身) 的路徑。{0} 變數可用於指定相對於工作區資料夾的路徑 (例如 {1})。"
}