/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"microsoft.c.cpp.extension": "Microsoft C/C++ 拡張機能",
	"c.cpp.extension": "C/C++ 拡張機能",
	"open.this.editor": "次のコマンドを使用して、このエディターを開きます:",
	"edit.configurations.ui": "C/C++: 構成の編集 (UI)",
	"switch.to.json": "ファイルのリンクをクリックするか、次のコマンドを使用して、{0} ファイルに切り替えてください:",
	"edit.configurations.in.json": "JSON ファイル内の構成の編集",
	"edit.configurations.json": "C/C++: 構成の編集 (JSON)",
	"check.the.schema": "C/C++ プロパティの詳細については、{0} に移動してください。",
	"view.schema.reference": "プロパティ スキーマの参照",
	"intellisense.configurations": "IntelliSense の構成",
	"intellisense.configurations.description": "このエディターを使用して、基になる {0} ファイルで定義されている IntelliSense 設定を編集します。このエディターでの変更は、選択した構成にのみ適用されます。一度に複数の構成を編集するには、{1} に移動します。",
	"configuration.name": "構成名",
	"configuration.name.description": "構成を識別するフレンドリ名です。{0}、{1}、{2} は、それらのプラットフォームで自動選択される構成の特別な識別子です。",
	"select.configuration.to.edit": "編集する構成セットを選択してください。",
	"add.configuration.button": "構成の追加",
	"configuration.name.input": "構成名...",
	"ok.button": "OK",
	"cancel.button": "キャンセル",
	"compiler.path": "コンパイラ パス",
	"compiler.path.description": "プロジェクトをビルドするために使用するコンパイラへの完全なパスです。たとえば、より正確な IntelliSense を有効にするためには {0} を指定します。拡張機能では、IntelliSense に使用するシステム インクルード パスと既定の定義を特定するためにコンパイラに対してクエリが実行されます。",
	"specify.a.compiler": "コンパイラ パスを指定するか、検出されたコンパイラ パスをドロップダウン リストから選択してください。",
	"no.compiler.paths.detected": "(コンパイラ パスが検出されませんでした)",
	"compiler.args": "コンパイラ引数",
	"compiler.arguments": "たとえば {0}、{1} など、使用されているインクルードや定義を変更するコンパイラ引数です。",
	"one.argument.per.line": "1 行につき 1 つの引数です。",
	"intellisense.mode": "IntelliSense モード",
	"intellisense.mode.description": "プラットフォームおよびアーキテクチャのバリアント (MSVC、gcc、Clang ) へのマップに使用する IntelliSense モードです。値が設定されていない、または {0} に設定されている場合、拡張機能ではそのプラットフォームの既定値が選択されます。Windows の既定値は {1}、Linux の既定値は {2}、macOS の既定値は {3} です。{4} モードをオーバーライドするには、特定の IntelliSense モードを選択します。{5} バリエント (例: {6}) のみを指定する IntelliSense モードはレガシー モードであり、ホスト プラットフォームに基づいて自動的に {7} バリアントに変換されます。",
	"include.path": "パスを含める",
	"include.path.description": "インクルード パスは、ソース ファイルにインクルードされるヘッダー ファイル ({0} など) を含むフォルダーです。インクルードされたヘッダー ファイルを検索する際に IntelliSense エンジンによって使用されるパスの一覧を指定します。これらのパスでの検索は再帰的ではありません。再帰的な検索を示す場合は、{1} を指定します。たとえば、{2} ではすべてのサブディレクトリが検索されますが、{3} はそうではありません。Windows 上に Visual Studio がインストールされている場合、または {4} 設定でコンパイラが指定されている場合は、この一覧にシステム インクルード パスを含める必要はありません。",
	"one.include.path.per.line": "1 行につき 1 つのインクルード パスです。",
	"defines": "定義",
	"defines.description": "ファイルの解析時に IntelliSense エンジンが使用するプリプロセッサ定義の一覧です。必要に応じて、{0} を使用して値を設定します (例: {1})。",
	"one.definition.per.line": "1 行につき 1 つの定義です。",
	"c.standard": "C 標準",
	"c.standard.description": "IntelliSense に使用する C 言語標準のバージョン。注意: GNU 標準は、set コンパイラをクエリして GNU 定義を取得するためにのみ使用されるため、IntelliSense は同等の C 標準バージョンをエミュレートします。",
	"cpp.standard": "C++ 標準",
	"cpp.standard.description": "IntelliSense に使用する C++ 言語標準のバージョン。注意: GNU 標準は、set コンパイラをクエリして GNU 定義を取得するためにのみ使用されるため、IntelliSense は同等の C++ 標準バージョンをエミュレートします。",
	"advanced.settings": "詳細設定",
	"configuration.provider": "構成プロバイダー",
	"configuration.provider.description": "ソース ファイルの IntelliSense 構成情報を提供できる、VS Code 拡張機能の ID。たとえば、VS Code 拡張機能 ID {0} を使用すると、CMake Tools 拡張機能から構成情報が提供されます。",
	"windows.sdk.version": "Windows SDK バージョン",
	"windows.sdk.version.description": "Windows で使用する Windows SDK インクルード パスのバージョン。例: {0}。",
	"mac.framework.path": "Mac フレームワーク パス",
	"mac.framework.path.description": "Mac フレームワークからインクルードされたヘッダーを検索する際に Intellisense エンジンが使用するパスの一覧です。macOS の構成でのみサポートされます。",
	"one.path.per.line": "1 行につき 1 つのパスです。",
	"forced.include": "強制インクルード",
	"forced.include.description": "ソース ファイルの他の文字が処理される前に含める必要があるファイルの一覧です。ファイルは、リストされている順序で含められます。",
	"one.file.per.line": "1 行につき 1 つのファイルです。",
	"dot.config": "Dot Config",
	"dot.config.description": "Kconfig システムによって作成された.config ファイルへのパス。Kconfig システムは、プロジェクトをビルドするためのすべての定義を含むファイルを生成します。Kconfig システムを使用するプロジェクトの例としては、Linux Kernel と NuttX RTOS があります。",
	"compile.commands": "コンパイル コマンド",
	"compile.commands.description": "ワークスペースの {0} ファイルへの完全なパスです。このファイルで検出されたインクルード パスおよび定義は、{1} および {2} の設定に設定されている値の代わりに使用されます。コンパイル コマンド データベースに、エディターで開いたファイルに対応する翻訳単位のエントリが含まれていない場合は、警告メッセージが表示され、代わりに拡張機能では {3} および {4} の設定が使用されます。",
	"merge.configurations": "構成のマージ",
	"merge.configurations.description": "{0} (またはチェックボックスがオン) の場合、インクルード パス、定義、および強制インクルードを構成プロバイダーのものにマージします。",
	"browse.path": "参照: パス",
	"browse.path.description": "ソース ファイルによってインクルードされたヘッダーを検索するためのタグ パーサーのパスの一覧です。省略すると、{0} が {1} として使用されます。既定では、これらのパスでの検索は再帰的です。非再帰的な検索を示すには、{2} を指定します。たとえば、{3} を指定するとすべてのサブディレクトリが検索されますが、{4} を指定すると検索されません。",
	"one.browse.path.per.line": "1 行につき 1 つの参照パスです。",
	"limit.symbols": "参照: インクルードされたヘッダーに記号を限定する",
	"limit.symbols.checkbox": "{0} (またはチェックボックスがオン) の場合、タグ パーサーは、{1} のソース ファイルによって直接的または間接的にインクルードされたコード ファイルのみを解析します。{2} (またはチェック ボックスがオフ) の場合、タグ パーサーは、{3} の一覧に指定されたパスで見つかったすべてのコード ファイルを解析します。",
	"database.filename": "参照: データベース ファイル名",
	"database.filename.description": "生成されたシンボル データベースへのパスです。これは、タグ パーサーのシンボル データベースをワークスペースの既定のストレージの場所以外に保存するように拡張機能に指示します。相対パスを指定した場合、ワークスペース フォルダー自体ではなく、ワークスペースの既定のストレージの場所に対する相対パスになります。{0} 変数を使用して、ワークスペース フォルダーに対する相対パスを指定することもできます (例: {1})。"
}