/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"c_cpp.capabilities.untrustedWorkspaces.description": "複数の設定によって、ワークスペースにローカルなプロセスが実行される場合があります (例: C_Cpp.clang_format_path、C_Cpp.addNodeAddonIncludePaths、C_Cpp.default.compilerPath、C_Cpp.default.configurationProvider、C_Cpp.default.compileCommands、および c_cpp_properties.json で不連続なプロパティ)。",
	"c_cpp.command.configurationSelect.title": "構成を選択する...",
	"c_cpp.command.configurationProviderSelect.title": "構成プロバイダーを変更する...",
	"c_cpp.command.configurationEditJSON.title": "構成の編集 (JSON)",
	"c_cpp.command.configurationEditUI.title": "構成の編集 (UI)",
	"c_cpp.command.switchHeaderSource.title": "ヘッダー/ソースの切り替え",
	"c_cpp.command.enableErrorSquiggles.title": "エラーの波線を有効にする",
	"c_cpp.command.disableErrorSquiggles.title": "エラーの波線を無効にする",
	"c_cpp.command.toggleIncludeFallback.title": "インクルード エラー時の IntelliSense エンジンのフォールバックの切り替え",
	"c_cpp.command.toggleDimInactiveRegions.title": "非アクティブな領域の色づけの切り替え",
	"c_cpp.command.resetDatabase.title": "IntelliSense データベースのリセット",
	"c_cpp.command.takeSurvey.title": "アンケートに答える",
	"c_cpp.command.buildAndDebugActiveFile.title": "アクティブ ファイルのビルドとデバッグ",
	"c_cpp.command.logDiagnostics.title": "診断のログ記録",
	"c_cpp.command.referencesViewGroupByType.title": "参照渡し型でグループ化",
	"c_cpp.command.referencesViewUngroupByType.title": "参照の種類によるグループ化解除",
	"c_cpp.command.rescanWorkspace.title": "ワークスペースの再スキャン",
	"c_cpp.command.vcpkgClipboardInstallSuggested.title": "vcpkg インストール コマンドをクリップボードにコピーする",
	"c_cpp.command.vcpkgOnlineHelpSuggested.title": "vcpkg のヘルプ ページへのアクセス",
	"c_cpp.command.generateEditorConfig.title": "VC 形式の設定からの EditorConfig コンテンツの生成",
	"c_cpp.command.GoToNextDirectiveInGroup.title": "条件付きグループ内の次のプリプロセッサ ディレクティブへ移動",
	"c_cpp.command.GoToPrevDirectiveInGroup.title": "条件付きグループ内の前のプリプロセッサ ディレクティブへ移動",
	"c_cpp.configuration.formatting.description": "書式設定エンジンを構成します",
	"c_cpp.configuration.formatting.clangFormat.description": "clang-format を使用してコードがフォーマットされます。",
	"c_cpp.configuration.formatting.vcFormat.description": "コードの書式設定に Visual C++ の書式設定エンジンが使用されます。",
	"c_cpp.configuration.formatting.Default.description": "既定では、clang-format を使用してコードをフォーマットします。ただし、関連する設定を持つ .editorconfig ファイルがフォーマット対象のコードの近くに見つかり、clang_format_style が既定値である場合は、Visual C++ フォーマット エンジンが使用されます: 'file'。",
	"c_cpp.configuration.formatting.Disabled.description": "コードの書式設定は無効になります。",
	"c_cpp.configuration.vcFormat.indent.braces.description": "中かっこは、[Editor: Tab Size](エディター: タブ サイズ) 設定で指定された分だけインデントされます。",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.description": "新しい行のインデントの基準を決定します",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.outermostParenthesis.description": "新しい行は、一番外側の始めかっこを基準にインデントされます。",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.innermostParenthesis.description": "新しい行は、最も内側にある始めかっこを基準にインデントされます。",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.statementBegin.description": "新しい行は、現在のステートメントの先頭を基準にインデントされます。",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.description": "新しい行を入力すると、始めかっこの下か、\"C_Cpp.vcFormat.indent.multiLineRelativeTo\" を基準にして配置されます。",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.alignToParenthesis.description": "新しい行は、始めかっこの下に揃えられます。",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.indent.description": "新しい行は、\"C_Cpp.vcFormat.indent.multiLineRelativeTo\" を基準にしてインデントされます。",
	"c_cpp.configuration.vcFormat.indent.preserveWithinParentheses.description": "既存のコードで、かっこ内の新しい行のインデントの配置を既存のまま保持します。",
	"c_cpp.configuration.vcFormat.indent.caseLabels.description": "ラベルは、[Editor: Tab Size](エディター: タブ サイズ) 設定で指定された分だけ、switch ステートメントを基準にインデントされます。",
	"c_cpp.configuration.vcFormat.indent.caseContents.description": "case ブロック内のコードは、[Editor: Tab Size](エディター: タブ サイズ) 設定で指定された分だけ、ラベルを基準にインデントされます",
	"c_cpp.configuration.vcFormat.indent.caseContentsWhenBlock.description": "case ステートメントに続く中かっこは、[Editor: Tab Size](エディター: タブ サイズ) 設定で指定された分だけインデントされます",
	"c_cpp.configuration.vcFormat.indent.lambdaBracesWhenParameter.description": "関数パラメーターとして使用されるラムダの中かっこは、ステートメントの先頭を基準に [Editor: Tab Size] 設定で指定された分だけインデントされます",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.description": "goto ラベルの位置",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.oneLeft.description": "現在のコード インデントの左に、[Editor: Tab Size](エディター: タブ サイズ) 設定で指定された分だけ goto ラベルが配置されます",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.leftmostColumn.description": "goto ラベルは、コードの左端に配置されます。",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.none.description": "goto ラベルは書式設定されません。",
	"c_cpp.configuration.vcFormat.indent.preprocessor.description": "プリプロセッサ ディレクティブの位置",
	"c_cpp.configuration.vcFormat.indent.preprocessor.oneLeft.description": "現在のコード インデントの左に、[Editor: Tab Size](エディター: タブ サイズ) 設定で指定された分だけプリプロセッサ ディレクティブが配置されています",
	"c_cpp.configuration.vcFormat.indent.preprocessor.leftmostColumn.description": "プリプロセッサ ディレクティブは、コードの左端に配置されています。",
	"c_cpp.configuration.vcFormat.indent.preprocessor.none.description": "プリプロセッサ ディレクティブはフォーマットされません。",
	"c_cpp.configuration.vcFormat.indent.accessSpecifiers.description": "アクセス指定子は、クラスまたは構造体の定義を基準に [Editor: Tab Size](エディター: タブ サイズ) 設定で指定された分だけインデントされます",
	"c_cpp.configuration.vcFormat.indent.namespaceContents.description": "コードは、エディターのタブ サイズの設定で指定された分だけ、それを囲んでいる名前空間を基準にインデントされます",
	"c_cpp.configuration.vcFormat.indent.preserveComments.description": "コメントのインデントは、書式設定操作中に変更されません。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.namespace.description": "名前空間の左中かっこの位置",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.type.description": "型定義の左中かっこの位置",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.lambda.description": "ラムダ関数の左中かっこの位置",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.function.description": "関数の左中かっこの位置",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.block.description": "コントロール ブロックの左中かっこの位置",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.newLine.description": "始めかっこが新しい行に移動されます。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.sameLine.description": "左中かっこが同じ行に残され、各かっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.ignore.description": "左中かっこは書式設定されません。",
	"c_cpp.configuration.vcFormat.newLine.scopeBracesOnSeparateLines.description": "スコープの左および右中かっこを別々の行に配置します。",
	"c_cpp.configuration.vcFormat.newLine.closeBraceSameLine.emptyType.description": "型が空の場合は、終わりかっこを始めかっこと同じ行に移動します。",
	"c_cpp.configuration.vcFormat.newLine.closeBraceSameLine.emptyFunction.description": "関数の本体が空の場合は、終わりかっこを始めかっこと同じ行に移動します。",
	"c_cpp.configuration.vcFormat.newLine.beforeCatch.description": "新しい行に 'catch' および類似キーワードを配置します。",
	"c_cpp.configuration.vcFormat.newLine.beforeElse.description": "新しい行に 'else' を配置します。",
	"c_cpp.configuration.vcFormat.newLine.beforeWhileInDoWhile.description": "do-while ループの 'while' を新しい行に配置します。",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.description": "関数名と引数リストの左かっこの間のスペース",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.insert.description": "関数の始めかっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.remove.description": "関数の左かっこの前にあるスペースは削除されます。",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.ignore.description": "スペースは入力されたとおりに残されます。",
	"c_cpp.configuration.vcFormat.space.withinParameterListParentheses.description": "関数パラメーター リストで始めかっこの後と終わりかっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.betweenEmptyParameterListParentheses.description": "関数パラメーター リストが空の場合、かっこ間にスペースが挿入されます。",
	"c_cpp.configuration.vcFormat.space.afterKeywordsInControlFlowStatements.description": "制御フロー ステートメント内のキーワードと始めかっこの間にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.withinControlFlowStatementParentheses.description": "制御フロー ステートメント内で始めかっこの後と終わりかっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.beforeLambdaOpenParenthesis.description": "ラムダ引数リストの始めかっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.withinCastParentheses.description": "C スタイル キャストで始めかっこの後と終わりかっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.afterCastCloseParenthesis.description": "C スタイル キャストの終わりかっこの後にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.withinExpressionParentheses.description": "かっこで囲まれた式で始めかっこの後と終わりかっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.beforeBlockOpenBrace.description": "スコープ ブロックの左中かっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.betweenEmptyBraces.description": "中かっこが空で、同じ行にある場合は、その間にスペースが挿入されます。",
	"c_cpp.configuration.vcFormat.space.beforeInitializerListOpenBrace.description": "均一初期化および初期化子リストの左中かっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.withinInitializerListBraces.description": "均一初期化および初期化子リストで左中かっこの後と右中かっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.preserveInInitializerList.description": "コンマの前後のスペースは、均一初期化および初期化子リストの中に保持されます。",
	"c_cpp.configuration.vcFormat.space.beforeOpenSquareBracket.description": "始め角かっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.withinSquareBrackets.description": "始め角かっこの後と終わり角かっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.beforeEmptySquareBrackets.description": "角かっこが空の場合、始めかっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.betweenEmptySquareBrackets.description": "角かっこが空の場合、空のかっこの間にスペースが挿入されます。",
	"c_cpp.configuration.vcFormat.space.groupSquareBrackets.description": "多次元配列で、かっこ間のすべてのスペースが削除されます。スペースを制御するその他の設定はオーバーライドされます。",
	"c_cpp.configuration.vcFormat.space.withinLambdaBrackets.description": "始め角かっこの後と終わり角かっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.betweenEmptyLambdaBrackets.description": "角かっこが空の場合、空のかっこの間にスペースが挿入されます。",
	"c_cpp.configuration.vcFormat.space.beforeComma.description": "すべてのコンマの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.afterComma.description": "すべてのコンマの後にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.removeAroundMemberOperators.description": "メンバー アクセス演算子、メンバーへのポインター演算子、スコープ解決演算子の前後のスペースは削除されます。",
	"c_cpp.configuration.vcFormat.space.beforeInheritanceColon.description": "クラス定義で継承された型のコロンの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.beforeConstructorColon.description": "コンストラクター定義のコロンの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.removeBeforeSemicolon.description": "すべてのセミコロンの前のスペースが削除されます。",
	"c_cpp.configuration.vcFormat.space.insertAfterSemicolon.description": "すべてのセミコロンの後にスペースが挿入されます。",
	"c_cpp.configuration.vcFormat.space.removeAroundUnaryOperator.description": "単項演算子とそのオペランドの間のスペースが削除されます。",
	"c_cpp.configuration.vcFormat.space.aroundBinaryOperator.description": "2 項演算子の前後のスペース",
	"c_cpp.configuration.vcFormat.space.aroundAssignmentOperator.description": "代入演算子の前後のスペース",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.description": "ポインターおよび参照演算子の前後のスペース",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.left.description": "ポインターおよび参照演算子は左揃えになります。",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.center.description": "ポインターおよび参照演算子は中央揃えになります。",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.right.description": "ポインターおよび参照演算子は右揃えになります。",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.ignore.description": "ポインターおよび参照演算子はフォーマットされません。",
	"c_cpp.configuration.vcFormat.space.aroundTernaryOperator.description": "条件演算子の前後のスペース",
	"c_cpp.configuration.vcFormat.space.aroundOperators.insert.description": "演算子の前後にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.aroundOperators.remove.description": "演算子の前後のスペースが削除されます。",
	"c_cpp.configuration.vcFormat.space.aroundOperators.ignore.description": "スペースは入力されたとおりに残されます。",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.description": "ブロックの折り返しオプション",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.oneLiners.description": "[VC Format: New Line](VC 書式設定: 改行) 設定の値に関係なく、1 行に入力された完全なコード ブロックは、1 行に保持されます",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.allOneLineScopes.description": "[VC Format: New Line](VC 書式設定: 改行) 設定の値に関係なく、左および右中かっこが 1 行に入力されているコードは、1 行に保持されます",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.never.description": "コード ブロックは常に、[VC Format: New Line](VC 書式設定: 改行) 設定の値に基づいて書式設定されます",
	"c_cpp.configuration.clang_format_path.description": "clang-format の実行可能ファイルの完全なパスです。指定されておらず、clang-format が環境パスに置かれている場合は、それが使用されます。環境パスに見つからない場合は、拡張機能にバンドルされている clang-format のコピーが使用されます。",
	"c_cpp.configuration.clang_format_style.description": "次のコーディング スタイルが現在サポートされています: Visual Studio、LLVM、Google、Chromium、Mozilla、WebKit。\"file\" を使用して、現在のディレクトリまたは親ディレクトリにある .clang-format ファイルからスタイルを読み込みます。特定のパラメーターを設定するには、{キー: 値, ...} を使用します。たとえば、\"Visual Studio\" のスタイルは次のようになります: { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }",
	"c_cpp.configuration.clang_format_fallbackStyle.description": "clang-format が \"file\" スタイルで呼び出されたものの .clang-format ファイルが見つからない場合に、フォールバックとして使用される定義済みスタイルの名前。使用可能な値は、Visual Studio、LLVM、Google、Chromium、Mozilla、WebKit、none です。または、{key: value, ...} を使用して特定のパラメーターを設定することもできます。たとえば、\"Visual Studio\" スタイルは次のようになります: { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }",
	"c_cpp.configuration.clang_format_sortIncludes.description": "設定されている場合、SortIncludes パラメーターによって決定されるインクルードの並べ替え動作がオーバーライドされます。",
	"c_cpp.configuration.intelliSenseEngine.description": "IntelliSense プロバイダーを制御します。\"Tag Parser\" の場合、コンテキストを意識しない \"fuzzy\" の結果が提供されます。\"Default\" の場合、コンテキストを意識する結果が返されます。\"Disabled\" の場合、C/C++ 言語サービスの機能がオフになります。",
	"c_cpp.configuration.intelliSenseEngineFallback.description": "#include エラーを含む翻訳単位に対して、IntelliSense エンジンをタグ パーサーに自動的に切り替えるかどうかを制御します。",
	"c_cpp.configuration.autocomplete.description": "オートコンプリート プロバイダーを制御します。\"Default\" の場合、アクティブな IntelliSense エンジンが使用されます。\"Disabled\" の場合、Visual Studio Code が提供する単語ベースの補完が使用されます。",
	"c_cpp.configuration.errorSquiggles.description": "IntelliSense エンジンによって検出された疑わしいコンパイル エラーを、エディターに報告するかどうかを制御します。この設定はタグ パーサー エンジンでは無視されます。",
	"c_cpp.configuration.dimInactiveRegions.description": "アクティブではないプリプロセッサ ブロックを、アクティブ コードと違う色づけにするかどうかを制御します。この設定は、IntelliSense が無効になっている場合、または既定のハイ コントラスト テーマを使用している場合は効果がありません。",
	"c_cpp.configuration.inactiveRegionOpacity.description": "アクティブではないプリプロセッサ ブロックの不透明度を制御します。0.1 から 1.0 の範囲でスケーリングします。この設定は、アクティブでない領域の暗転が有効な場合にのみ適用されます。",
	"c_cpp.configuration.inactiveRegionForegroundColor.description": "アクティブでないプリプロセッサ ブロックのフォントの色を制御します。入力の形式は 16 進数の色コードまたは有効なテーマの色です。設定しない場合、既定ではエディターの構文カラー スキームになります。この設定は、アクティブでない領域の暗転が有効な場合にのみ適用されます。",
	"c_cpp.configuration.inactiveRegionBackgroundColor.description": "アクティブでないプリプロセッサ ブロックの背景色を制御します。入力の形式は 16 進数の色コードまたは有効なテーマの色です。設定しない場合、既定では透明になります。この設定は、アクティブでない領域の暗転が有効な場合にのみ適用されます。",
	"c_cpp.configuration.loggingLevel.description": "出力パネルでのログの詳細度。詳細度のレベルは、低いものから順に次のとおりです: None < Error < Warning < Information < Debug。",
	"c_cpp.configuration.autoAddFileAssociations.description": "ファイルが C/C++ ファイルからのナビゲーション操作の対象である場合に、files.associations に自動的に追加されるかどうかを制御します。",
	"c_cpp.configuration.workspaceParsingPriority.description": "アクティブではないワークスペース ファイルの解析にスリープを使用して、CPU の使用率が 100% になるのを回避するかどうかを制御します。highest/high/medium/low の値は、おおよそ CPU の使用率 100/75/50/25% に対応します。",
	"c_cpp.configuration.workspaceSymbols.description": "[ワークスペース内のシンボルへ移動] が呼び出されたときにクエリ結果に含めるシンボル。",
	"c_cpp.configuration.exclusionPolicy.description": "\"browse.path\" 配列内のパスを走査する際、コード ナビゲーションのデータベースに追加しなければならないファイルを決定するときに、いつ \"files.exclude\" 設定を使用するかを拡張機能に指示します。\"checkFolders\" は、除外フィルターがフォルダーごとに 1 度だけ評価されることを意味します (個々のファイルはチェックされません)。\"checkFilesAndFolders\" は、除外フィルターが、見つかるファイルおよびフォルダーすべてに対して評価されることを意味します。\"files.exclude\" 設定にフォルダーのみが含まれる場合は \"checkFolders\" が最適で、拡張機能がコード ナビゲーションのデータベースを初期化する速度が向上します。",
	"c_cpp.configuration.preferredPathSeparator.description": "#include のオートコンプリート結果でパス区切り記号として使用される文字です。",
	"c_cpp.configuration.simplifyStructuredComments.description": "true の場合、ホバーおよびオートコンプリートのヒントに、構造化されたコメントの特定のラベルのみが表示されます。それ以外の場合は、すべてのコメントが表示されます。",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.string.description": "複数行または単一行のコメント ブロックの先頭に置くパターン。継続のパターンの既定値は、複数行コメント ブロックの場合は ' * '、単一行コメント ブロックの場合はこの文字列です。",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.begin.description": "複数行または単一行のコメント ブロックの先頭に置くパターン。",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.continue.description": "複数行または単一行のコメント ブロック内で Enter を押したときに、次の行に挿入されるテキストです。",
	"c_cpp.configuration.commentContinuationPatterns.description": "複数行または単一行のコメント ブロック内で Enter キーが押されたときのエディターの動作を定義します。",
	"c_cpp.configuration.configurationWarnings.description": "構成プロバイダー拡張機能でソース ファイルの構成を提供できない場合に、ポップアップ通知を表示するかどうかを指定します。",
	"c_cpp.configuration.intelliSenseCachePath.description": "IntelliSense が使用する、キャッシュされたプリコンパイル済みヘッダーのフォルダー パスを定義します。既定のキャッシュ パスは、Windows では \"%LocalAppData%/Microsoft/vscode-cpptools\"、Linux では \"$XDG_CACHE_HOME/vscode-cpptools/\" (XDG_CACHE_HOME が定義されていない場合は、\"$HOME/.cache/vscode-cpptools/\" )、Mac では \"$HOME/Library/Caches/vscode-cpptools/\" です。パスが指定されていない場合、または指定したパスが無効な場合は、既定のパスが使用されます。",
	"c_cpp.configuration.intelliSenseCacheSize.description": "キャッシュされたプリコンパイル済みヘッダーの、ワークスペースごとのハード ドライブ領域の最大サイズ (MB 単位)。実際の使用量には多少の誤差があります。既定のサイズは 5120 MB です。サイズが 0 の場合、プリコンパイル済みヘッダーのキャッシュは無効になります。",
	"c_cpp.configuration.intelliSenseMemoryLimit.description": "IntelliSense プロセスのメモリ使用量の制限 (MB)。既定の制限は 4096 MB で、上限は 16 GB です。拡張機能は、制限を超えると IntelliSense プロセスをシャットダウンして再起動します。",
	"c_cpp.configuration.intelliSenseUpdateDelay.description": "修正後に IntelliSense によって更新が開始されるまでの遅延時間をミリ秒単位で制御します。",
	"c_cpp.configuration.default.includePath.description": "c_cpp_properties.json で \"includePath\" が指定されていない場合に構成で使用する値です。\"includePath\" が指定されている場合に、この設定から値を挿入するには、配列に \"${default}\" を追加します。",
	"c_cpp.configuration.default.defines.description": "\"defines\" が指定されていない場合に構成で使用される値、または \"defines\" 内に \"${default}\" が存在する場合に挿入される値です。",
	"c_cpp.configuration.default.macFrameworkPath.description": "\"macFrameworkPath\" が指定されていない場合に構成で使用される値、または \"macFrameworkPath\" 内に \"${default}\" が存在する場合に挿入される値です。",
	"c_cpp.configuration.default.windowsSdkVersion.description": "Windows で使用する Windows SDK インクルード パスのバージョン (例: '10.0.17134.0')。",
	"c_cpp.configuration.default.compileCommands.description": "\"compileCommands\" が指定されていないか、\"${default}\" に設定されている場合に、構成で使用される値です。",
	"c_cpp.configuration.default.forcedInclude.description": "\"forcedInclude\" が指定されていない場合に構成で使用される値、または \"forcedInclude\" 内に \"${default}\" が存在する場合に挿入される値です。",
	"c_cpp.configuration.default.intelliSenseMode.description": "\"intelliSenseMode\" が指定されていないか、\"${default}\" に設定されている場合に、構成で使用される値です。",
	"c_cpp.configuration.default.compilerPath.description": "\"compilerPath\" が指定されていないか、\"${default}\" に設定されている場合に、構成で使用される値です。",
	"c_cpp.configuration.default.compilerArgs.description": "\"compilerArgs\" が指定されていないか、\"${default}\" に設定されている場合に、構成で使用される値です。",
	"c_cpp.configuration.default.cStandard.description": "\"cStandard\" が指定されていないか、\"${default}\" に設定されている場合に、構成で使用される値です。",
	"c_cpp.configuration.default.cppStandard.description": "\"cppStandard\" が指定されていないか、\"${default}\" に設定されている場合に、構成で使用される値です。",
	"c_cpp.configuration.default.configurationProvider.description": "\"configurationProvider\" が指定されていないか、\"${default}\" に設定されている場合に、構成で使用される値です。",
	"c_cpp.configuration.default.browse.path.description": "\"browse.path\" が指定されていない場合に構成で使用される値、または \"browse.path\" 内に \"${default}\" が存在する場合に挿入される値です。",
	"c_cpp.configuration.default.browse.databaseFilename.description": "\"browse.databaseFilename\" が指定されていないか、\"${default}\" に設定されている場合に、構成で使用される値です。",
	"c_cpp.configuration.default.browse.limitSymbolsToIncludedHeaders.description": "\"browse.limitSymbolsToIncludedHeaders\" が指定されていないか、\"${default}\" に設定されている場合に、構成で使用される値です。",
	"c_cpp.configuration.default.systemIncludePath.description": "システム インクルード パスに使用する値です。これを設定した場合、\"compilerPath\" および \"compileCommands\" の設定によって取得されるシステム インクルード パスが上書きされます。",
	"c_cpp.configuration.default.enableConfigurationSquiggles.description": "拡張機能が、c_cpp_properties.json で検出されたエラーを報告するかどうかを制御します。",
	"c_cpp.configuration.default.customConfigurationVariables.description": "\"customConfigurationVariables\" が設定されていない場合に構成で使用される値、または \"customConfigurationVariables\" 内に \"${default}\" がキーとして存在する場合に挿入される値です。",
	"c_cpp.configuration.updateChannel.description": "\"Insider\" に設定すると、拡張機能の最新の Insider ビルドが自動的にダウンロードされてインストールされます。これには、次期バージョンの機能とバグ修正が含まれています。",
	"c_cpp.configuration.experimentalFeatures.description": "\"experimental\" の機能を使用できるかどうかを制御します。",
	"c_cpp.configuration.suggestSnippets.description": "true の場合、スニペットは言語サーバーによって提供されます。",
	"c_cpp.configuration.enhancedColorization.description": "有効にすると、IntelliSense に基づいてコードが色分けされます。この設定は、intelliSenseEngine が \"Default\" に設定されている場合にのみ適用されます。",
	"c_cpp.configuration.codeFolding.description": "有効にした場合、コードの折りたたみの範囲は言語サーバーによって指定されます。",
	"c_cpp.configuration.vcpkg.enabled.markdownDescription": "[vcpkg 依存関係マネージャー](https://aka.ms/vcpkg/) の統合サービスを有効にします。",
	"c_cpp.configuration.addNodeAddonIncludePaths.description": "依存関係にある場合は、nan および node-addon-api からのインクルード パスを追加します。",
	"c_cpp.configuration.renameRequiresIdentifier.description": "true の場合、'シンボルの名前変更' には有効な C/C++ 識別子が必要です。",
	"c_cpp.configuration.autocompleteAddParentheses.description": "true の場合、関数呼び出しの後に \"(\" が自動的に追加されます。その場合は、\"editor.autoClosingBrackets\" 設定の値に応じて、\")\" も追加される場合があります。",
	"c_cpp.configuration.filesExclude.description": "フォルダー (\"C_Cpp.exclusionPolicy\" が変更された場合はファイルも) を除外するための glob パターンを構成します。これらは C/c + + の拡張機能に固有であり、\"files. exclude\" に加えて構成しますが、\"files. exclude\" とは異なり、[エクスプローラー] ビューからは削除されません。glob パターンの詳細については、[こちら](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) を参照してください。",
	"c_cpp.configuration.filesExcludeBoolean.description": "ファイル パスの照合基準となる glob パターン。これを true または false に設定すると、パターンがそれぞれ有効/無効になります。",
	"c_cpp.configuration.filesExcludeWhen.description": "一致するファイルの兄弟をさらにチェックします。一致するファイル名の変数として $(basename) を使用します。",
	"c_cpp.configuration.debugger.useBacktickCommandSubstitution.description": "True の場合、デバッガー シェルのコマンド置換では古いバックティック (`) が使用されます。",
	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: その他の参照結果",
	"c_cpp.contributes.viewsWelcome.contents": "launch.json に関する詳細については、[C/C++ デバッグを構成する](https://code.visualstudio.com/docs/cpp/launch-json-reference) を参照してください。",
	"c_cpp.debuggers.pipeTransport.description": "これを指定すると、デバッガーにより、別の実行可能ファイルをパイプとして使用してリモート コンピューターに接続され、VS Code と MI 対応のデバッガー バックエンド実行可能ファイル (gdb など) との間で標準入出力が中継されます。",
	"c_cpp.debuggers.pipeTransport.default.pipeProgram": "パイプ プログラム名の完全修飾パスを入力してください (例: '/usr/bin/ssh')",
	"c_cpp.debuggers.pipeTransport.default.debuggerPath": "対象マシン上のデバッガーへの完全なパス。例: /usr/bin/gdb。",
	"c_cpp.debuggers.pipeTransport.debuggerPath.description": "対象マシン上のデバッガーへの完全なパス。例: /usr/bin/gdb。",
	"c_cpp.debuggers.pipeTransport.pipeCwd.description": "パイプ プログラムに渡す作業ディレクトリの完全修飾パス。",
	"c_cpp.debuggers.pipeTransport.pipeProgram.description": "実行するパイプ コマンドの完全修飾パス。",
	"c_cpp.debuggers.pipeTransport.pipeArgs.description": "接続を構成するためにパイプ プログラムに渡すコマンド ライン引数。",
	"c_cpp.debuggers.pipeTransport.pipeEnv.description": "パイプ プログラムに渡す環境変数。",
	"c_cpp.debuggers.pipeTransport.quoteArgs.description": "pipeProgram の個々の引数に (スペースやタブなどの) 文字が含まれる場合に引用符で囲むかどうか。'false' に設定すると、デバッガー コマンドが自動的に引用符で囲まれることはなくなります。既定値は 'true' です。",
	"c_cpp.debuggers.logging.description": "どの種類のメッセージをデバッグ コンソールに記録する必要があるかを決定するオプションのフラグです。",
	"c_cpp.debuggers.logging.exceptions.description": "例外メッセージをデバッグ コンソールに記録するかどうかを決定するオプションのフラグです。既定値は true です。",
	"c_cpp.debuggers.logging.moduleLoad.description": "モジュール読み込みイベントをデバッグ コンソールに記録するかどうかを決定するオプションのフラグです。既定値は true です。",
	"c_cpp.debuggers.logging.programOutput.description": "プログラムの出力をデバッグ コンソールに記録するかどうかを決定するオプションのフラグです。既定値は true です。",
	"c_cpp.debuggers.logging.engineLogging.description": "診断デバッグ エンジンのメッセージをデバッグ コンソールに記録するかどうかを決定するオプションのフラグです。既定値は false です。",
	"c_cpp.debuggers.logging.trace.description": "診断アダプター コマンドのトレースをデバッグ コンソールに記録するかどうかを決定するオプションのフラグです。既定値は false です。",
	"c_cpp.debuggers.logging.traceResponse.description": "診断アダプター コマンドと応答トレースをデバッグ コンソールに記録するかどうかを決定するオプションのフラグです。既定値は false です",
	"c_cpp.debuggers.cppvsdbg.logging.threadExit.description": "スレッドの終了メッセージをデバッグ コンソールに記録するかどうかを決定するオプションのフラグです。既定値: false。",
	"c_cpp.debuggers.cppvsdbg.logging.processExit.description": "ターゲット プロセスの終了メッセージをデバッグ コンソールに記録するかどうかを決定するオプションのフラグです。既定値: true。",
	"c_cpp.debuggers.text.description": "実行するデバッガー コマンドです。",
	"c_cpp.debuggers.description.description": "コマンドの説明 (省略可能)。",
	"c_cpp.debuggers.ignoreFailures.description": "true に設定すると、コマンドの失敗は無視されます。既定値は false です。",
	"c_cpp.debuggers.program.description": "プログラムの実行可能ファイルへの完全なパス。",
	"c_cpp.debuggers.args.description": "プログラムに渡すコマンド ライン引数。",
	"c_cpp.debuggers.cppdbg.type.description": "エンジンの種類。\"cppdbg\" でなければなりません。",
	"c_cpp.debuggers.cppvsdbg.type.description": "エンジンの種類。\"cppvsdbg\" でなければなりません。",
	"c_cpp.debuggers.targetArchitecture.description": "デバッグ対象のアーキテクチャ。このパラメーターを設定しない場合は、自動的に検出されます。可能な値は、x86、arm、arm64、mips、x64、amd64、x86_64 です。",
	"c_cpp.debuggers.cwd.description": "ターゲットの作業ディレクトリです",
	"c_cpp.debuggers.setupCommands.description": "基礎となるデバッガーをセットアップするために実行する 1 つ以上の GDB/LLDB コマンド。例: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }]。",
	"c_cpp.debuggers.customLaunchSetupCommands.description": "指定した場合、ターゲットを起動するために使われる既定のコマンドが、他のいくつかのコマンドに置き換えられます。たとえば、ターゲット プロセスにアタッチするためには、\"-target-attach\" と指定します。空のコマンド リストを指定すると、起動コマンドは何とも置き換えられません。これは、デバッガーにコマンド ライン オプションとして起動オプションが提供されている場合に便利です。例: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }]。",
	"c_cpp.debuggers.launchCompleteCommand.description": "デバッガーが完全にセットアップされた後に、ターゲット プロセスを実行するために実行するコマンド。可能な値は、\"exec-run\"、\"exec-continue\"、\"None\" です。既定値は \"exec-run\" です。",
	"c_cpp.debuggers.cppdbg.visualizerFile.description": "このプロセスをデバッグするときに使用する .natvis ファイルです。このオプションは GDB の再フォーマットと互換性がありません。この設定を使用する場合は、\"showDisplayString\" も参照してください。",
	"c_cpp.debuggers.cppvsdbg.visualizerFile.description": "このプロセスをデバッグするときに使用する .natvis ファイルです。",
	"c_cpp.debuggers.showDisplayString.description": "visualizerFile を指定すると、showDisplayString により表示文字列が有効になります。このオプションをオンにすると、デバッグ中にパフォーマンスが低下する可能性があります。",
	"c_cpp.debuggers.environment.description": "プログラムの環境に追加する環境変数。例: [ { \"name\": \"config\", \"value\": \"Debug\" } ], not [ { \"config\": \"Debug\" } ]。",
	"c_cpp.debuggers.envFile.description": "環境変数の定義を含むファイルへの絶対パスです。このファイルには、行ごとに等号で区切られたキーと値のペアがあります。例: キー=値",
	"c_cpp.debuggers.additionalSOLibSearchPath.description": ".so ファイルの検索に使用する、セミコロンで区切られたディレクトリの一覧です。例: \"c:\\dir1;c:\\dir2\"。",
	"c_cpp.debuggers.MIMode.description": "MIDebugEngine が接続するコンソール デバッガーを示します。許可されている値は \"gdb\" \"lldb\" です。",
	"c_cpp.debuggers.miDebuggerPath.description": "MI デバッガー (gdb など) へのパス。これを指定しないと、デバッガーの検索はパスから開始されます。",
	"c_cpp.debuggers.miDebuggerArgs.description": "MI デバッガー (gdb など) の追加の引数。",
	"c_cpp.debuggers.miDebuggerServerAddress.description": "接続先の MI デバッガー サーバーのネットワークアドレスです (例: localhost: 1234)。",
	"c_cpp.debuggers.stopAtEntry.description": "オプションのパラメーターです。true の場合、デバッガーはターゲットのエントリポイントで停止します。processId が渡された場合は効果はありません。",
	"c_cpp.debuggers.debugServerPath.description": "起動するデバッグ サーバーの完全なパス (省略可能)。既定値は null です。これは、\"miDebugServerAddress\"、または \"-target-select remote <server:port>\" を実行する \"customSetupCommand\" を含む独自のサーバーのいずれかと接合して使用されます。",
	"c_cpp.debuggers.debugServerArgs.description": "デバッグ サーバー引数 (省略可能)。既定値は null です。",
	"c_cpp.debuggers.serverStarted.description": "デバッグ サーバー出力から検索する、サーバー開始のパターン (省略可能)。既定値は null です。",
	"c_cpp.debuggers.filterStdout.description": "サーバー開始のパターンを stdout ストリームから検索し、stdout をデバッグ出力にログ記録します。既定値は true です。",
	"c_cpp.debuggers.filterStderr.description": "サーバー開始のパターンを stderr ストリームから検索し、stderr をデバッグ出力にログ記録します。既定値は false です。",
	"c_cpp.debuggers.serverLaunchTimeout.description": "デバッガーが debugServer の起動を待機する時間 (ミリ秒、省略可能)。既定値は 10000 です。",
	"c_cpp.debuggers.coreDumpPath.description": "指定したプログラムのコア ダンプ ファイルへの完全なパス (省略可能)。既定値は null です。",
	"c_cpp.debuggers.cppdbg.externalConsole.description": "true の場合、デバッグ対象のためにコンソールが起動します。false の場合、Linux および Windows では、統合コンソールに表示されます。",
	"c_cpp.debuggers.cppvsdbg.externalConsole.description": "['コンソール' で非推奨] true の場合、デバッグ対象のためにコンソールが起動します。false の場合、コンソールは起動しません。",
	"c_cpp.debuggers.cppvsdbg.console.description": "デバッグ ターゲットを起動する場所です。定義されていない場合、既定は 'internalConsole' です。",
	"c_cpp.debuggers.cppvsdbg.console.internalConsole.description": "VS Code デバッグ コンソールに出力します。これはコンソール入力の読み取りをサポートしていません (例: 'std::cin' または 'scanf')",
	"c_cpp.debuggers.cppvsdbg.console.integratedTerminal.description": "VS Code の統合ターミナルです",
	"c_cpp.debuggers.cppvsdbg.console.externalTerminal.description": "コンソール アプリケーションは、外部ターミナル ウィンドウで起動されます。このウィンドウは再起動のシナリオで再利用され、アプリケーションが終了しても自動的に消えません。",
	"c_cpp.debuggers.cppvsdbg.console.newExternalWindow.description": "コンソール アプリケーションは、アプリケーションの停止時に終了する独自の外部コンソール ウィンドウで起動されます。コンソール以外のアプリケーションはターミナルなしで実行され、stdout および stderr は無視されます。",
	"c_cpp.debuggers.avoidWindowsConsoleRedirection.description": "true の場合、統合ターミナルのサポートに必要なデバッグ対象のコンソール リダイレクトが無効になります。",
	"c_cpp.debuggers.sourceFileMap.description": "デバッグ エンジンに渡されたソース ファイル マッピングです (オプション)。例: '{ \"/original/source/path\":\"/current/source/path\" }'",
	"c_cpp.debuggers.processId.anyOf.description": "デバッガーをアタッチするためのオプションのプロセス ID です。\"${command:pickProcess}\" を使用すれば、アタッチ先のローカルで実行されているプロセスの一覧を取得できます。一部のプラットフォームでは、プロセスにアタッチするには管理者特権が必要です。",
	"c_cpp.debuggers.symbolSearchPath.description": "シンボル (つまり、pdb) ファイルの検索に使用する、セミコロンで区切られたディレクトリの一覧です。例: \"c:\\dir1;c:\\dir2\"。",
	"c_cpp.debuggers.dumpPath.description": "指定したプログラムのダンプ ファイルへの完全なパスです (オプション)。例: \"c:\\temp\\app.dmp\"。既定値は null です。",
	"c_cpp.debuggers.enableDebugHeap.description": "false の場合、プロセスはデバッグ ヒープを無効にして起動します。これにより、環境変数 '_NO_DEBUG_HEAP' は '1' に設定されます。",
	"c_cpp.debuggers.symbolLoadInfo.description": "シンボルの読み込みを明示的に制御します。",
	"c_cpp.debuggers.symbolLoadInfo.loadAll.description": "true の場合、すべてのライブラリのシンボルが読み込まれます。それ以外の場合、solib シンボルは読み込まれません。既定値は true です。",
	"c_cpp.debuggers.symbolLoadInfo.exceptionList.description": "セミコロン '; ' で区切られたファイル名の一覧 (ワイルドカードも使用可能)。LoadAll の動作が変更されます。LoadAll が true の場合は、一覧内の名前に一致するライブラリのシンボルを読み込まないでください。それ以外の場合は、一致するライブラリのシンボルのみを読み込んでください。例: \"foo.so;bar.so\"",
	"c_cpp.debuggers.requireExactSource.description": "PDB に一致する現在のソース コードを必要とする省略可能なフラグです。",
	"c_cpp.debuggers.stopAtConnect.description": "True の場合、デバッガーはターゲットへの接続後に停止する必要があります。False の場合、デバッガーは接続後も続行します。既定値は false です。",
	"c_cpp.debuggers.hardwareBreakpoints.description": "リモート ターゲットのハードウェア ブレークポイントの動作を明示的に制御します。",
	"c_cpp.debuggers.hardwareBreakpoints.require.description": "True の場合、常にハードウェア ブレークポイントを使用します。既定値は false です。",
	"c_cpp.debuggers.hardwareBreakpoints.limit.description": "使用可能なハードウェア ブレークポイントのオプション制限。\"必須\" が true、\"制限\" が 0 より大きい場合にのみ適用されます。既定値は 0 です。",
	"c_cpp.taskDefinitions.name.description": "タスクの名前",
	"c_cpp.taskDefinitions.command.description": "コンパイルを実行するコンパイラまたはスクリプトへのパス",
	"c_cpp.taskDefinitions.args.description": "コンパイラまたはコンパイル スクリプトに渡す追加の引数",
	"c_cpp.taskDefinitions.options.description": "追加のコマンド オプション",
	"c_cpp.taskDefinitions.options.cwd.description": "実行されるプログラムまたはスクリプトの現在の作業ディレクトリ。省略すると、Code の現在のワークスペースのルートが使用されます。",
	"c_cpp.taskDefinitions.detail.description": "タスクのその他の詳細",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.description": "同じソース ツリーへの現在およびコンパイル時のパスです。EditorPath で見つかったファイルは、ブレークポイントの一致のために CompileTimePath パスにマップされ、スタック トレースの場所を表示するときに CompileTimePath から EditorPath にマップされます。",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.editorPath.description": "エディターで使用されるソース ツリーへのパスです。",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.useForBreakpoints.description": "このエントリをスタック フレームの場所のマッピングにのみ使用する場合は False です。ブレークポイントの位置を指定するときにもこのエントリを使用する必要がある場合は True です。",
	"c_cpp.debuggers.symbolOptions.description": "シンボル (.pdb ファイル) の検索と読み込みの方法を制御するオプションです。",
	"c_cpp.debuggers.VSSymbolOptions.description": "デバッグ アダプターへのシンボルの検索と読み込みのための構成を提供します。",
	"c_cpp.debuggers.VSSymbolOptions.searchPaths.description": ".pdb ファイルを検索するためのシンボル サーバー URL (例: http​://MyExampleSymbolServer) の配列またはディレクトリ (例: /build/symbols) の配列です。これらのディレクトリは、既定の場所 (すなわちモジュールと、 pdb が最初にドロップされたパスの横) に加えて、検索されます。",
	"c_cpp.debuggers.VSSymbolOptions.searchMicrosoftSymbolServer.description": "'true' の場合、Microsoft シンボルサーバー (https​://msdl.microsoft.com​/download/symbols) がシンボルの検索パスに追加されます。指定しない場合、このオプションの既定値は 'false' です。",
	"c_cpp.debuggers.VSSymbolOptions.cachePath.description": "シンボル サーバーからダウンロードされたシンボルがキャッシュされるディレクトリです。指定しない場合、Windows では、デバッガーは既定で %TEMP% \\SymbolCache に設定されます。",
	"c_cpp.debuggers.VSSymbolOptions.moduleFilter.description": "デバッガーが、シンボル (.pdb ファイル) を読み込もうとするモジュール (.dll ファイル) を制御するオプションを提供します。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.description": "デバッグ アダプターへのシンボルを読み込むための構成を提供します。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.description": "モジュール フィルターが動作する 2 つの基本的な動作モードを制御します。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.loadAllButExcluded.enumDescriptions": "モジュールが 'excludedModules' 配列内にある場合を除き、すべてのモジュールのシンボルを読み込みます。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.loadOnlyIncluded.enumDescriptions": "モジュールが 'includedModules' 配列に含まれていない場合、または 'includeSymbolsNextToModules' 設定を介して含まれていない場合は、どのモジュールに対してもシンボルを読み込もうとしてはいけません。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.excludedModules.description": "デバッガーがシンボルを読み込んではいけないモジュールの配列です。ワイルドカード (例: MyCompany.*.dll) がサポートされています。\n\n'mode' が 'loadAllButExcluded' に設定されていない限り、このプロパティは無視されます。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.includedModules.description": "デバッガーがシンボルを読み込むべきモジュールの配列です。ワイルドカード (例: MyCompany.*.dll) がサポートされています。\n\n'mode' が 'loadOnlyIncluded' に設定されていない限り、このプロパティは無視されます。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.includeSymbolsNextToModules.description": "True の場合、'includedModules' 配列にないモジュールの場合、デバッガーはモジュール自体と起動中の実行可能ファイルの横を確認しますが、シンボル検索リストのパスはチェックしません。このオプションの既定値は 'true' です。\n\n'mode' が 'loadOnlyIncluded' に設定されていない限り、このプロパティは無視されます。"
}