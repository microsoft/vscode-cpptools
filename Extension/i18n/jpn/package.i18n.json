/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"c_cpp.capabilities.untrustedWorkspaces.description": "複数の設定によって、プロセスがワークスペースに対してローカルに実行される場合があります。例 C_Cpp.clang_format_path C_Cpp.codeAnalysis.clangTidy.path、 C_Cpp.addNodeAddonIncludePaths、 C_Cpp.default.compilerPath、 C_Cpp.default.configurationProvider、 C_Cpp.default.compileCommands。およびc_cpp_properties.json.と同等のプロパティ。",
	"c_cpp.command.configurationSelect.title": "構成を選択する...",
	"c_cpp.command.configurationProviderSelect.title": "構成プロバイダーを変更する...",
	"c_cpp.command.configurationEditJSON.title": "構成の編集 (JSON)",
	"c_cpp.command.configurationEditUI.title": "構成の編集 (UI)",
	"c_cpp.command.switchHeaderSource.title": "ヘッダー/ソースの切り替え",
	"c_cpp.command.enableErrorSquiggles.title": "エラーの波線を有効にする",
	"c_cpp.command.disableErrorSquiggles.title": "エラーの波線を無効にする",
	"c_cpp.command.toggleIncludeFallback.title": "インクルード エラー時の IntelliSense エンジンのフォールバックの切り替え",
	"c_cpp.command.toggleDimInactiveRegions.title": "非アクティブな領域の色づけの切り替え",
	"c_cpp.command.resetDatabase.title": "IntelliSense データベースのリセット",
	"c_cpp.command.takeSurvey.title": "アンケートに答える",
	"c_cpp.command.restartIntelliSenseForFile.title": "アクティブ ファイルに対して IntelliSense を再起動する",
	"c_cpp.command.logDiagnostics.title": "診断のログ記録",
	"c_cpp.command.referencesViewGroupByType.title": "参照渡し型でグループ化",
	"c_cpp.command.referencesViewUngroupByType.title": "参照の種類によるグループ化解除",
	"c_cpp.command.rescanWorkspace.title": "ワークスペースの再スキャン",
	"c_cpp.command.vcpkgClipboardInstallSuggested.title": "vcpkg インストール コマンドをクリップボードにコピーする",
	"c_cpp.command.vcpkgOnlineHelpSuggested.title": "vcpkg のヘルプ ページへのアクセス",
	"c_cpp.command.generateEditorConfig.title": "VC 形式の設定からの EditorConfig コンテンツの生成",
	"c_cpp.command.GoToNextDirectiveInGroup.title": "条件付きグループ内の次のプリプロセッサ ディレクティブへ移動",
	"c_cpp.command.GoToPrevDirectiveInGroup.title": "条件付きグループ内の前のプリプロセッサ ディレクティブへ移動",
	"c_cpp.command.RunCodeAnalysisOnActiveFile.title": "アクティブ ファイルで Code Analysis を実行する",
	"c_cpp.command.RunCodeAnalysisOnOpenFiles.title": "開いているファイルで Code Analysis を実行する",
	"c_cpp.command.RunCodeAnalysisOnAllFiles.title": "すべてのファイルで Code Analysis を実行する",
	"c_cpp.command.RemoveAllCodeAnalysisProblems.title": "すべてのコード分析の問題をクリアする",
	"c_cpp.command.BuildAndDebugFile.title": "C/C++ ファイルのデバッグ",
	"c_cpp.command.BuildAndRunFile.title": "C/C++ ファイルの実行",
	"c_cpp.command.AddDebugConfiguration.title": "デバッグ構成の追加",
	"c_cpp.configuration.maxConcurrentThreads.markdownDescription": "言語サービスの処理に使用する同時実行スレッドの最大数。値はヒントであり、常に使用されるとは限りません。既定値の `null` (空) では、使用可能な論理プロセッサの数が使用されます。",
	"c_cpp.configuration.maxCachedProcesses.markdownDescription": "言語サービスの処理に使用するキャッシュされたプロセスの最大数。既定値の `null` (空) では、使用可能な論理プロセッサの数の 2 倍が使用されます。",
	"c_cpp.configuration.maxMemory.markdownDescription": "言語サービスの処理に使用できる最大メモリ (MB 単位)。このメモリ使用量を超えると、キャッシュされ、同時に実行されるプロセスの数が少なくなります。既定値の `null` (空) では、システムの空きメモリが使用されます。",
	"c_cpp.configuration.intelliSense.maxCachedProcesses.markdownDescription": "実行を続けるための IntelliSense プロセスの最大数。既定値の `null` (空) では、`#C_Cpp.maxCachedProcesses#` から継承された値が使用されます。",
	"c_cpp.configuration.intelliSense.maxMemory.markdownDescription": "古い IntelliSense プロセスは、このメモリ使用量 (MB) を超えた後に新しいプロセスが作成される前にシャットダウンされます。既定値の `null` (空) では、`#C_Cpp.maxMemory#` から継承された値が使用されます。",
	"c_cpp.configuration.references.maxConcurrentThreads.markdownDescription": "[すべての参照の検索] と [名前の変更] に使用する同時実行スレッドの最大数。既定値の `null` (空) では、`#C_Cpp.maxConcurrentThreads#` から継承された値が使用されます。",
	"c_cpp.configuration.references.maxCachedProcesses.markdownDescription": "[すべての参照の検索] と [名前の変更] のメモリ内に保持するプロセスの最大数。既定値の `0` は、この機能を無効にします。`null` 値 (空) は、`#C_Cpp.maxCachedProcesses#` から継承された値を使用します。",
	"c_cpp.configuration.references.maxMemory.markdownDescription": "このメモリ使用量 (MB 単位) を超えると、キャッシュされ、同時に実行される `すべての参照の検索` プロセスと `名前の変更` プロセスの数が少なくなります。既定値の `null` (空) では、`#C_Cpp.maxMemory#` から継承された値が使用されます。",
	"c_cpp.configuration.codeAnalysis.maxConcurrentThreads.markdownDescription": "コード分析に使用する同時実行スレッドの最大数。既定値の `null` (空) では、`#C_Cpp.maxConcurrentThreads#` から継承された値の半分が使用されます。",
	"c_cpp.configuration.codeAnalysis.maxMemory.markdownDescription": "このメモリ使用量 (MB 単位) を超えると、同時に実行されるコード分析プロセスの数が減少します。既定値の `null` (空) では、`#C_Cpp.maxMemory#` から継承された値が使用されます。",
	"c_cpp.configuration.codeAnalysis.updateDelay.markdownDescription": "`#files.autoSave#` が `afterDelay` で `#C_Cpp.codeAnalysis.runAutomatically#` が `true` の場合に、編集から保存がトリガーされてからコード分析が処理を開始するまでの遅延をミリ秒単位で制御します。",
	"c_cpp.configuration.codeAnalysis.exclude.markdownDescription": "コード分析用にフォルダーとファイルを除外するための glob パターンを構成します。ワークスペース フォルダーの下にないファイルは常に除外されます。`#files.exclude#` および `#C_Cpp.files.exclude#` から値を継承します。glob パターンの詳細については、[こちら](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) を参照してください。",
	"c_cpp.configuration.codeAnalysis.excludeBoolean.markdownDescription": "ファイル パスの照合基準となる glob パターン。これを `true` または `false` に設定すると、パターンがそれぞれ有効/無効になります。",
	"c_cpp.configuration.codeAnalysis.excludeWhen.markdownDescription": "一致するファイルの兄弟をさらにチェックします。一致するファイル名の変数として `$(basename)` を使用します。",
	"c_cpp.configuration.codeAnalysis.runAutomatically.markdownDescription": "`true` の場合、ファイルを開いたり保存したりすると、コード分析が自動的に実行されます。",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showDisable.markdownDescription": "'true' の場合、使用可能な場合 (次回コード分析が実行される時) に 'Disable' コード アクションが表示されます。'Disable' コード アクションを使用すると、警告コードが 'C_Cpp.codeAnalysis.clangTidy.checks.disabled' 設定に追加されます。",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showDocumentation.markdownDescription": "'true' の場合、使用可能な場合 (次回コード分析が実行されるときに) [ドキュメントの表示] コード アクションが表示されます。",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.description": "使用可能な 'Clear' コード分析の問題コード アクション オプションを制御します。その他のオプションを表示するように設定を変更すると、コード分析を再び実行することが必要になる場合があります。",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.None.description": "'クリア' コード アクションを表示しません。",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.AllOnly.description": "[すべてクリア] コード アクションのみを表示します (型が 1 つだけの場合は [すべてクリア<type>] ' を、問題が 1 つしかない場合は [クリア] を選択します)。",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.AllAndAllType.description": "[すべてクリア] コード アクション (複数の問題の種類がある場合) と [すべての<type>をクリアする] コード アクションを表示する (または、<type>に問題が 1 つだけある場合は [これをクリア] を表示する)",
	"c_cpp.configuration.codeAnalysis.clangTidy.codeAction.showClear.AllAndAllTypeAndThis.description": "[すべてクリア] (複数の問題の種類がある場合)、[すべての<type>のクリア] (<type>に複数の問題がある場合)、'これをクリア' コード アクションを表示する",
	"c_cpp.configuration.codeAnalysis.clangTidy.enabled.markdownDescription": "`true` の場合、 `clang-tidy` を使用したコード分析が有効になり、`#C_Cpp.codeAnalysis.runAutomatically#` が `true` (既定値) の場合に自動的に実行されます。",
	"c_cpp.configuration.codeAnalysis.clangTidy.path.markdownDescription": "`clang-tidy` の実行可能ファイルの完全なパスです。指定されておらず、`clang-tidy` が環境パスに置かれている場合は、それが使用されます。環境パスに見つからない場合は、拡張機能にバンドルされている `clang-tidy` が使用されます。",
	"c_cpp.configuration.codeAnalysis.clangTidy.config.markdownDescription": "YAML/JSON 形式の `clang-tidy` 構成を指定します: `{Checks: '-*,clang-analyzer-*',CheckOptions: [{キー: x, 値: y}]}`。値が空の場合、`clang-tidy` は親ディレクトリ内の各ソース ファイルの `.clang-tidy` という名前のファイルの検索を試みます。",
	"c_cpp.configuration.codeAnalysis.clangTidy.fallbackConfig.markdownDescription": "'#C_Cpp.codeAnalysis.clangTidy.config#' が設定されておらず、'clang-tidy' ファイルが見つからない場合に、フォールバックとして使用する YAML/JSON 形式の 'clang-tidy' 構成を指定します: '{Checks: '-*,clang-analyzer-*',CheckOptions: [{キー: x, 値: y}]}'。",
	"c_cpp.configuration.codeAnalysis.clangTidy.headerFilter.markdownDescription": "診断を出力するヘッダーの名前と一致する POSIX 拡張正規表現 (ERE)。各翻訳単位のメイン ファイルからの診断は常に表示されます。'${workspaceFolder}' 変数はサポートされています (`.clang-tidy` ファイルが存在しない場合は、既定のフォールバック値として使用されます)。このオプションが 'null' (空) でない場合は、`.clang-tidy` ファイルの 'HeaderFilterRegex' オプションがオーバーライドされます (存在する場合)。",
	"c_cpp.configuration.codeAnalysis.clangTidy.args.markdownDescription": "`clang-tidy` に渡す追加のコマンド ライン引数。これらは、同等の `C_Cpp.codeAnalysis.clangTidy.*` 設定よりも優先されます。",
	"c_cpp.configuration.codeAnalysis.clangTidy.useBuildPath.markdownDescription": "`true` および `compileCommands` が設定されている場合、ビルド引数が `--` の後に渡されるのではなく、`-p=<build-path>` 引数が `clang-tidy` に渡されます。システム インクルードを見つけることができるように環境変数が設定されていない場合には、機能しない可能性があります。",
	"c_cpp.configuration.codeAnalysis.clangTidy.checks.enabled.markdownDescription": "有効な `clang-tidy` チェックの一覧。値は、`.clang-tidy` ファイルの `Checks` または `#C_Cpp.codeAnalysis.clangTidy.config#` (存在する場合) に追加されます。既定のチェック `clang-analyzer-*` は、明示的に無効にされていない限り、常に使用されます。",
	"c_cpp.configuration.codeAnalysis.clangTidy.checks.disabled.markdownDescription": "無効な `clang-tidy` チェックの一覧。値は、`.clang-tidy` ファイルの `Checks` に追加され、存在する場合は `#C_Cpp.codeAnalysis.clangTidy.config#` に追加されます。",
	"c_cpp.configuration.formatting.description": "書式設定エンジンを構成します。",
	"c_cpp.configuration.formatting.clangFormat.markdownDescription": "`clang-format` を使用してコードがフォーマットされます。",
	"c_cpp.configuration.formatting.vcFormat.markdownDescription": "コードの書式設定に Visual C++ の書式設定エンジンが使用されます。",
	"c_cpp.configuration.formatting.Default.markdownDescription": "既定では、`clang-format` を使用してコードをフォーマットします。ただし、関連する設定を持つ `.editorconfig` ファイルがフォーマット対象のコードの近くに見つかり、`#C_Cpp.clang_format_style#` が既定値である場合は、Visual C++ フォーマット エンジンが使用されます: `file`。",
	"c_cpp.configuration.formatting.Disabled.markdownDescription": "コードの書式設定は無効になります。",
	"c_cpp.configuration.vcFormat.indent.braces.markdownDescription": "中かっこは、`#editor.tabSize#` 設定で指定された分だけインデントされます。",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.description": "新しい行のインデントの基準を決定します。",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.outermostParenthesis.description": "新しい行は、一番外側の始めかっこを基準にインデントされます。",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.innermostParenthesis.description": "新しい行は、最も内側にある始めかっこを基準にインデントされます。",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.statementBegin.description": "新しい行は、現在のステートメントの先頭を基準にインデントされます。",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.markdownDescription": "新しい行を入力すると、始めかっこの下か、 `#C_Cpp.vcFormat.indent.multiLineRelativeTo#` を基準にして配置されます。",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.alignToParenthesis.markdownDescription": "新しい行は、始めかっこの下に揃えられます。",
	"c_cpp.configuration.vcFormat.indent.withinParentheses.indent.markdownDescription": "新しい行は、`#C_Cpp.vcFormat.indent.multiLineRelativeTo#` を基準にしてインデントされます。",
	"c_cpp.configuration.vcFormat.indent.preserveWithinParentheses.description": "既存のコードで、かっこ内の新しい行のインデントの配置を既存のまま保持します。",
	"c_cpp.configuration.vcFormat.indent.caseLabels.markdownDescription": "ラベルは、`#editor.tabSize#` の設定で指定された分だけ、switch ステートメントを基準にインデントされます。",
	"c_cpp.configuration.vcFormat.indent.caseContents.markdownDescription": "`case` ブロック内のコードは、 `#editor.tabSize#` 設定で指定された分だけ、ラベルを基準にインデントされます。",
	"c_cpp.configuration.vcFormat.indent.caseContentsWhenBlock.markdownDescription": "ケース ステートメントに続く中かっこは、`#editor.tabSize#` 設定で指定された分だけインデントされます。",
	"c_cpp.configuration.vcFormat.indent.lambdaBracesWhenParameter.markdownDescription": "関数パラメーターとして使用されるラムダの中かっこは、ステートメントの先頭を基準に `#editor.tabSize#` 設定で指定された分だけインデントされます。",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.description": "goto ラベルの位置。",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.oneLeft.markdownDescription": "現在のコード インデントの左に、`#editor.tabSize#` 設定で指定された分だけ goto ラベルが配置されます",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.leftmostColumn.markdownDescription": "goto ラベルは、コードの左端に配置されます。",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.none.markdownDescription": "goto ラベルは書式設定されません。",
	"c_cpp.configuration.vcFormat.indent.preprocessor.description": "プリプロセッサ ディレクティブの位置。",
	"c_cpp.configuration.vcFormat.indent.preprocessor.oneLeft.markdownDescription": "現在のコード インデントの左に、`#editor.tabSize#` 設定で指定された分だけプリプロセッサ ディレクティブが配置されています。",
	"c_cpp.configuration.vcFormat.indent.preprocessor.leftmostColumn.markdownDescription": "プリプロセッサ ディレクティブは、コードの左端に配置されています。",
	"c_cpp.configuration.vcFormat.indent.preprocessor.none.markdownDescription": "プリプロセッサ ディレクティブはフォーマットされません。",
	"c_cpp.configuration.vcFormat.indent.accessSpecifiers.markdownDescription": "アクセス指定子は、クラスまたは構造体の定義を基準に `#editor.tabSize#` 設定で指定された分だけインデントされます。",
	"c_cpp.configuration.vcFormat.indent.namespaceContents.markdownDescription": "コードは、`#editor.tabSize#` 設定で指定された分だけ、それを囲んでいる名前空間を基準にインデントされます。",
	"c_cpp.configuration.vcFormat.indent.preserveComments.description": "コメントのインデントは、書式設定操作中に変更されません。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.namespace.description": "名前空間の左中かっこの位置。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.type.description": "型定義の左中かっこの位置。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.lambda.description": "ラムダ関数の左中かっこの位置。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.function.description": "関数の左中かっこの位置。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.block.description": "コントロール ブロックの左中かっこの位置。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.newLine.description": "始めかっこが新しい行に移動されます。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.sameLine.description": "左中かっこが同じ行に残され、各かっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.ignore.description": "左中かっこは書式設定されません。",
	"c_cpp.configuration.vcFormat.newLine.scopeBracesOnSeparateLines.description": "スコープの左および右中かっこを別々の行に配置します。",
	"c_cpp.configuration.vcFormat.newLine.closeBraceSameLine.emptyType.description": "型が空の場合は、終わりかっこを始めかっこと同じ行に移動します。",
	"c_cpp.configuration.vcFormat.newLine.closeBraceSameLine.emptyFunction.description": "関数の本体が空の場合は、終わりかっこを始めかっこと同じ行に移動します。",
	"c_cpp.configuration.vcFormat.newLine.beforeCatch.markdownDescription": "新しい行に `catch` および類似キーワードを配置します。",
	"c_cpp.configuration.vcFormat.newLine.beforeElse.markdownDescription": "新しい行に `else` を配置します。",
	"c_cpp.configuration.vcFormat.newLine.beforeWhileInDoWhile.markdownDescription": "`do`-`while` ループの `while` を新しい行に配置します。",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.description": "関数名と引数リストの左かっこの間のスペース。",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.insert.description": "関数の始めかっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.remove.description": "関数の左かっこの前にあるスペースは削除されます。",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.ignore.description": "スペースは入力されたとおりに残されます。",
	"c_cpp.configuration.vcFormat.space.withinParameterListParentheses.description": "関数パラメーター リストで始めかっこの後と終わりかっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.betweenEmptyParameterListParentheses.description": "関数パラメーター リストが空の場合、かっこ間にスペースが挿入されます。",
	"c_cpp.configuration.vcFormat.space.afterKeywordsInControlFlowStatements.description": "制御フロー ステートメント内のキーワードと始めかっこの間にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.withinControlFlowStatementParentheses.description": "制御フロー ステートメント内で始めかっこの後と終わりかっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.beforeLambdaOpenParenthesis.description": "ラムダ引数リストの始めかっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.withinCastParentheses.description": "C スタイル キャストで始めかっこの後と終わりかっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.afterCastCloseParenthesis.description": "C スタイル キャストの終わりかっこの後にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.withinExpressionParentheses.description": "かっこで囲まれた式で始めかっこの後と終わりかっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.beforeBlockOpenBrace.description": "スコープ ブロックの左中かっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.betweenEmptyBraces.description": "中かっこが空で、同じ行にある場合は、その間にスペースが挿入されます。",
	"c_cpp.configuration.vcFormat.space.beforeInitializerListOpenBrace.description": "均一初期化および初期化子リストの左中かっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.withinInitializerListBraces.description": "均一初期化および初期化子リストで左中かっこの後と右中かっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.preserveInInitializerList.description": "コンマの前後のスペースは、均一初期化および初期化子リストの中に保持されます。",
	"c_cpp.configuration.vcFormat.space.beforeOpenSquareBracket.description": "始め角かっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.withinSquareBrackets.description": "始め角かっこの後と終わり角かっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.beforeEmptySquareBrackets.description": "角かっこが空の場合、始めかっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.betweenEmptySquareBrackets.description": "角かっこが空の場合、空のかっこの間にスペースが挿入されます。",
	"c_cpp.configuration.vcFormat.space.groupSquareBrackets.description": "多次元配列で、かっこ間のすべてのスペースが削除されます。スペースを制御するその他の設定はオーバーライドされます。",
	"c_cpp.configuration.vcFormat.space.withinLambdaBrackets.description": "始め角かっこの後と終わり角かっこの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.betweenEmptyLambdaBrackets.description": "角かっこが空の場合、空のかっこの間にスペースが挿入されます。",
	"c_cpp.configuration.vcFormat.space.beforeComma.description": "すべてのコンマの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.afterComma.description": "すべてのコンマの後にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.removeAroundMemberOperators.description": "メンバー アクセス演算子、メンバーへのポインター演算子、スコープ解決演算子の前後のスペースは削除されます。",
	"c_cpp.configuration.vcFormat.space.beforeInheritanceColon.description": "クラス定義で継承された型のコロンの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.beforeConstructorColon.description": "コンストラクター定義のコロンの前にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.removeBeforeSemicolon.description": "すべてのセミコロンの前のスペースが削除されます。",
	"c_cpp.configuration.vcFormat.space.insertAfterSemicolon.description": "すべてのセミコロンの後にスペースが挿入されます。",
	"c_cpp.configuration.vcFormat.space.removeAroundUnaryOperator.description": "単項演算子とそのオペランドの間のスペースが削除されます。",
	"c_cpp.configuration.vcFormat.space.aroundBinaryOperator.description": "2 項演算子の前後のスペース。",
	"c_cpp.configuration.vcFormat.space.aroundAssignmentOperator.description": "代入演算子の前後のスペース。",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.description": "ポインターおよび参照演算子の前後のスペース。",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.left.description": "ポインターおよび参照演算子は左揃えになります。",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.center.description": "ポインターおよび参照演算子は中央揃えになります。",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.right.description": "ポインターおよび参照演算子は右揃えになります。",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.ignore.description": "ポインターおよび参照演算子はフォーマットされません。",
	"c_cpp.configuration.vcFormat.space.aroundTernaryOperator.description": "条件演算子の前後のスペース。",
	"c_cpp.configuration.vcFormat.space.aroundOperators.insert.description": "演算子の前後にスペースが追加されます。",
	"c_cpp.configuration.vcFormat.space.aroundOperators.remove.description": "演算子の前後のスペースが削除されます。",
	"c_cpp.configuration.vcFormat.space.aroundOperators.ignore.description": "スペースは入力されたとおりに残されます。",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.description": "ブロックの折り返しオプション。",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.oneLiners.markdownDescription": "`C_Cpp.vcFormat.newLine.*` 設定の値に関係なく、1 行に入力された完全なコード ブロックは、1 行に保持されます。",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.allOneLineScopes.markdownDescription": "`C_Cpp.vcFormat.newLine.*` 設定の値に関係なく、左および右中かっこが 1 行に入力されているコードは、1 行に保持されます。",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.never.markdownDescription": "コード ブロックは、常に `C_Cpp.vcFormat.newLine.*` 設定の値に基づいて書式設定されます。",
	"c_cpp.configuration.clang_format_path.markdownDescription": "`clang-format` の実行可能ファイルの完全なパスです。指定されておらず、`clang-format` が環境パスに置かれている場合は、それが使用されます。環境パスに見つからない場合は、拡張機能にバンドルされている `clang-format` が使用されます。",
	"c_cpp.configuration.clang_format_style.markdownDescription": "次のコーディング スタイルが現在サポートされています: `Visual Studio`、`LLVM`、`Google`、`Chromium`、`Mozilla`、`WebKit`、`Microsoft`、`GNU`、`file` を使用して、現在のディレクトリまたは親ディレクトリにある `.clang-format` ファイルからスタイルを読み込みます。特定のパラメーターを設定するには、`{キー: 値, ...}` を使用します。たとえば、`Visual Studio` のスタイルは次のようになります: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`。",
	"c_cpp.configuration.clang_format_fallbackStyle.markdownDescription": "`clang-format` が `file` スタイルで呼び出されたものの .`clang-format` ファイルが見つからない場合に、フォールバックとして使用される定義済みスタイルの名前。使用可能な値は、`Visual Studio`、`LLVM`、`Google、Chromium`、`Mozilla、WebKit`、`Microsoft`、`GNU`、`none` です。または、{キー: 値, ...} を使用して特定のパラメーターを設定することもできます。たとえば、\"Visual Studio\" スタイルは次のようになります: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`。",
	"c_cpp.configuration.clang_format_sortIncludes.markdownDescription": "設定されている場合、`SortIncludes` パラメーターによって決定されるインクルードの並べ替え動作がオーバーライドされます。",
	"c_cpp.configuration.intelliSenseEngine.description": "IntelliSense プロバイダーを制御します。",
	"c_cpp.configuration.intelliSenseEngine.default.description": "独立した IntelliSense プロセスを使用してコンテキストを認識する結果を提供します。",
	"c_cpp.configuration.intelliSenseEngine.tagParser.description": "コンテキストを認識しない\"あいまいな\"結果を提供します。 ",
	"c_cpp.configuration.intelliSenseEngine.disabled.description": "C/C++ 言語サービス機能をオフにします。",
	"c_cpp.configuration.intelliSenseEngineFallback.markdownDescription": "`#include` エラーを含む翻訳単位に対して、IntelliSense エンジンをタグ パーサーに自動的に切り替えるかどうかを制御します。",
	"c_cpp.configuration.autocomplete.markdownDescription": "オートコンプリート プロバイダーを制御します。`Disabled` になっていて、単語ベースの補完が必要な場合には、`\"[cpp]\": {\"editor.wordBasedSuggestions\": true}` を設定する必要があります (`c` および `cuda-cpp` 言語でも同様です)。",
	"c_cpp.configuration.autocomplete.default.description": "アクティブな IntelliSense エンジンを使用します。",
	"c_cpp.configuration.autocomplete.disabled.description": "Visual Studio Code によって提供される単語ベースの補完機能を使用します。",
	"c_cpp.configuration.errorSquiggles.description": "IntelliSense エンジンによって検出されたコンパイル エラーの疑いをエディターに報告するかどうかを制御します。また、インクルードが見つからない場合にコード分析の警告を報告するかどうかを制御します。この設定は、タグ パーサー エンジンによって無視されます。",
	"c_cpp.configuration.dimInactiveRegions.description": "アクティブではないプリプロセッサ ブロックを、アクティブ コードと違う色づけにするかどうかを制御します。この設定は、IntelliSense が無効になっている場合、または既定のハイ コントラスト テーマを使用している場合は効果がありません。",
	"c_cpp.configuration.inactiveRegionOpacity.markdownDescription": "アクティブではないプリプロセッサ ブロックの不透明度を制御します。`0.1` から `1.0` の範囲でスケーリングします。この設定は、アクティブでない領域の暗転が有効な場合にのみ適用されます。",
	"c_cpp.configuration.inactiveRegionForegroundColor.description": "アクティブでないプリプロセッサ ブロックのフォントの色を制御します。入力の形式は 16 進数の色コードまたは有効なテーマの色です。設定しない場合、既定ではエディターの構文カラー スキームになります。この設定は、アクティブでない領域の暗転が有効な場合にのみ適用されます。",
	"c_cpp.configuration.inactiveRegionBackgroundColor.description": "アクティブでないプリプロセッサ ブロックの背景色を制御します。入力の形式は 16 進数の色コードまたは有効なテーマの色です。設定しない場合、既定では透明になります。この設定は、アクティブでない領域の暗転が有効な場合にのみ適用されます。",
	"c_cpp.configuration.loggingLevel.markdownDescription": "出力パネルでのログの詳細度。詳細度のレベルは、低いものから順に次のとおりです: `None` < `Error` < `Warning` < `Information` < `Debug`。",
	"c_cpp.configuration.autoAddFileAssociations.markdownDescription": "ファイルが C/C++ ファイルからのナビゲーション操作の対象である場合に、`#files.associations#` に自動的に追加されるかどうかを制御します。",
	"c_cpp.configuration.workspaceParsingPriority.markdownDescription": "アクティブではないワークスペース ファイルの解析にスリープを使用して、CPU の使用率が 100% になるのを回避するかどうかを制御します。`highest`/`high`/`medium`/`low の値は、おおよそ CPU の使用率 100/75/50/25% に対応します。",
	"c_cpp.configuration.workspaceSymbols.description": "'ワークスペース内のシンボルへ移動' が呼び出されたときにクエリ結果に含めるシンボル。",
	"c_cpp.configuration.exclusionPolicy.markdownDescription": "`browse.path` 配列内のパスを走査する際、コード ナビゲーションのデータベースに追加する必要があるファイルを決定するときに、いつ `#files.exclude#` (および `#C_Cpp.files.exclude#`) 設定を使用するかを拡張機能に指示します。`#files.exclude#` 設定にフォルダーのみが含まれる場合は `checkFolders` が最適で、拡張機能がコード ナビゲーションのデータベースを初期化する速度が向上します。",
	"c_cpp.configuration.exclusionPolicy.checkFolders.description": "除外フィルターはフォルダーごとに 1 回だけ評価されます (個々のファイルはチェックされません)。",
	"c_cpp.configuration.exclusionPolicy.checkFilesAndFolders.description": "除外フィルターは、検出されたすべてのファイルとフォルダーに対して評価されます。",
	"c_cpp.configuration.preferredPathSeparator.markdownDescription": "`#include` のオートコンプリート結果でパス区切り記号として使用される文字です。",
	"c_cpp.configuration.simplifyStructuredComments.markdownDescription": "`true` の場合、ホバーおよびオートコンプリートのヒントに、構造化されたコメントの特定のラベルのみが表示されます。それ以外の場合は、すべてのコメントが表示されます。",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.string.markdownDescription": "複数行または単一行のコメント ブロックの先頭に置くパターン。継続のパターンの既定値は、複数行コメント ブロックの場合は ` * `、単一行コメント ブロックの場合はこの文字列です。",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.begin.description": "複数行または単一行のコメント ブロックの先頭に置くパターン。",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.continue.description": "複数行または単一行のコメント ブロック内で Enter を押したときに、次の行に挿入されるテキストです。",
	"c_cpp.configuration.commentContinuationPatterns.description": "複数行または単一行のコメント ブロック内で Enter キーが押されたときのエディターの動作を定義します。",
	"c_cpp.configuration.configurationWarnings.description": "構成プロバイダー拡張機能でソース ファイルの構成を提供できない場合に、ポップアップ通知を表示するかどうかを指定します。",
	"c_cpp.configuration.intelliSenseCachePath.markdownDescription": "IntelliSense が使用する、キャッシュされたプリコンパイル済みヘッダーのフォルダー パスを定義します。既定のキャッシュ パスは、Windows では `%LocalAppData%/Microsoft/vscode-cpptools`、Linux では `$XDG_CACHE_HOME/vscode-cpptools/` (XDG_CACHE_HOME が定義されていない場合は、`$HOME/.cache/vscode-cpptools/` )、macOS では `$HOME/Library/Caches/vscode-cpptools/` です。パスが指定されていない場合、または指定したパスが無効な場合は、既定のパスが使用されます。",
	"c_cpp.configuration.intelliSenseCacheSize.markdownDescription": "キャッシュされたプリコンパイル済みヘッダーの、ワークスペースごとのハード ドライブ領域の最大サイズ (MB 単位)。実際の使用量には多少の誤差があります。既定のサイズは `5120` MB です。サイズが `0` の場合、プリコンパイル済みヘッダーのキャッシュは無効になります。",
	"c_cpp.configuration.intelliSenseMemoryLimit.markdownDescription": "IntelliSense プロセスのメモリ使用量の制限 (MB)。既定では `4096` で、最大 `16384` です。拡張機能は、制限を超えると IntelliSense プロセスをシャットダウンして再起動します。",
	"c_cpp.configuration.intelliSenseUpdateDelay.description": "修正後に IntelliSense によって更新が開始されるまでの遅延時間をミリ秒単位で制御します。",
	"c_cpp.configuration.default.includePath.markdownDescription": "`c_cpp_properties.json` で ` includePath` が指定されていない場合に構成で使用する値。`IncludePath` が指定されている場合は、この設定から値を挿入するための `${default}` を配列に追加します。通常は、システム インクルードを含めることはできません。代わりに `#C_Cpp compilerPath #` を設定します。",
	"c_cpp.configuration.default.defines.markdownDescription": "`defines` が指定されていない場合に構成で使用される値、または `defines` 内に `${default}` が存在する場合に挿入される値。",
	"c_cpp.configuration.default.macFrameworkPath.markdownDescription": "`macFrameworkPath` が指定されていない場合に構成で使用される値、または `macFrameworkPath` 内に `${default}` が存在する場合に挿入される値。",
	"c_cpp.configuration.default.windowsSdkVersion.markdownDescription": "Windows で使用する Windows SDK インクルード パスのバージョン (例: `10.0.17134.0`)。",
	"c_cpp.configuration.default.compileCommands.markdownDescription": "`compileCommands` が指定されていないか、`${default}` に設定されている場合に、構成で使用される値。",
	"c_cpp.configuration.default.forcedInclude.markdownDescription": "`forcedInclude` が指定されていない場合に構成で使用される値、または `forcedInclude` 内に `${default}` が存在する場合に挿入される値。",
	"c_cpp.configuration.default.intelliSenseMode.markdownDescription": "`intelliSenseMode` が指定されていないか、`${default}` に設定されている場合に、構成で使用される値です。",
	"c_cpp.configuration.default.compilerPath.markdownDescription": "`compilerPath` が指定されていないか、`${default}` に設定されている場合に、構成で使用される値です。",
	"c_cpp.configuration.default.compilerArgs.markdownDescription": "`compilerArgs` が指定されていないか、`${default}` に設定されている場合に、構成で使用される値。",
	"c_cpp.configuration.default.cStandard.markdownDescription": "`cStandard` が指定されていないか、`${default}` に設定されている場合に、構成で使用される値。",
	"c_cpp.configuration.default.cppStandard.markdownDescription": "`cppStandard` が指定されていないか、`${default}` に設定されている場合に、構成で使用される値。",
	"c_cpp.configuration.default.configurationProvider.markdownDescription": "`configurationProvider` が指定されていないか、`${default}` に設定されている場合に、構成で使用される値。",
	"c_cpp.configuration.default.mergeConfigurations.markdownDescription": "インクルード パス、定義、強制インクルードを構成プロバイダーのものとマージするには、`true` に設定します。",
	"c_cpp.configuration.default.browse.path.markdownDescription": "`browse.path` が指定されていない場合に構成で使用される値、または `browse.path` 内に `${default}` が存在する場合に挿入される値です。",
	"c_cpp.configuration.default.browse.databaseFilename.markdownDescription": "`browse.databaseFilename` が指定されていないか、`${default}` に設定されている場合に、構成で使用される値。",
	"c_cpp.configuration.default.browse.limitSymbolsToIncludedHeaders.markdownDescription": "`browse.limitSymbolsToIncludedHeaders` が指定されていないか、`${default}` に設定されている場合に、構成で使用される値。",
	"c_cpp.configuration.default.systemIncludePath.markdownDescription": "システム インクルード パスに使用する値です。これを設定した場合、`compilerPath` および `compileCommands` の設定によって取得されるシステム インクルード パスが上書きされます。",
	"c_cpp.configuration.default.enableConfigurationSquiggles.markdownDescription": "拡張機能が、`c_cpp_properties.json` で検出されたエラーを報告するかどうかを制御します。",
	"c_cpp.configuration.default.customConfigurationVariables.markdownDescription": "`customConfigurationVariables` が設定されていない場合に構成で使用される値、または `customConfigurationVariables` 内に `${default}` がキーとして存在する場合に挿入される値。",
	"c_cpp.configuration.updateChannel.markdownDescription": "`Insider` に設定すると、拡張機能の最新の Insider ビルドが自動的にダウンロードされてインストールされます。これには、次期バージョンの機能とバグ修正が含まれています。",
	"c_cpp.configuration.updateChannel.deprecationMessage": "この設定は非推奨です。プレリリース版の拡張機能は、Marketplace で利用できるようになりました。",
	"c_cpp.configuration.default.dotConfig.markdownDescription": "`dotConfig` が指定されていない場合に構成で使用される値、または `dotConfig` 内に `${default}` が存在する場合に挿入される値。",
	"c_cpp.configuration.experimentalFeatures.description": "\"experimental\" の機能を使用できるかどうかを制御します。",
	"c_cpp.configuration.suggestSnippets.markdownDescription": "`true` の場合、スニペットは言語サーバーによって提供されます。",
	"c_cpp.configuration.enhancedColorization.markdownDescription": "有効にすると、IntelliSense に基づいてコードが色分けされます。この設定は、 `#C_Cpp.intelliSenseEngine#` が `Default` に設定されている場合にのみ適用されます。",
	"c_cpp.configuration.codeFolding.description": "有効にした場合、コードの折りたたみの範囲は言語サーバーによって指定されます。",
	"c_cpp.configuration.vcpkg.enabled.markdownDescription": "[vcpkg 依存関係マネージャー](https://aka.ms/vcpkg/) の統合サービスを有効にします。",
	"c_cpp.configuration.addNodeAddonIncludePaths.markdownDescription": "依存関係である場合は、`nan` および `node-addon-api` のインクルード パスを追加してください。",
	"c_cpp.configuration.renameRequiresIdentifier.markdownDescription": "`true` の場合、'シンボルの名前変更' には有効な C/C++ 識別子が必要です。",
	"c_cpp.configuration.autocompleteAddParentheses.markdownDescription": "`true` の場合、関数呼び出しの後に `(` が自動的に追加されます。その場合は、`#editor.autoClosingBrackets#` 設定の値に応じて、`)` も追加される場合があります。",
	"c_cpp.configuration.filesExclude.markdownDescription": "フォルダー (および `#C_Cpp.exclusionPolicy#` が変更されている場合はファイル) を除外するための glob パターンを構成します。これらは C/C++ 拡張機能に固有であり、 `#files.exclude#` に追加となりますが、 `#files.exclude#` とは異なります。現在のワークスペース フォルダーの外部のパスにも適用され、エクスプローラー ビューからは削除されません。glob パターンの詳細については、[こちら](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) を参照してください。",
	"c_cpp.configuration.filesExcludeBoolean.markdownDescription": "ファイル パスの照合基準となる glob パターン。これを `true` または `false` に設定すると、パターンがそれぞれ有効/無効になります。",
	"c_cpp.configuration.filesExcludeWhen.markdownDescription": "一致するファイルの兄弟をさらにチェックします。一致するファイル名の変数として `$(basename)` を使用します。",
	"c_cpp.configuration.debugger.useBacktickCommandSubstitution.markdownDescription": "`true` の場合、デバッガー シェルのコマンド置換では古いバックティック ``(`)`` が使用されます。",
	"c_cpp.configuration.legacyCompilerArgsBehavior.markdownDescription": "コンパイラ引数の設定でシェル エスケープを処理する方法について、v1.10.0 より前の動作を有効にします。v1.10.0 以降の引数配列で、シェル エスケープは既定で予期されなくなったか、サポートされていません。",
	"c_cpp.configuration.legacyCompilerArgsBehavior.deprecationMessage": "これは、v1.10.0 での修正された動作への切り替えをサポートするための一時的な設定です。",
	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: その他の参照結果",
	"c_cpp.contributes.viewsWelcome.contents": "launch.json に関する詳細については、[C/C++ デバッグを構成する](https://code.visualstudio.com/docs/cpp/launch-json-reference) を参照してください。",
	"c_cpp.configuration.debugShortcut.description": "C++ ファイルのエディター タイトル バーに [実行とデバッグ] 再生ボタンと [デバッグ構成の追加] 歯車を表示します。",
	"c_cpp.debuggers.pipeTransport.description": "これを指定すると、デバッガーにより、別の実行可能ファイルをパイプとして使用してリモート コンピューターに接続され、VS Code と MI 対応のデバッガー バックエンド実行可能ファイル (gdb など) との間で標準入出力が中継されます。",
	"c_cpp.debuggers.pipeTransport.default.pipeProgram": "パイプ プログラム名の完全修飾パスを入力してください (例: '/usr/bin/ssh')。",
	"c_cpp.debuggers.pipeTransport.default.debuggerPath": "対象マシン上のデバッガーへの完全なパス。例: /usr/bin/gdb。",
	"c_cpp.debuggers.pipeTransport.debuggerPath.description": "対象マシン上のデバッガーへの完全なパス。例: /usr/bin/gdb。",
	"c_cpp.debuggers.pipeTransport.pipeCwd.description": "パイプ プログラムに渡す作業ディレクトリの完全修飾パス。",
	"c_cpp.debuggers.pipeTransport.pipeProgram.description": "実行するパイプ コマンドの完全修飾パス。",
	"c_cpp.debuggers.pipeTransport.pipeArgs.description": "接続を構成するためにパイプ プログラムに渡すコマンド ライン引数。",
	"c_cpp.debuggers.pipeTransport.pipeEnv.description": "パイプ プログラムに渡す環境変数。",
	"c_cpp.debuggers.pipeTransport.quoteArgs.description": "pipeProgram の個々の引数に (スペースやタブなどの) 文字が含まれる場合に引用符で囲むかどうか。'false' に設定すると、デバッガー コマンドが自動的に引用符で囲まれることはなくなります。既定値は 'true' です。",
	"c_cpp.debuggers.logging.description": "どの種類のメッセージをデバッグ コンソールに記録する必要があるかを決定するオプションのフラグです。",
	"c_cpp.debuggers.logging.exceptions.description": "例外メッセージをデバッグ コンソールに記録するかどうかを決定するオプションのフラグです。既定値は true です。",
	"c_cpp.debuggers.logging.moduleLoad.description": "モジュール読み込みイベントをデバッグ コンソールに記録するかどうかを決定するオプションのフラグです。既定値は true です。",
	"c_cpp.debuggers.logging.programOutput.description": "プログラムの出力をデバッグ コンソールに記録するかどうかを決定するオプションのフラグです。既定値は true です。",
	"c_cpp.debuggers.logging.engineLogging.description": "診断デバッグ エンジンのメッセージをデバッグ コンソールに記録するかどうかを決定するオプションのフラグです。既定値は false です。",
	"c_cpp.debuggers.logging.trace.description": "診断アダプター コマンドのトレースをデバッグ コンソールに記録するかどうかを決定するオプションのフラグです。既定値は false です。",
	"c_cpp.debuggers.logging.traceResponse.description": "診断アダプター コマンドと応答トレースをデバッグ コンソールに記録するかどうかを決定するオプションのフラグです。既定値は false です",
	"c_cpp.debuggers.cppvsdbg.logging.threadExit.description": "スレッドの終了メッセージをデバッグ コンソールに記録するかどうかを決定するオプションのフラグです。既定値: false。",
	"c_cpp.debuggers.cppvsdbg.logging.processExit.description": "ターゲット プロセスの終了メッセージをデバッグ コンソールに記録するかどうかを決定するオプションのフラグです。既定値: true。",
	"c_cpp.debuggers.text.description": "実行するデバッガー コマンドです。",
	"c_cpp.debuggers.description.description": "コマンドの説明 (省略可能)。",
	"c_cpp.debuggers.ignoreFailures.description": "true に設定すると、コマンドの失敗は無視されます。既定値は false です。",
	"c_cpp.debuggers.program.description": "プログラムの実行可能ファイルへの完全なパス。",
	"c_cpp.debuggers.args.description": "プログラムに渡すコマンド ライン引数。",
	"c_cpp.debuggers.cppdbg.type.description": "エンジンの種類。\"cppdbg\" でなければなりません。",
	"c_cpp.debuggers.cppvsdbg.type.description": "エンジンの種類。\"cppvsdbg\" でなければなりません。",
	"c_cpp.debuggers.targetArchitecture.description": "デバッグ対象のアーキテクチャ。このパラメーターを設定しない場合は、自動的に検出されます。可能な値は、x86、arm、arm64、mips、x64、amd64、x86_64 です。",
	"c_cpp.debuggers.cwd.description": "ターゲットの作業ディレクトリです。",
	"c_cpp.debuggers.setupCommands.description": "基礎となるデバッガーをセットアップするために実行する 1 つ以上の GDB/LLDB コマンド。例: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }]。",
	"c_cpp.debuggers.postRemoteConnectCommands.description": "デバッグ サーバーへのリモート接続の後に実行される 1 つ以上のコマンド。",
	"c_cpp.debuggers.customLaunchSetupCommands.description": "指定した場合、ターゲットを起動するために使われる既定のコマンドが、他のいくつかのコマンドに置き換えられます。たとえば、ターゲット プロセスにアタッチするためには、\"-target-attach\" と指定します。空のコマンド リストを指定すると、起動コマンドは何とも置き換えられません。これは、デバッガーにコマンド ライン オプションとして起動オプションが提供されている場合に便利です。例: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }]。",
	"c_cpp.debuggers.launchCompleteCommand.description": "デバッガーが完全にセットアップされた後に、ターゲット プロセスを実行するために実行するコマンド。可能な値は、\"exec-run\"、\"exec-continue\"、\"None\" です。既定値は \"exec-run\" です。",
	"c_cpp.debuggers.cppdbg.visualizerFile.description": "このプロセスをデバッグするときに使用する .natvis ファイルです。このオプションは GDB の再フォーマットと互換性がありません。この設定を使用する場合は、\"showDisplayString\" も参照してください。",
	"c_cpp.debuggers.cppdbg.svdPath.description": "埋め込みデバイスの SVD ファイルへの完全なパス。",
	"c_cpp.debuggers.cppvsdbg.visualizerFile.description": "このプロセスをデバッグするときに使用する .natvis ファイルです。",
	"c_cpp.debuggers.showDisplayString.description": "visualizerFile を指定すると、showDisplayString により表示文字列が有効になります。このオプションをオンにすると、デバッグ中にパフォーマンスが低下する可能性があります。",
	"c_cpp.debuggers.environment.description": "プログラムの環境に追加する環境変数。例: [ { \"name\": \"config\", \"value\": \"Debug\" } ], not [ { \"config\": \"Debug\" } ]。",
	"c_cpp.debuggers.envFile.description": "環境変数の定義を含むファイルへの絶対パスです。このファイルには、行ごとに等号で区切られたキーと値のペアがあります。例: キー=値。",
	"c_cpp.debuggers.additionalSOLibSearchPath.description": ".so ファイルの検索に使用する、セミコロンで区切られたディレクトリの一覧です。例: \"c:\\dir1;c:\\dir2\"。",
	"c_cpp.debuggers.MIMode.description": "MIDebugEngine が接続するコンソール デバッガーを示します。許可されている値は \"gdb\" \"lldb\" です。",
	"c_cpp.debuggers.miDebuggerPath.description": "MI デバッガー (gdb など) へのパス。これを指定しないと、デバッガーの検索はパスから開始されます。",
	"c_cpp.debuggers.miDebuggerArgs.description": "MI デバッガー (gdb など) の追加の引数。",
	"c_cpp.debuggers.miDebuggerServerAddress.description": "接続先の MI デバッガー サーバーのネットワークアドレスです (例: localhost: 1234)。",
	"c_cpp.debuggers.stopAtEntry.description": "オプションのパラメーターです。true の場合、デバッガーはターゲットのエントリポイントで停止します。processId が渡された場合は効果はありません。",
	"c_cpp.debuggers.debugServerPath.description": "起動するデバッグ サーバーの完全なパス (省略可能)。既定値は null です。これは、\"miDebugServerAddress\"、または \"-target-select remote <server:port>\" を実行する \"customSetupCommand\" を含む独自のサーバーのいずれかと接合して使用されます。",
	"c_cpp.debuggers.debugServerArgs.description": "デバッグ サーバー引数 (省略可能)。既定値は null です。",
	"c_cpp.debuggers.serverStarted.description": "デバッグ サーバー出力から検索する、サーバー開始のパターン (省略可能)。既定値は null です。",
	"c_cpp.debuggers.filterStdout.description": "サーバー開始のパターンを stdout ストリームから検索し、stdout をデバッグ出力にログ記録します。既定値は true です。",
	"c_cpp.debuggers.filterStderr.description": "サーバー開始のパターンを stderr ストリームから検索し、stderr をデバッグ出力にログ記録します。既定値は false です。",
	"c_cpp.debuggers.serverLaunchTimeout.description": "デバッガーが debugServer の起動を待機する時間 (ミリ秒、省略可能)。既定値は 10000 です。",
	"c_cpp.debuggers.coreDumpPath.description": "指定したプログラムのコア ダンプ ファイルへの完全なパス (省略可能)。既定値は null です。",
	"c_cpp.debuggers.cppdbg.externalConsole.description": "true の場合、デバッグ対象のためにコンソールが起動します。false の場合、Linux および Windows では、統合コンソールに表示されます。",
	"c_cpp.debuggers.cppvsdbg.externalConsole.description": "['コンソール' で非推奨] true の場合、デバッグ対象のためにコンソールが起動します。false の場合、コンソールは起動しません。",
	"c_cpp.debuggers.cppvsdbg.console.description": "デバッグ ターゲットを起動する場所です。定義されていない場合、既定は 'internalConsole' です。",
	"c_cpp.debuggers.cppvsdbg.console.internalConsole.description": "VS Code デバッグ コンソールに出力します。これはコンソール入力の読み取りをサポートしていません (例: 'std::cin' または 'scanf')。",
	"c_cpp.debuggers.cppvsdbg.console.integratedTerminal.description": "VS Code の統合ターミナルです。",
	"c_cpp.debuggers.cppvsdbg.console.externalTerminal.description": "コンソール アプリケーションは、外部ターミナル ウィンドウで起動されます。このウィンドウは再起動のシナリオで再利用され、アプリケーションが終了しても自動的に消えません。",
	"c_cpp.debuggers.cppvsdbg.console.newExternalWindow.description": "コンソール アプリケーションは、アプリケーションの停止時に終了する独自の外部コンソール ウィンドウで起動されます。コンソール以外のアプリケーションはターミナルなしで実行され、stdout および stderr は無視されます。",
	"c_cpp.debuggers.avoidWindowsConsoleRedirection.description": "true の場合、統合ターミナルのサポートに必要なデバッグ対象のコンソール リダイレクトが無効になります。",
	"c_cpp.debuggers.sourceFileMap.description": "デバッグ エンジンに渡されたソース ファイル マッピングです (オプション)。例: '{ \"/original/source/path\":\"/current/source/path\" }'。",
	"c_cpp.debuggers.processId.anyOf.description": "デバッガーをアタッチするためのオプションのプロセス ID です。\"${command:pickProcess}\" を使用すれば、アタッチ先のローカルで実行されているプロセスの一覧を取得できます。一部のプラットフォームでは、プロセスにアタッチするには管理者特権が必要です。",
	"c_cpp.debuggers.symbolSearchPath.description": "シンボル (つまり、pdb) ファイルの検索に使用する、セミコロンで区切られたディレクトリの一覧です。例: \"c:\\dir1;c:\\dir2\"。",
	"c_cpp.debuggers.dumpPath.description": "指定したプログラムのダンプ ファイルへの完全なパスです (オプション)。例: \"c:\\temp\\app.dmp\"。既定値は null です。",
	"c_cpp.debuggers.enableDebugHeap.description": "false の場合、プロセスはデバッグ ヒープを無効にして起動します。これにより、環境変数 '_NO_DEBUG_HEAP' は '1' に設定されます。",
	"c_cpp.debuggers.symbolLoadInfo.description": "シンボルの読み込みを明示的に制御します。",
	"c_cpp.debuggers.symbolLoadInfo.loadAll.description": "true の場合、すべてのライブラリのシンボルが読み込まれます。それ以外の場合、solib シンボルは読み込まれません。既定値は true です。",
	"c_cpp.debuggers.symbolLoadInfo.exceptionList.description": "セミコロン '; ' で区切られたファイル名の一覧 (ワイルドカードも使用可能)。LoadAll の動作が変更されます。LoadAll が true の場合は、一覧内の名前に一致するライブラリのシンボルを読み込まないでください。それ以外の場合は、一致するライブラリのシンボルのみを読み込んでください。例: \"foo.so;bar.so\"。",
	"c_cpp.debuggers.requireExactSource.description": "PDB に一致する現在のソース コードを必要とする省略可能なフラグです。",
	"c_cpp.debuggers.stopAtConnect.description": "True の場合、デバッガーはターゲットへの接続後に停止する必要があります。False の場合、デバッガーは接続後も続行します。既定値は false です。",
	"c_cpp.debuggers.hardwareBreakpoints.description": "リモート ターゲットのハードウェア ブレークポイントの動作を明示的に制御します。",
	"c_cpp.debuggers.hardwareBreakpoints.require.description": "True の場合、常にハードウェア ブレークポイントを使用します。既定値は false です。",
	"c_cpp.debuggers.hardwareBreakpoints.limit.description": "使用可能なハードウェア ブレークポイントのオプション制限。\"必須\" が true、\"制限\" が 0 より大きい場合にのみ適用されます。既定値は 0 です。",
	"c_cpp.taskDefinitions.name.description": "タスクの名前。",
	"c_cpp.taskDefinitions.command.description": "コンパイルを実行するコンパイラまたはスクリプトへのパス。",
	"c_cpp.taskDefinitions.args.description": "コンパイラまたはコンパイル スクリプトに渡す追加の引数。",
	"c_cpp.taskDefinitions.options.description": "追加のコマンド オプション。",
	"c_cpp.taskDefinitions.options.cwd.description": "実行されるプログラムまたはスクリプトの現在の作業ディレクトリ。省略すると、Code の現在のワークスペースのルートが使用されます。",
	"c_cpp.taskDefinitions.detail.description": "タスクのその他の詳細。",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.description": "同じソース ツリーへの現在およびコンパイル時のパスです。EditorPath で見つかったファイルは、ブレークポイントの一致のために CompileTimePath パスにマップされ、スタック トレースの場所を表示するときに CompileTimePath から EditorPath にマップされます。",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.editorPath.description": "エディターで使用されるソース ツリーへのパスです。",
	"c_cpp.debuggers.sourceFileMap.sourceFileMapEntry.useForBreakpoints.description": "このエントリをスタック フレームの場所のマッピングにのみ使用する場合は False です。ブレークポイントの位置を指定するときにもこのエントリを使用する必要がある場合は True です。",
	"c_cpp.debuggers.symbolOptions.description": "シンボル (.pdb ファイル) の検索と読み込みの方法を制御するオプションです。",
	"c_cpp.debuggers.VSSymbolOptions.description": "デバッグ アダプターへのシンボルの検索と読み込みのための構成を提供します。",
	"c_cpp.debuggers.VSSymbolOptions.searchPaths.description": ".pdb ファイルを検索するためのシンボル サーバー URL (例: http​://MyExampleSymbolServer) の配列またはディレクトリ (例: /build/symbols) の配列です。これらのディレクトリは、既定の場所 (すなわちモジュールと、 pdb が最初にドロップされたパスの横) に加えて、検索されます。",
	"c_cpp.debuggers.VSSymbolOptions.searchMicrosoftSymbolServer.description": "'true' の場合、Microsoft シンボルサーバー (https​://msdl.microsoft.com​/download/symbols) がシンボルの検索パスに追加されます。指定しない場合、このオプションの既定値は 'false' です。",
	"c_cpp.debuggers.VSSymbolOptions.cachePath.description": "シンボル サーバーからダウンロードされたシンボルがキャッシュされるディレクトリです。指定しない場合、Windows では、デバッガーは既定で %TEMP% \\SymbolCache に設定されます。",
	"c_cpp.debuggers.VSSymbolOptions.moduleFilter.description": "デバッガーが、シンボル (.pdb ファイル) を読み込もうとするモジュール (.dll ファイル) を制御するオプションを提供します。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.description": "デバッグ アダプターへのシンボルを読み込むための構成を提供します。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.description": "モジュール フィルターが動作する 2 つの基本的な動作モードを制御します。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.loadAllButExcluded.enumDescriptions": "モジュールが 'excludedModules' 配列内にある場合を除き、すべてのモジュールのシンボルを読み込みます。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.mode.loadOnlyIncluded.enumDescriptions": "モジュールが 'includedModules' 配列に含まれていない場合、または 'includeSymbolsNextToModules' 設定を介して含まれていない場合は、どのモジュールに対してもシンボルを読み込もうとしてはいけません。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.excludedModules.description": "デバッガーがシンボルを読み込んではいけないモジュールの配列です。ワイルドカード (例: MyCompany.*.dll) がサポートされています。\n\n'mode' が 'loadAllButExcluded' に設定されていない限り、このプロパティは無視されます。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.includedModules.description": "デバッガーがシンボルを読み込むべきモジュールの配列です。ワイルドカード (例: MyCompany.*.dll) がサポートされています。\n\n'mode' が 'loadOnlyIncluded' に設定されていない限り、このプロパティは無視されます。",
	"c_cpp.debuggers.VSSymbolOptionsModuleFilter.includeSymbolsNextToModules.description": "True の場合、'includedModules' 配列にないモジュールの場合、デバッガーはモジュール自体と起動中の実行可能ファイルの横を確認しますが、シンボル検索リストのパスはチェックしません。このオプションの既定値は 'true' です。\n\n'mode' が 'loadOnlyIncluded' に設定されていない限り、このプロパティは無視されます。",
	"c_cpp.semanticTokenTypes.referenceType.description": "C++/CLI 参照型のスタイルです。",
	"c_cpp.semanticTokenTypes.cliProperty.description": "C++/CLI プロパティのスタイルです。",
	"c_cpp.semanticTokenTypes.genericType.description": "C++/CLI ジェネリック型のスタイルです。",
	"c_cpp.semanticTokenTypes.valueType.description": "C++/CLI 値型のスタイルです。",
	"c_cpp.semanticTokenTypes.templateFunction.description": "C++ テンプレート関数のスタイルです。",
	"c_cpp.semanticTokenTypes.templateType.description": "C++ テンプレート型のスタイルです。",
	"c_cpp.semanticTokenTypes.operatorOverload.description": "C++ 演算子のオーバーロードのスタイルです。",
	"c_cpp.semanticTokenTypes.memberOperatorOverload.description": "C++ 演算子のオーバーロードのメンバー関数のスタイルです。",
	"c_cpp.semanticTokenTypes.newOperator.description": "C++ の `new` または `delete` 演算子のスタイルです。",
	"c_cpp.semanticTokenTypes.customLiteral.description": "C++ ユーザー定義リテラルのスタイルです。",
	"c_cpp.semanticTokenTypes.numberLiteral.description": "C++ ユーザー定義リテラル数字のスタイルです。",
	"c_cpp.semanticTokenTypes.stringLiteral.description": "C++ ユーザー定義リテラル文字列のスタイルです。",
	"c_cpp.semanticTokenModifiers.global.description": "グローバルの記号に使用するスタイルです。",
	"c_cpp.semanticTokenModifiers.local.description": "ローカルの記号に使用するスタイルです。"
}