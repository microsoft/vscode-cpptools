# Query: json
# ContextLines: 1

1693 results - 183 files

CONTRIBUTING.md:
  14    * `processRuntimeDependencies` handles the downloading and installation of the OS-dependent files. Downloading code exists in [**packageManager.ts**](Extension/src/packageManager.ts).
  15:   * `downloadCpptoolsJsonPkg` handles the **cpptools.json**, which can be used to enable changes to occur mid-update, such as turning the `intelliSenseEngine` to `"Default"` for a certain percentage of users.
  16  * The debugger code is in the [**Debugger**](https://github.com/Microsoft/vscode-cpptools/tree/main/Extension/src/Debugger) folder.
  17  * [**LanguageServer/client.ts**](Extension/src/LanguageServer/client.ts) handles various language server functionality.
  18: * [**LanguageServer/configurations.ts**](Extension/src/LanguageServer/configurations.ts) handles functionality related to **c_cpp_properties.json**.
  19  * [**telemetry.ts**](Extension/src/telemetry.ts): Telemetry data gets sent to either `logLanguageServerEvent` or `logDebuggerEvent`.

launch.md:
  1: The documentation for debug configuration has moved to https://code.visualstudio.com/docs/cpp/launch-json-reference.

README.md:
  23  * [Debugging](https://code.visualstudio.com/docs/cpp/cpp-debug)
  24: * [Debug configuration](https://code.visualstudio.com/docs/cpp/launch-json-reference)
  25  * [Enable logging for IntelliSense or debugging](https://code.visualstudio.com/docs/cpp/enable-logging-cpp)

.github\actions\package-lock.json:
   239          "fast-deep-equal": "^3.1.1",
   240:         "fast-json-stable-stringify": "^2.0.0",
   241:         "json-schema-traverse": "^0.4.1",
   242          "uri-js": "^4.2.2"

   469          "js-yaml": "^3.13.1",
   470:         "json-stable-stringify-without-jsonify": "^1.0.1",
   471          "levn": "^0.3.0",

   480          "strip-ansi": "^5.2.0",
   481:         "strip-json-comments": "^3.0.1",
   482          "table": "^5.2.3",

   628      },
   629:     "fast-json-stable-stringify": {
   630        "version": "2.1.0",
   631:       "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
   632        "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",

   919      },
   920:     "json-schema-traverse": {
   921        "version": "0.4.1",
   922:       "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
   923        "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",

   925      },
   926:     "json-stable-stringify-without-jsonify": {
   927        "version": "1.0.1",
   928:       "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
   929        "integrity": "sha1-nbe1lJatPzz+8wp1FC0tkwrXJlE=",

  1274      },
  1275:     "strip-json-comments": {
  1276        "version": "3.1.1",
  1277:       "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
  1278        "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",

.github\actions\tsconfig.json:
  7  		"removeComments": false,
  8: 		"resolveJsonModule": true,
  9  		"sourceMap": true,

.github\actions\api\octokit.js:
   34              per_page: 100,
   35:             headers: { Accept: 'application/vnd.github.squirrel-girl-preview+json' },
   36          });

  126          core_1.debug('Reading config at ' + path);
  127:         const repoPath = `.github/${path}.json`;
  128          try {

  131                  if (data.encoding === 'base64' && data.content) {
  132:                     return JSON.parse(Buffer.from(data.content, 'base64').toString('utf-8'));
  133                  }

  135              }
  136:             throw Error('Found directory at config path when expecting file' + JSON.stringify(data));
  137          }
  138          catch (e) {
  139:             throw Error('Error with config file at ' + repoPath + ': ' + JSON.stringify(e));
  140          }

  386          }
  387:         console.log(`Got ${JSON.stringify(closingCommit)} as closing commit of ${this.issueData.number}`);
  388          return closingCommit;

.github\actions\api\octokit.ts:
   41  			per_page: 100,
   42: 			headers: { Accept: 'application/vnd.github.squirrel-girl-preview+json' },
   43  		})

  142  		debug('Reading config at ' + path)
  143: 		const repoPath = `.github/${path}.json`
  144  		try {

  148  				if (data.encoding === 'base64' && data.content) {
  149: 					return JSON.parse(Buffer.from(data.content, 'base64').toString('utf-8'))
  150  				}

  152  			}
  153: 			throw Error('Found directory at config path when expecting file' + JSON.stringify(data))
  154  		} catch (e) {
  155: 			throw Error('Error with config file at ' + repoPath + ': ' + JSON.stringify(e))
  156  		}

  450  
  451: 		console.log(`Got ${JSON.stringify(closingCommit)} as closing commit of ${this.issueData.number}`)
  452  		return closingCommit

.github\actions\common\utils.js:
  91  <!-- Context:
  92: ${JSON.stringify(github_1.context, null, 2)
  93          .replace(/<!--/gu, '<@--')

.github\actions\common\utils.ts:
  112  <!-- Context:
  113: ${JSON.stringify(context, null, 2)
  114  	.replace(/<!--/gu, '<@--')

.github\ISSUE_TEMPLATE\debugger.md:
  28  **To Reproduce**
  29: *Please include a code sample and `launch.json` configuration.*
  30  Steps to reproduce the behavior:

  37  **Additional context**
  38: *If applicable, please include logging by adding "logging": { "engineLogging": true, "trace": true, "traceResponse": true } in your `launch.json`*
  39  Add any other context about the problem here including log or error messages in your Debug Console or Output windows.

.github\ISSUE_TEMPLATE\general-extension.md:
  27  **To Reproduce**
  28: *Please include code sample and `task.json` files.*
  29  Steps to reproduce the behavior:

.github\ISSUE_TEMPLATE\language-service.md:
  40  **Code sample and logs**
  41: <!-- Please provide code sample, your c_cpp_properties.json and logs. -->
  42  - Code sample
  43  
  44: - Configurations in `c_cpp_properties.json`
  45  

.github\workflows\ci_linux.yml:
  32  
  33:       - name: Validate Extension/package.json
  34          run: yarn run pr-check

.github\workflows\ci_mac.yml:
  32  
  33:       - name: Validate Extension/package.json
  34          run: yarn run pr-check

.github\workflows\ci_windows.yml:
  32  
  33:       - name: Validate Extension/package.json
  34          run: yarn run pr-check

Build\loc\TranslationsImportExport.yml:
  36    inputs:
  37:     locProj: 'Build/loc/LocProject.json'
  38      outDir: '$(Build.ArtifactStagingDirectory)'

Code Samples\BoxConsoleSample\README.md:
  11  While editing a file in your workspace folder, you can open the command palette and select the `C/C++: Build and Debug Active File` command.
  12: This option will generate a tasks.json file for you, build your active source file, and then launch the debugger.
  13  

  17  While editing a file in a workspace folder, you can right click in the editor field and select the "Build and Debug Active File" context menu option.
  18: This option will generate a tasks.json file for you, build your active source file, and then launch the debugger.
  19  

  23  Another way to begin building and debugging your active file is to execute the command by pressing <kbd>F5</kbd>. This method will configure
  24: both a tasks.json and launch.json file for you, build your active source file, and then launch the debugger. 

Code Samples\Fib\README.md:
  2  
  3: This code sample is to show debugging. Update `launch.json` and `tasks.json` in the `.vscode` folder to use your setup to build and debug. 

Code Samples\Fib\.vscode\tasks.json:
  2      // See https://go.microsoft.com/fwlink/?LinkId=733558
  3:     // for the documentation about the tasks.json format
  4      "version": "2.0.0",

Documentation\Debugger\How To Debug MIEngine.md:
  40  Locate the following lines:
  41: ```json
  42  return {

  46  and add the following line to the object:
  47: ```json
  48  args: ["--pauseForDebugger"]

  96  ##### Create an empty project (one-time setup)
  97: 1. Open to a new folder and create `.vscode/launch.json`.
  98: 2. Create the following configuration in launch.json.
  99  ```

Documentation\LanguageServer\c_cpp_properties.json.md:
  1: The documentation for c_cpp_properties.json has moved to https://code.visualstudio.com/docs/cpp/c-cpp-properties-schema-reference.

Documentation\LanguageServer\Archive\MinGW.md:
   2  
   3: For developers using MinGW on Windows, we recommend you start with the following **c_cpp_properties.json** template.  Select "C/Cpp: Edit Configurations" from the command palette to create this file if you haven't already.
   4  

   6  
   7: ```json
   8  {

  45  
  46: ```json
  47  {

Documentation\LanguageServer\Archive\Windows Subsystem for Linux.md:
    2  
    3: To use the Windows Subsystem for Linux with this extension you need to add a configuration to your **c_cpp_properties.json** file which adds the necessary header paths from within the WSL filesystem to the `includePath`.
    4  
    5: Select "C/Cpp: Edit Configurations" from the command palette to create the **c_cpp_properties.json** file if you haven't already.
    6  

    8  
    9: For developers using Ubuntu with the current version of WSL released with the Fall Creators Update, you can add the following configuration template to your **c_cpp_properties.json** file.
   10  
   11: ```json
   12  {

   59  
   60: ```json
   61  {

   91  
   92: For developers using Bash on Ubuntu on Windows with the beta version of WSL from before the Fall Creators Update, you can add the following configuration template to your **c_cpp_properties.json** file.
   93  
   94: ```json
   95  {

  136  
  137: With these configurations, you should be all set up to use the new IntelliSense engine for linting, memberlist autocomplete, and quick info (tooltips).  Add `"C_Cpp.intelliSenseEngine": "Default"` to your **settings.json** file to try out the new IntelliSense engine.
  138  

Extension\.eslintrc.js:
  8      "parserOptions": {
  9:         "project": "tsconfig.json",
  10          "sourceType": "module"

Extension\.gitignore:
  26  # ignore generated localization file
  27: **/nls.*.json
  28: **/*.nls.json
  29: **/*.nls.*.json
  30  

Extension\.vscodeignore:
  24  # ignore development files
  25: tsconfig.json
  26: test.tsconfig.json
  27: tslint.json
  28  .eslintrc.js

Extension\c_cpp_properties.schema.json:
    1  {
    2:     "$schema": "http://json-schema.org/draft-04/schema#",
    3      "type": "object",

   62                      "compileCommands": {
   63:                         "description": "Full path to compile_commands.json file for the workspace.",
   64                          "type": "string"

  175                          "type": "object",
  176:                         "description": "Custom variables that can be queried through the command ${cpptools:activeConfigCustomVariable} to use for the input variables in launch.json or tasks.json.",
  177                          "patternProperties": {

  214              "default": true,
  215:             "description": "Controls whether the extension will report errors detected in c_cpp_properties.json."
  216          }

Extension\CHANGELOG.md:
    21  * Fix code folding causing `} else if` lines to be hidden. [#5521](https://github.com/microsoft/vscode-cpptools/issues/5521)
    22: * Fix empty `launch.json` being created when debug configuration selection is canceled. [#7517](https://github.com/microsoft/vscode-cpptools/issues/7517)
    23  * Fix Find All References on a global variable giving incorrect references to local variables. [#7702](https://github.com/microsoft/vscode-cpptools/issues/7702)

    85  * Fix clang-format formatting bug when new lines are removed. [#7360](https://github.com/microsoft/vscode-cpptools/issues/7360)
    86: * Change default cwd in launch.json to `${fileDirname}`. [#7362](https://github.com/microsoft/vscode-cpptools/issues/7362)
    87    * Syed Ahmad (@HackintoshwithUbuntu) [PR #7363](https://github.com/microsoft/vscode-cpptools/pull/7363)

   108  ### Bug Fixes
   109: * Fix extension not activating when `/.vscode/c_cpp_properties.json` exists but no C/C++ file is open. [#7344](https://github.com/microsoft/vscode-cpptools/issues/7344)
   110  * Fix logging for an invalid provider configuration.

   221  * Stop querying unsupported compilers. [#6314](https://github.com/microsoft/vscode-cpptools/issues/6314)
   222: * Fix an entry not found error for files in `compile_commands.json` that didn't initially exist. [#6311](https://github.com/microsoft/vscode-cpptools/issues/6311)
   223  * Fix IntelliSense errors with C++20 std::ranges in gcc/clang modes. [#6342](https://github.com/microsoft/vscode-cpptools/issues/6342)
   224: * Add a workaround for a missing compiler path for the `compile_commands.json` generated by Unreal Engine. [#6358](https://github.com/microsoft/vscode-cpptools/issues/6358)
   225  * Fix IntelliSense crash with coroutines. [#6363](https://github.com/microsoft/vscode-cpptools/issues/6363)

   232  * Disable Insiders prompt for Codespaces. [#6491](https://github.com/microsoft/vscode-cpptools/issues/6491)
   233: * Fix `compile_commands.json` not working correctly for `*.C` files. [#6497](https://github.com/microsoft/vscode-cpptools/issues/6497)
   234: * Show an error message when gdb can't be found when generating a `launch.json` (instead of using an invalid `miDebuggerPath`). [#6511](https://github.com/microsoft/vscode-cpptools/issues/6511)
   235  * Fix IntelliSense not supporting `__float128` (and `Q` literals) on x64 Linux. [#6574](https://github.com/microsoft/vscode-cpptools/issues/6574)

   240  * Fix the `else` snippet interfering with entering one line `else` statements. [#6582](https://github.com/microsoft/vscode-cpptools/issues/6582)
   241: * Stop showing an "unknown error" message after canceling the creation of a `launch.json`. [#6608](https://github.com/microsoft/vscode-cpptools/issues/6608)
   242  * Fix potential extension activation delay. [#6630](https://github.com/microsoft/vscode-cpptools/issues/6630)

   252  * Fix bugs with parsing of quotes and escape sequences in compiler args. [#6761](https://github.com/microsoft/vscode-cpptools/issues/6761)
   253: * Fix the configuration not showing in the status bar when `c_cpp_properties.json` is active. [#6765](https://github.com/microsoft/vscode-cpptools/issues/6765)
   254  * Fix compiler querying with compilers that do not output `__STD_VERSION__` by default (gcc <= 4.8.x). [#6792](https://github.com/microsoft/vscode-cpptools/issues/6792)

   311  * Fix bug with directories not getting created for browse.databaseFilename. [#5181](https://github.com/microsoft/vscode-cpptools/issues/5181)
   312: * Allow the debug configuration to wait for the preLaunchTask to complete before continuing on and resolving environment variables or processes that may have been set in the 'tasks.json'. [#5287](https://github.com/microsoft/vscode-cpptools/issues/5287)
   313  * Change the Windows SDK detection to require the shared, ucrt, and um folders. [#5817](https://github.com/microsoft/vscode-cpptools/issues/5817)
   314  * Fix issues with IntelliSense for clang-cl.exe. [#6075](https://github.com/microsoft/vscode-cpptools/issues/6075)
   315: * Fix "Comments are not permitted in JSON" error when `c_cpp_properties.json` is open but not active. [#6132](https://github.com/microsoft/vscode-cpptools/issues/6132)
   316  * Rename the C language standard setting values from c18 and gnu18 to c17 and gnu17. [#6105](https://github.com/microsoft/vscode-cpptools/issues/6105)

   321  * Fix a case where the main process could get stuck. [#6207](https://github.com/microsoft/vscode-cpptools/issues/6207)
   322: * Fix C files being treated as C++ files with compile_commands.json. [#6279](https://github.com/microsoft/vscode-cpptools/issues/6279)
   323  * Fix `Build and Debug Active File` race condition with EngineLogs. [#6304](https://github.com/microsoft/vscode-cpptools/pull/6304)
   324: * Fix changes to some `c_cpp_properties.json` properties not taking effect (until a reload) if `compileCommands` is set. [#6332](https://github.com/microsoft/vscode-cpptools/issues/6332)
   325  * Fix issue with compiler querying not handling various clang command line options correctly. [6359](https://github.com/microsoft/vscode-cpptools/issues/6356)

   330  * Fix the handling of various compiler arg pairs when querying compilers.
   331: * Avoid parsing entries in compile_commands.json for file types that we do not support.
   332  * Fixed an issue in which only C or C++ system headers were added to the browse path, rather than both.

   361    * Abhishek Pal (@devabhishekpal) [PR #5991](https://github.com/microsoft/vscode-cpptools/pull/5991)
   362: * Allow comments, trailing commas, etc. in `c_cpp_properties.json` [#5885](https://github.com/microsoft/vscode-cpptools/issues/5885)
   363: * Prevent comments from being removed from json files when the extension modifies them.
   364    * @dan-shaw [PR #5954](https://github.com/microsoft/vscode-cpptools/pull/5954)

   371  * Fix member completion in C code after an operator is used in an expression. [#2184](https://github.com/microsoft/vscode-cpptools/issues/2184)
   372: * Fix extension not creating `tasks.json` if the `.vscode` folder doesn’t exist. [#4280](https://github.com/microsoft/vscode-cpptools/issues/4280)
   373  * Fix installation of clang-format 10 with the online vsix. [#5194](https://github.com/microsoft/vscode-cpptools/issues/5194)

   384  * Fix Doxygen parameterHint comment to display for a parameter name that is followed by colon. [#5836](https://github.com/microsoft/vscode-cpptools/issues/5836)
   385: * Fix compiler querying when relative paths are used in `compile_commands.json`. [#5848](https://github.com/microsoft/vscode-cpptools/issues/5848)
   386  * Fix the compile commands compiler not being used if `C_Cpp.default.compilerPath` is set. [#5848](https://github.com/microsoft/vscode-cpptools/issues/5848)

   392  * Fix a bug with incorrect configuration of a file when using a custom configuration provider and no custom configuration is available for that file. This now falls back to the compiler info received from the configuration provider with the browse configuration.
   393: * Fix a bug in which making a modification to `c_cpp_properties.json` could result in custom configurations for currently open files being discarded and not re-requested.
   394  

   411  ### Enhancements
   412: * Automatically add `"${default}"` to the default `includePath` in `c_cpp_properties.json` if `C_Cpp.default.includePath` is set. [#3733](https://github.com/microsoft/vscode-cpptools/issues/3733)
   413  * Add configuration provider logging to `C/C++: Log Diagnostics`. [#4826](https://github.com/microsoft/vscode-cpptools/issues/4826)

   417    * bugengine (@bugengine) [PR #5453](https://github.com/microsoft/vscode-cpptools/pull/5453)
   418: * Add `quoteArgs` to `launch.json` schema. [PR #5639](https://github.com/microsoft/vscode-cpptools/pull/5639)
   419: * Add logs for a resolved `launch.json` if "engineLogging" is enabled. [PR #5644](https://github.com/microsoft/vscode-cpptools/pull/5644)
   420  * Add threadExit and processExit logging flags for 'cppvsdbg'. [PR #5652](https://github.com/microsoft/vscode-cpptools/pull/5652)

   439    * nukoyluoglu (@nukoyluoglu)
   440: * Fix `compile_commands.json` sometimes not updating. [#5687](https://github.com/microsoft/vscode-cpptools/issues/5687)
   441  * Add msys2 clang compilers to the compiler search list (previously only gcc was handled). [#5697](https://github.com/microsoft/vscode-cpptools/issues/5697)

   498  * Fix compiler querying when the '-include' argument is used. [#4655](https://github.com/microsoft/vscode-cpptools/issues/4655)
   499: * Fix the "Unable to load schema" error for `c_cpp_properties.json`. [#4841](https://github.com/microsoft/vscode-cpptools/issues/4841)
   500  * Change "Visual Studio" `clang_format_fallback_style` setting to use NamespaceIndentation All. [#5124](https://github.com/microsoft/vscode-cpptools/issues/5124)
   501  * Fix "C++98" and "C++0x" modes. [#5157](https://github.com/microsoft/vscode-cpptools/issues/5157), [#5225](https://github.com/microsoft/vscode-cpptools/issues/5225)
   502: * Improve the error message for multiroot projects using `compile_commands.json`. [#5160](https://github.com/microsoft/vscode-cpptools/issues/5160)
   503  * Fix some cpptools process crashes. [#5280](https://github.com/microsoft/vscode-cpptools/issues/5280)

   506  * Fix cpptools auto-restarting after a crash. [#5303](https://github.com/microsoft/vscode-cpptools/issues/5303)
   507: * Fix incorrect `c_cpp_properties.json` squiggles. [#5314](https://github.com/microsoft/vscode-cpptools/issues/5314), [#5322](https://github.com/microsoft/vscode-cpptools/issues/5322)
   508  * Fix error `The task provider for "C/C++" tasks unexpectedly provided a task of type "shell".` [#5388](https://github.com/microsoft/vscode-cpptools/issues/5388)

   524  * Rename language server processes to `cpptools` and `cpptools-srv` (IntelliSense process). [#4364](https://github.com/microsoft/vscode-cpptools/issues/4364)
   525: * Add support for `-iframework` in `compile_commands.json`. [#4819](https://github.com/microsoft/vscode-cpptools/issues/4819)
   526  * Add `cpptools.setActiveConfigName` command. [#4870](https://github.com/microsoft/vscode-cpptools/issues/4870)

   551  * Fix some settings not being editable in the UI. [PR #5126](https://github.com/microsoft/vscode-cpptools/pull/5126)
   552: * Fix `cpp_properties.json` error squiggles not appearing. [#5131](https://github.com/microsoft/vscode-cpptools/issues/5131)
   553  * Fix `search.exclude` not applying if there are > 1 symbols matching in the excluded file. [#5152](https://github.com/microsoft/vscode-cpptools/issues/5152)

   556  * Fix opened files external to the workspace folder being removed from the database during loading. [#5190](https://github.com/microsoft/vscode-cpptools/issues/5190)
   557: * Fix invalid `c_cpp_properties.json` and configuration UI warning `Compiler path with spaces and arguments is missing double quotes`. [#5215](https://github.com/microsoft/vscode-cpptools/issues/5215)
   558  * Fix environment variables used for the RunInTerminal Request. [MIEngine#979](https://github.com/microsoft/MIEngine/issues/979)

   567  * Fix Insiders channel not working on remote targets. [#3874](https://github.com/microsoft/vscode-cpptools/issues/3874)
   568: * Fix `compile_commands.json` prompt appearing when a configuration provider is used. [#3972](https://github.com/microsoft/vscode-cpptools/issues/3972)
   569  * Improve IntelliSense performance with range-v3. [#4414](https://github.com/microsoft/vscode-cpptools/issues/4414)

   604  * Show an error message when a Rename fails due to the symbol not being found. [#4510](https://github.com/microsoft/vscode-cpptools/issues/4510)
   605: * Fix `launch.json` creation due to localized strings containing quotes. [#4526](https://github.com/microsoft/vscode-cpptools/issues/4526)
   606: * Fix configuration error squiggles not being applied unless the setting was set in both `c_cpp_properties.json` and `settings.json`. [PR #4538](https://github.com/microsoft/vscode-cpptools/pull/4538)
   607  * Fix document symbol for Outline view and breadcrumbs on Windows 7. [#4536](https://github.com/microsoft/vscode-cpptools/issues/4536).

   616  ### Bug Fixes
   617: * Fix `launch.json` creation when using non-English display languages. [#4464](https://github.com/microsoft/vscode-cpptools/issues/4464)
   618  * Fix CHS translation. [#4422](https://github.com/microsoft/vscode-cpptools/issues/4422)

   629  ### Enhancements
   630: * App support for .rsp files in `compile_commands.json`. [#1718](https://github.com/microsoft/vscode-cpptools/issues/1718)
   631: * Add support for `SymbolLoadInfo` to `launch.json`. [#3324](https://github.com/microsoft/vscode-cpptools/issues/3324)
   632  * Enable `${workspaceFolder}` in `compilerPath` and `compilerArgs`. [#3440](https://github.com/microsoft/vscode-cpptools/issues/3440)

   648  * Fix `Find All References` incorrect results for string and comment references. [#4279](https://github.com/microsoft/vscode-cpptools/issues/4279)
   649: * Fix bug with forced includes in `compile_commands.json`. [#4293](https://github.com/microsoft/vscode-cpptools/issues/4293)
   650  * Fix `Find All References` giving `Not a Reference` for constructors of templated classes. [#4345](https://github.com/microsoft/vscode-cpptools/issues/4345)

   695  * Fix ".H" files not appearing in include completion results on Linux/macOS. [#3744](https://github.com/microsoft/vscode-cpptools/issues/3744)
   696: * Fix `compile_commands.json` file changes not updated. [#3864](https://github.com/microsoft/vscode-cpptools/issues/3864).
   697  * Fix `Failed to parse` error message in the open file scenario. [#3888](https://github.com/microsoft/vscode-cpptools/issues/3888)

   752  * Fix crash when tag parsing Objective-C code. [#3776](https://github.com/microsoft/vscode-cpptools/issues/3776)
   753: * Fix duplicate slashes getting added to `c_cpp_properties.json`. [PR #3778](https://github.com/microsoft/vscode-cpptools/pull/3778)
   754  * Fix `envFile` variable substitution. [#3836](https://github.com/microsoft/vscode-cpptools/issues/3836)

   761  ### Bug Fixes
   762: * Fix `launch.json` creation when `intelliSenseEngine` is `"Disabled"`. [#3583](https://github.com/microsoft/vscode-cpptools/issues/3583)
   763  * Fix C/C++ commands not working if the language service isn't activated. [#3615](https://github.com/microsoft/vscode-cpptools/issues/3615)

   768  ### New Features
   769: * Add a configuration UI editor to edit IntelliSense settings defined in the underlying `c_cpp_properties.json` file. [PR #3479](https://github.com/Microsoft/vscode-cpptools/pull/3479), [PR #3487](https://github.com/Microsoft/vscode-cpptools/pull/3487), [PR #3519](https://github.com/Microsoft/vscode-cpptools/pull/3519), [#3524](https://github.com/Microsoft/vscode-cpptools/issues/3524), [PR #3563](https://github.com/Microsoft/vscode-cpptools/pull/3563), [#3526](https://github.com/Microsoft/vscode-cpptools/issues/3526)
   770    * Add a new command `C/C++: Edit configurations (UI)` to open the UI editor.
   771:   * Replace the `C/C++: Edit configurations...` command with `C/C++: Edit configurations (JSON)` to open `c_cpp_properties.json`.
   772:   * The default whether to open the UI editor or JSON file is based on the `workbench.settings.editor` setting.
   773  * Add command `C/C++: Log Diagnostics` to log language service diagnostics. [PR #3489](https://github.com/Microsoft/vscode-cpptools/pull/3489)

   777  * Enable flag `/permissive-` as an argument to `compilerPath` with `cl.exe`. [#1589](https://github.com/Microsoft/vscode-cpptools/issues/1589), [#3446](https://github.com/Microsoft/vscode-cpptools/issues/3446)
   778: * Configuration squiggles for `c_cpp_properties.json` now validates if the setting values of `compilerPath` and `intelliSenseMode` match on Windows. [#2983](https://github.com/Microsoft/vscode-cpptools/issues/2983)
   779  * Enable `-fms-extensions` to be used as an argument to `compilerPath` on Linux/Mac. [#3063](https://github.com/Microsoft/vscode-cpptools/issues/3063)

   782  * Change the `Disabled` value for `C_Cpp.errorSquiggles` to stop showing missing header squiggles. [#3361](https://github.com/Microsoft/vscode-cpptools/issues/3361)
   783: * Add `enableConfigurationSquiggles` setting to allow squiggles to be disabled for `c_cpp_properties.json`. [#3403](https://github.com/Microsoft/vscode-cpptools/issues/3403)
   784  * Switch to using the `installExtension` command for offline/insider vsix installing (to reduce install failures). [#3408](https://github.com/Microsoft/vscode-cpptools/issues/3408)

   807  * Fix symbol parsing when `__MINGW_ATTRIB_*` is used. [#3390](https://github.com/Microsoft/vscode-cpptools/issues/3390)
   808: * Fix `compile_commands.json` configuration prompt being disabled per user instead of per folder. [PR #3399](https://github.com/Microsoft/vscode-cpptools/pull/3399)
   809  * Fix `.cmd` and `.bat` files not working for `compilerPath` on Windows. [#3428](https://github.com/Microsoft/vscode-cpptools/issues/3428)

   812  * Fix hover using the configuration of the active document instead of the hovered document. [#3452](https://github.com/Microsoft/vscode-cpptools/issues/3452)
   813: * Fix `c_cpp_properties.json` squiggles when the configuration name has regex characters. [PR #3478](https://github.com/Microsoft/vscode-cpptools/pull/3478)
   814  * Use the `editor.tabSize` setting instead of `2` when creating build tasks. [PR #3486](https://github.com/Microsoft/vscode-cpptools/pull/3486)
   815  * Fix some potential crashes on hover. [#3509](https://github.com/Microsoft/vscode-cpptools/issues/3509)
   816: * Fix for `NullReferenceException` occurring when `"args"` is not specified in `launch.json`. [#3532](https://github.com/Microsoft/vscode-cpptools/issues/3532)
   817  * Fix `Go to Definition` giving no results when IntelliSense doesn't find the symbol. [#3549](https://github.com/Microsoft/vscode-cpptools/issues/3549)

   824  ## Version 0.22.1: March 21, 2019
   825: * Fix `tasks.json` with single-line comments being overwritten when `Build and Debug Active File` is used. [#3327](https://github.com/Microsoft/vscode-cpptools/issues/3327)
   826: * Fix an invalid `compilerPath` property getting added to `tasks.json` after doing `Configure Task` with a C/C++ compiler.
   827  * Add IntelliSense caching for macOS 10.13 or later (0.22.0 only supported Windows and Linux).

   830  ### Major Changes
   831: * Add warning squiggles for invalid properties and paths in `c_cpp_properties.json`. [#2799](https://github.com/Microsoft/vscode-cpptools/issues/2799), [PR #3283](https://github.com/Microsoft/vscode-cpptools/pull/3283)
   832  * Add C/C++ compiler build tasks for compiling the active source file, with support for `F5` debugging and the `Build and Debug Active File` context menu command. [PR #3118](https://github.com/Microsoft/vscode-cpptools/pull/3118), [PR #3244](https://github.com/Microsoft/vscode-cpptools/pull/3244)

   851    * lh123 (@lh123) [PR #3221](https://github.com/Microsoft/vscode-cpptools/pull/3221)
   852: * Fix `compilerPath` not getting priority over the `compile_commands.json` compiler. [#3102](https://github.com/Microsoft/vscode-cpptools/issues/3102)
   853: * Fix Linux `compile_commands.json` compiler querying with relative paths. [#3112](https://github.com/Microsoft/vscode-cpptools/issues/3112)
   854  * Allow `*` in `includePath` to apply to `browse.path` when `browse.path` is not specified. [#3121](https://github.com/Microsoft/vscode-cpptools/issues/3121)

   858  * Fix remote process picker bug. [#2585](https://github.com/Microsoft/vscode-cpptools/issues/2585), [#3150](https://github.com/Microsoft/vscode-cpptools/issues/3150)
   859: * Fix command not found and empty `c_cpp_properties.json` if activation is too slow. [#3160](https://github.com/Microsoft/vscode-cpptools/issues/3160), [#3176](https://github.com/Microsoft/vscode-cpptools/issues/3176)
   860  * Fix `cppvsdbg` debugger showing `"An unspecified error has occurred."` for structured binding variables. [#3197](https://github.com/Microsoft/vscode-cpptools/issues/3197)
   861  * Fix bugs with the Insider reload prompt appearing when it shouldn't. [#3206](https://github.com/Microsoft/vscode-cpptools/issues/3206)
   862: * Fix variable expansion (e.g. `${env.HOME}`) not working when `${default}` is used in `c_cpp_properties.json`. [#3309](https://github.com/Microsoft/vscode-cpptools/issues/3309)
   863  * Fix other unreported IntelliSense engine bugs.

   906  * Fix crash when `//` is used in a recursive `includePath`. [#2987](https://github.com/Microsoft/vscode-cpptools/issues/2987)
   907: * Fix compiler in `compile_commands.json` not taking precedence over the `Cpp.default.compilerPath`. [#2793](https://github.com/Microsoft/vscode-cpptools/issues/2793)
   908  * Fix `#include` completion not working for symlinks. [#2843](https://github.com/Microsoft/vscode-cpptools/issues/2843)

   922  * Fix inactive regions not being disabled when falling back to the Tag Parser. [#2181](https://github.com/Microsoft/vscode-cpptools/issues/2181)
   923: * Fix `#include` completion not working with `compile_commands.json` or custom configuration providers. [#2242](https://github.com/Microsoft/vscode-cpptools/issues/2242)
   924  * Fix IntelliSense failing if recursive includes removes all paths. [#2442](https://github.com/Microsoft/vscode-cpptools/issues/2442)

   926  * Fix error squiggles sometimes not updating after typing. [#2448](https://github.com/Microsoft/vscode-cpptools/issues/2448)
   927: * Add support for Mac framework paths in `compile_commands.json`. [#2508](https://github.com/Microsoft/vscode-cpptools/issues/2508)
   928  * Fix IntelliSense-based `Go to Definition` falling back to the Tag Parser for definitions not in the TU. [#2536](https://github.com/Microsoft/vscode-cpptools/issues/2536), [#2677](https://github.com/Microsoft/vscode-cpptools/issues/2677)

   936  * Fix errors when a workspace folder isn't open. [#2613](https://github.com/Microsoft/vscode-cpptools/issues/2613), [#2691](https://github.com/Microsoft/vscode-cpptools/issues/2691)
   937: * Fix `-isystem` without a space after getting ignored in `compile_comamands.json`. [#2629](https://github.com/Microsoft/vscode-cpptools/issues/2629)
   938  * Fix Insiders update channel installation bugs. [#2636](https://github.com/Microsoft/vscode-cpptools/issues/2636), [#2685](https://github.com/Microsoft/vscode-cpptools/issues/2685)

   948  * Add support for v2 of the configuration provider API. [#2237](https://github.com/Microsoft/vscode-cpptools/issues/2237)
   949: * Fix bug with parsing definitions in `compile_commands.json`. [#2305](https://github.com/Microsoft/vscode-cpptools/issues/2305)
   950  * Fix `sh` failure when attaching to a remote Linux process. [#2444](https://github.com/Microsoft/vscode-cpptools/issues/2444)

   985  * Fix `compilerPath` not working with `${workspaceFolder}`. [#1982](https://github.com/Microsoft/vscode-cpptools/issues/1982)
   986: * Fix red flame getting stuck after modifying `c_cpp_properties.json`. [#2077](https://github.com/Microsoft/vscode-cpptools/issues/2077)
   987  * Don't add empty `windowsSDKVersion` if none exists. [#2300](https://github.com/Microsoft/vscode-cpptools/issues/2300)

  1005  * Fix crash when using designated initializer lists. [#1440](https://github.com/Microsoft/vscode-cpptools/issues/1440)
  1006: * Add `windowsSdkVersion` to `c_cpp_properties.json`. [#1585](https://github.com/Microsoft/vscode-cpptools/issues/1585)
  1007  * Add `${vcpkgRoot}` variable. [#1817](https://github.com/Microsoft/vscode-cpptools/issues/1817)

  1010  * Skip automatic parsing of source files in Mac system framework paths. [#2156](https://github.com/Microsoft/vscode-cpptools/issues/2156)
  1011: * Fix `Edit Configurations...` not working after `c_cpp_properties.json` is deleted. [#2214](https://github.com/Microsoft/vscode-cpptools/issues/2214)
  1012  * Fix indexing of the entire root drive on Windows when no is folder open. [#2216](https://github.com/Microsoft/vscode-cpptools/issues/2216)

  1046  ## Version 0.17.5: June 21, 2018
  1047: * Detect `compile_commands.json` and show prompt to use it. [#1297](https://github.com/Microsoft/vscode-cpptools/issues/1297)
  1048  * Change inactive regions from gray to translucent. [#1907](https://github.com/Microsoft/vscode-cpptools/issues/1907)

  1055  * Fix usage of `${config:section.setting}`. [#2165](https://github.com/Microsoft/vscode-cpptools/issues/2165)
  1056: * `browse.path` now inherits `includePath` if not set in `c_cpp_properties.json`.
  1057  * On Windows, `compilerPath` now populates with the guessed `cl.exe` path, and the `MSVC` include path is based on the `cl.exe` path.

  1097  * Add support for vcpkg. [PR #1886](https://github.com/Microsoft/vscode-cpptools/pull/1886)
  1098: * Add support for custom variables in `c_cpp_properties.json` via `env`. [#1857](https://github.com/Microsoft/vscode-cpptools/issues/1857), [#368](https://github.com/Microsoft/vscode-cpptools/issues/368)
  1099  * Stop automatically adding `/usr/include` to the `includePath`. [#1819](https://github.com/Microsoft/vscode-cpptools/issues/1819)
  1100  * Fix wrong configuration being used if there are four or more. [#1599](https://github.com/Microsoft/vscode-cpptools/issues/1599)
  1101: * Fix `c_cpp_properties.json` requiring write access. [#1790](https://github.com/Microsoft/vscode-cpptools/issues/1790)
  1102: * Change file not found in `compile_commands.json` message from an error to a warning. [#1783](https://github.com/Microsoft/vscode-cpptools/issues/1783)
  1103  * Fix an IntelliSense crash during completion requests. [#1782](https://github.com/Microsoft/vscode-cpptools/issues/1782)
  1104  * Update the installed clang-format to 6.0.
  1105: * Fix bug with `compile_commands.json` when "arguments" have both a switch and a value in the arg. [#1890](https://github.com/Microsoft/vscode-cpptools/issues/1890)
  1106  * Fix bug with garbage data appearing in tooltips on Linux/Mac. [#1577](https://github.com/Microsoft/vscode-cpptools/issues/1577)

  1120  * Fix text being temporarily gray when an inactive region is deleted. [Microsoft/vscode#44872](https://github.com/Microsoft/vscode/issues/44872)
  1121: * Add support for `${workspaceFolder}` variable in **c_cpp_properties.json**. [#1392](https://github.com/Microsoft/vscode-cpptools/issues/1392)
  1122  * Fix IntelliSense not updating in source files after dependent header files are changed. [#1501](https://github.com/Microsoft/vscode-cpptools/issues/1501)

  1124  * Enable C++/CLI IntelliSense mode via adding the `/clr` arg to the `compilerPath`. [#1596](https://github.com/Microsoft/vscode-cpptools/issues/1596)
  1125: * Fix delay in language service activation caused by **cpptools.json** downloading. [#1640](https://github.com/Microsoft/vscode-cpptools/issues/1640)
  1126  * Fix debugger failure when a single quote is in the path. [#1554](https://github.com/Microsoft/vscode-cpptools/issues/1554)

  1140  * Fix stuck processes during shutdown. [#1474](https://github.com/Microsoft/vscode-cpptools/issues/1474)
  1141: * Fix error popup appearing with non-workspace files when using `compile_commands.json`. [#1475](https://github.com/Microsoft/vscode-cpptools/issues/1475)
  1142  * Fix snippet completions being blocked after `#`. [#1531](https://github.com/Microsoft/vscode-cpptools/issues/1531)

  1144  * Add `__CHAR_BIT__=8` to default defines on Mac. [#1510](https://github.com/Microsoft/vscode-cpptools/issues/1510)
  1145: * Added support for config variables to `c_cpp_properties.json`. [#314](https://github.com/Microsoft/vscode-cpptools/issues/314)
  1146    * Joshua Cannon (@thejcannon) [PR #1529](https://github.com/Microsoft/vscode-cpptools/pull/1529)

  1161  * Fix to handle relative pathing in source file paths properly when normalizing. [#1228](https://github.com/Microsoft/vscode-cpptools/issues/1228)
  1162: * Fix delay in language service activation caused by cpptools.json downloading. [#1429](https://github.com/Microsoft/vscode-cpptools/issues/1429)
  1163  * Add `C_Cpp.workspaceParsingPriority` setting to enable using less than 100% CPU during parsing of workspace files.

  1167  * Fix stackwalk `NullReferenceException`. [#1339](https://github.com/Microsoft/vscode-cpptools/issues/1339)
  1168: * Fix `-isystem` (or `-I`) not being used in `compile_commands.json` if there's a space after it. [#1343](https://github.com/Microsoft/vscode-cpptools/issues/1343)
  1169  * Fix header switching from `.cc` to `.hpp` files (and other cases). [#1341](https://github.com/Microsoft/vscode-cpptools/issues/1341)

  1179  * Enable offline installation of the extension. [#298](https://github.com/Microsoft/vscode-cpptools/issues/298)
  1180: * Add support for `-isystem` in `compile_commands.json`. [#1156](https://github.com/Microsoft/vscode-cpptools/issues/1156)
  1181  * Remember the selected configuration across launches of VS Code. [#1273](https://github.com/Microsoft/vscode-cpptools/issues/1273)

  1206  * Fix bug with `${workspaceRoot}` symbols not getting added if a parent folder is in the `browse.path`. [#1185](https://github.com/Microsoft/vscode-cpptools/issues/1185)
  1207: * Fix `Add configuration` C++ launch.json on Insiders. [#1191](https://github.com/Microsoft/vscode-cpptools/issues/1191)
  1208  * Fix extension restart logic so that the extension doesn't get stuck on "Initializing..." when it crashes. [#893](https://github.com/Microsoft/vscode-cpptools/issues/893)
  1209: * Remove the Reload window prompt after installation (it only appears if launch.json is active).
  1210  * Prevent browse database from being reset if shutdown takes > 1 second.

  1213  * Fix max files to parse status number being too big, due to including non-`${workspaceRoot}` files.
  1214: * Update default `launch.json` configurations to use `${workspaceFolder}` instead of `${workspaceRoot}`.
  1215: * Update how default initial configurations for `launch.json` are being provided. [Microsoft/vscode#33794](https://github.com/Microsoft/vscode/issues/33794)
  1216  * Add support for normalizing source file locations. (Windows [#272](https://github.com/Microsoft/vscode-cpptools/issues/272)), (Mac OS X [#1095](https://github.com/Microsoft/vscode-cpptools/issues/1095))

  1218  ## Version 0.14.0: October 19, 2017
  1219: * Add support for `compile_commands.json`. [#156](https://github.com/Microsoft/vscode-cpptools/issues/156)
  1220  * Fix crash with signature help. [#1076](https://github.com/Microsoft/vscode-cpptools/issues/1076)

  1231  ## Version 0.13.1: October 5, 2017
  1232: * Delete unused symbol databases when `browse.databaseFilename` in `c_cpp_properties.json` changes. [#558](https://github.com/Microsoft/vscode-cpptools/issues/558)
  1233  * Fix infinite loop during IntelliSense parsing. [#981](https://github.com/Microsoft/vscode-cpptools/issues/981)

  1251  * Fix a crash in IntelliSense for users with non-ASCII user names (Windows-only). [#910](https://github.com/Microsoft/vscode-cpptools/issues/910)
  1252: * Add `macFrameworkPath` to `c_cpp_properties.json`. [#970](https://github.com/Microsoft/vscode-cpptools/issues/970)
  1253  * Fix incorrect auto-complete suggestions when using template types with the scope operator `::`. [#988](https://github.com/Microsoft/vscode-cpptools/issues/988)
  1254  * Fix potential config file parsing failure. [#989](https://github.com/Microsoft/vscode-cpptools/issues/989)
  1255: * Support `${env:VAR}` syntax for environment variables in `c_cpp_properties.json`. [#1000](https://github.com/Microsoft/vscode-cpptools/issues/1000)
  1256: * Support semicolon delimiters for include paths in `c_cpp_properties.json` to better support environment variables. [#1001](https://github.com/Microsoft/vscode-cpptools/issues/1001)
  1257  * Add `__LITTLE_ENDIAN__=1` to default defines so that "endian.h" is not needed on Mac projects. [#1005](https://github.com/Microsoft/vscode-cpptools/issues/1005)

  1299    * This behavior can be overridden by setting `"C_Cpp.intelliSenseEngineFallback": "Disabled"`
  1300: * Added `"intelliSenseMode"` property to `c_cpp_properties.json` to allow switching between MSVC and Clang modes. [#710](https://github.com/Microsoft/vscode-cpptools/issues/710), [#757](https://github.com/Microsoft/vscode-cpptools/issues/757)
  1301  * A crashed IntelliSense engine no longer gives the popup message, and it automatically restarts after an edit to the translation unit occurs.

  1305  * Downloading extension dependencies will retry up to 5 times in the event of a failure. [#694](https://github.com/Microsoft/vscode-cpptools/issues/694)
  1306: * Changes to `c_cpp_properties.json` are detected even if file watchers fail.
  1307  * Update default IntelliSense options for MSVC mode to make Boost projects work better. [#775](https://github.com/Microsoft/vscode-cpptools/issues/775)

  1311  * Fix `System.Xml.Serialization.XmlSerializationReader threw an exception` when debugging on Linux. [#792](https://github.com/Microsoft/vscode-cpptools/issues/792)
  1312: * Fix escaping for `${workspaceRoot}` in `launch.json`.
  1313  

  1362  * Made `editor.quickSuggestions` dependent on `C_Cpp.autocomplete`. [#572](https://github.com/Microsoft/vscode-cpptools/issues/572)
  1363:   * We recommend you close and reopen your settings.json file anytime you change the `C_Cpp.autocomplete` setting. [More info here](https://github.com/Microsoft/vscode-cpptools/releases).
  1364  

  1394  * Added option to disable `clang-format`-based formatting provided by this extension via `"C_Cpp.formatting" : "disabled"`
  1395: * Added new `pipeTransport` functionality within the `launch.json` to support pipe communications with `gdb/lldb` such as using `plink.exe` or `ssh`.
  1396  * Added support for `{command.pickRemoteProcess}` to allow picking of processes for remote pipe connections during `attach` scenarios. This is similar to how `{command.pickProcess}` works for local attach.

  1400  * [December update](https://aka.ms/cppvscodedec) for C/C++ extension
  1401: * Ability to map source files during debugging using `sourceFileMap` property in `launch.json`.
  1402: * Enable pretty-printing by default for gdb users in `launch.json`.
  1403  * Bug fixes.

  1414  * `clang-format` is now automatically installed as a part of the extension and formats code as you type.
  1415: * `clang-format` options have been moved from c_cpp_properties.json file to settings.json (File->Preferences->User settings).
  1416  * `clang-format` fallback style is now set to 'Visual Studio'.
  1417  * Attach now requires a request type of `attach` instead of `launch`.
  1418: * Support for additional console logging using the keyword `logging` inside `launch.json`.
  1419  * Bug fixes.

Extension\gulpfile.js:
   17  const typescript = require('typescript');
   18: const tsProject = ts.createProject('./tsconfig.json', { typescript });
   19  const filter = require('gulp-filter');

   22  const traverse = require('parse5-traverse');
   23: const jsonc = require('comment-json'); // Used to allow comments in nativeStrings.json
   24  const crypto = require('crypto');

   31  
   32: const jsonSchemaFilesPatterns = [
   33:     "*.schema.json"
   34  ];

   68  gulp.task('pr-check', (done) => {
   69:     const packageJson = JSON.parse(fs.readFileSync('./package.json').toString());
   70:     if (packageJson.activationEvents.length !== 1 && packageJson.activationEvents[0] !== '*') {
   71:         console.log('Please make sure to not check in package.json that has been rewritten by the extension activation. If you intended to have changes in package.json, please only check-in your changes. If you did not, please run `git checkout -- package.json`.');
   72          done();

  141  // Traverses the HTML document looking for node and attributes containing data-loc-id, to localize
  142: // Outputs *.nls.json files containing strings to localize.
  143  const processHtmlFiles = () => {
  144      return es.through(function (file) {
  145:         let localizationJsonContents = {};
  146          let localizationMetadataContents = {

  160              });
  161:             localizationJsonContents[locId.value] = text;
  162              localizationMetadataContents.keys.push(locId);

  165          let attributeCallback = (locId, attribute) => {
  166:             localizationJsonContents[locId] = attribute.value;
  167              localizationMetadataContents.keys.push(locId);

  171          this.queue(new vinyl({
  172:             path: path.join(file.path + '.nls.json'),
  173:             contents: Buffer.from(JSON.stringify(localizationJsonContents, null, '\t'), 'utf8')
  174          }));
  175          this.queue(new vinyl({
  176:             path: path.join(file.path + '.nls.metadata.json'),
  177:             contents: Buffer.from(JSON.stringify(localizationMetadataContents, null, '\t'), 'utf8')
  178          }));

  182  // descriptionCallback(path, value, parent) is invoked for attribtues
  183: const traverseJson = (jsonTree, descriptionCallback, prefixPath) => {
  184:     for (let fieldName in jsonTree) {
  185:         if (jsonTree[fieldName] !== null) {
  186:             if (typeof(jsonTree[fieldName]) == "string" && fieldName === "description") {
  187:                 descriptionCallback(prefixPath, jsonTree[fieldName], jsonTree);
  188:             } else if (typeof(jsonTree[fieldName]) == "object") {
  189                  let path = prefixPath;

  192                  path = path + fieldName;
  193:                 traverseJson(jsonTree[fieldName], descriptionCallback, path);
  194              }

  198  
  199: // Traverses schema json files looking for "description" fields to localized.
  200  // The path to the "description" field is used to create a localization key.
  201: const processJsonSchemaFiles = () => {
  202      return es.through(function (file) {
  203:         let jsonTree = JSON.parse(file.contents.toString());
  204:         let localizationJsonContents = {};
  205          let filePath = removePathPrefix(file.path, file.cwd);

  212              let locId = filePath + "." + path;
  213:             localizationJsonContents[locId] = value;
  214              localizationMetadataContents.keys.push(locId);

  216          };
  217:         traverseJson(jsonTree, descriptionCallback, "");
  218          this.queue(new vinyl({
  219:             path: path.join(file.path + '.nls.json'),
  220:             contents: Buffer.from(JSON.stringify(localizationJsonContents, null, '\t'), 'utf8')
  221          }));
  222          this.queue(new vinyl({
  223:             path: path.join(file.path + '.nls.metadata.json'),
  224:             contents: Buffer.from(JSON.stringify(localizationMetadataContents, null, '\t'), 'utf8')
  225          }));

  240  
  241:     let jsonSchemaStream = gulp.src(jsonSchemaFilesPatterns)
  242:         .pipe(processJsonSchemaFiles());
  243  
  244      // Merge files from all source streams
  245:     es.merge(jsStream, htmlStream, jsonSchemaStream)
  246  
  247      // Filter down to only the files we need
  248:     .pipe(filter(['**/*.nls.json', '**/*.nls.metadata.json']))
  249  
  250:     // Consoldate them into nls.metadata.json, which the xlf is built from.
  251      .pipe(nls.bundleMetaDataFiles('ms-vscode.cpptools', '.'))

  253      // filter down to just the resulting metadata files
  254:     .pipe(filter(['**/nls.metadata.header.json', '**/nls.metadata.json']))
  255  
  256:     // Add package.nls.json, used to localized package.json
  257:     .pipe(gulp.src(["package.nls.json"]))
  258  
  259:     // package.nls.json and nls.metadata.json are used to generate the xlf file
  260      // Does not re-queue any files to the stream.  Outputs only the XLF file

  274  
  275: // Imports translations from raw localized MLCP strings to VS Code .i18n.json files
  276  gulp.task("translations-import", (done) => {

  285          return gulp.src(path.join(options.location, id, translationProjectName, `${translationExtensionName}.xlf`))
  286:             .pipe(nls.prepareJsonFiles())
  287              .pipe(gulp.dest(path.join("./i18n", language.folderName)));

  354  
  355: async function generatePackageHashes(packageJson) {
  356      const downloadAndGetHash = async (url) => {

  371  
  372:     for (let dependency of packageJson.runtimeDependencies) {
  373          console.log(`-------- Downloading package: '${dependency.description}' --------`);

  383  
  384:     let content = JSON.stringify(packageJson, null, 2);
  385      return content;

  388  gulp.task('generate-package-hashes', async (done) => {
  389:     const packageJsonPath = './package.json';
  390:     const packageJson = JSON.parse(fs.readFileSync(packageJsonPath).toString());
  391:     const content = await generatePackageHashes(packageJson);
  392:     fs.writeFileSync(packageJsonPath, content);
  393      done();

  401  
  402: // Generate package.nls.*.json files from: ./i18n/*/package.i18n.json
  403: // Outputs to root path, as these nls files need to be along side package.json
  404  const generateAdditionalLocFiles = () => {
  405:     return gulp.src(['package.nls.json'])
  406          .pipe(nls.createAdditionalLanguageFiles(languages, 'i18n'))

  409  
  410: // Generates ./dist/nls.bundle.<language_id>.json from files in ./i18n/** *//<src_path>/<filename>.i18n.json
  411  // Localized strings are read from these files at runtime.

  420          .pipe(nls.bundleLanguageFiles())
  421:         .pipe(filter(['**/nls.bundle.*.json', '**/nls.metadata.header.json', '**/nls.metadata.json']))
  422          .pipe(gulp.dest('dist'));

  431              let relativePath = removePathPrefix(file.path, file.cwd);
  432:             let locFile = path.join("./i18n", language.folderName, relativePath + ".i18n.json");
  433              if (fs.existsSync(locFile)) {
  434:                 stringTable = jsonc.parse(fs.readFileSync(locFile).toString());
  435              }

  483  // Generate localized versions of HTML files
  484: // Check for cooresponding localized json file in i18n
  485  // Generate new version of the HTML file in dist/html/<language_id>/<path>

  491  
  492: const generateLocalizedJsonSchemaFiles = () => {
  493      return es.through(function (file) {
  494:         let jsonTree = JSON.parse(file.contents.toString());
  495          languages.map((language) => {

  498              let relativePath = removePathPrefix(file.path, file.cwd);
  499:             let locFile = path.join("./i18n", language.folderName, relativePath + ".i18n.json");
  500              if (fs.existsSync(locFile)) {
  501:                 stringTable = jsonc.parse(fs.readFileSync(locFile).toString());
  502              }

  511              };
  512:             traverseJson(jsonTree, descriptionCallback, "");
  513:             let newContent = JSON.stringify(jsonTree, null, '\t');
  514              this.queue(new vinyl({

  521  
  522: // Generate localized versions of JSON schema files
  523: // Check for cooresponding localized json file in i18n
  524: // Generate new version of the JSON schema file in dist/schema/<language_id>/<path>
  525: const generateJsonSchemaLoc = () => {
  526:     return gulp.src(jsonSchemaFilesPatterns)
  527:         .pipe(generateLocalizedJsonSchemaFiles())
  528          .pipe(gulp.dest('dist'));

  530  
  531: gulp.task('translations-generate', gulp.series(generateSrcLocBundle, generateAdditionalLocFiles, generateHtmlLoc, generateJsonSchemaLoc));
  532  

  535  // Command: generate-native-strings
  536: // The following is used to generate nativeStrings.ts and localized_string_ids.h from ./src/nativeStrings.json
  537: // If adding localized strings to the native side, start by adding it to nativeStrings.json and use this to generate the others.
  538  // ****************************
  539  
  540: // A gulp task to parse ./src/nativeStrings.json and generate nativeStrings.ts, and localized_string_ids.h
  541  gulp.task("generate-native-strings", (done) => {
  542:     const stringTable = jsonc.parse(fs.readFileSync('./src/nativeStrings.json').toString());
  543  

  561          // Add to native string table
  562:         nativeStringTableContent += `    ${JSON.stringify(stringValue)},\n`;
  563  

  577                  if (hintValue) {
  578:                     typeScriptSwitchContent += `                message = localize({ key: ${JSON.stringify(property)}, comment: [${JSON.stringify(hintValue)}] }, ${JSON.stringify(stringValue)}`;
  579                  } else {
  580:                     typeScriptSwitchContent += `                message = localize(${JSON.stringify(property)}, ${JSON.stringify(stringValue)}`;
  581                  }

  587              if (hintValue) {
  588:                 typeScriptSwitchContent += `            message = localize({ key: ${JSON.stringify(property)}, comment: [${JSON.stringify(hintValue)}] }, ${JSON.stringify(stringValue)}`;
  589              } else {
  590:                 typeScriptSwitchContent += `            message = localize(${JSON.stringify(property)}, ${JSON.stringify(stringValue)}`;
  591              }

  601  
  602: // ****** This file is generated from nativeStrings.json.  Do not edit this file directly. ******
  603  

  634  
  635: // ****** This file is generated from nativeStrings.json.  Do not edit this file directly. ******
  636  

Extension\import_edge_strings.js:
  45      let outputLanguageFolder = path.join(cpptoolsRepoPath, "Extension/bin/messages", languageId);
  46:     let outputPath = path.join(outputLanguageFolder, "messages.json");
  47      let sourceContent = fs.readFileSync(lclPath, 'utf-8');

  83      fs.mkdirSync(outputLanguageFolder, { recursive: true });
  84:     fs.writeFileSync(outputPath, JSON.stringify(resultArray, null, 2), 'utf8');
  85  });

Extension\package.json:
  1331        {
  1332:         "command": "C_Cpp.ConfigurationEditJSON",
  1333:         "title": "%c_cpp.command.configurationEditJSON.title%",
  1334          "category": "C/C++"

  2498      ],
  2499:     "jsonValidation": [
  2500        {
  2501:         "fileMatch": "c_cpp_properties.json",
  2502:         "url": "cpptools-schema:///c_cpp_properties.schema.json"
  2503        }

  2715      "prepublishjs": "node ./tools/prepublish.js",
  2716:     "pretest": "tsc -p test.tsconfig.json",
  2717      "generatePackageHashes": "gulp generate-package-hashes",

  2719      "lint": "gulp lint",
  2720:     "unitTests": "tsc -p test.tsconfig.json && node ./out/test/unitTests/runTest.js",
  2721:     "integrationTests": "tsc -p test.tsconfig.json && node ./out/test/integrationTests/languageServer/runTest.js",
  2722:     "intelliSenseFeaturesTests": "tsc -p test.tsconfig.json && node ./out/test/integrationTests/IntelliSenseFeatures/runTest.js",
  2723      "import-edge-strings": "node ./import_edge_strings.js"

  2772    "dependencies": {
  2773:     "comment-json": "^3.0.3",
  2774      "editorconfig": "^0.15.3",

Extension\README.md:
  23  * [Debugging](https://code.visualstudio.com/docs/cpp/cpp-debug)
  24: * [Debug configuration](https://code.visualstudio.com/docs/cpp/launch-json-reference)
  25  * [Enable logging for IntelliSense or debugging](https://code.visualstudio.com/docs/cpp/enable-logging-cpp)

Extension\ThirdPartyNotices.txt:
   863  
   864: comment-json 3.0.3 - MIT
   865: https://github.com/kaelzhang/node-comment-json#readme
   866  

  1565  
  1566: vscode-jsonrpc 4.0.0 - MIT
  1567  https://github.com/Microsoft/vscode-languageserver-node#readme

  1787  - pevents (https://github.com/neosmart/pevents)
  1788: - RapidJSON (https://github.com/miloyip/rapidjson)
  1789  - SQLite (https://www.sqlite.org/)

  2686  
  2687: %% RapidJSON NOTICES AND INFORMATION BEGIN HERE
  2688  =========================================
  2689: Tencent is pleased to support the open source community by making RapidJSON available. 
  2690   

  2692   
  2693: If you have downloaded a copy of the RapidJSON binary from Tencent, please note that the RapidJSON binary is licensed under the MIT License.
  2694   
  2695: If you have downloaded a copy of the RapidJSON source code from Tencent, please note that RapidJSON source code is licensed under the MIT License, except for the third-party components listed below which are subject to different license terms.  Your integration of RapidJSON into your own projects may require compliance with the MIT License, as well as the other licenses applicable to the third-party components included within RapidJSON. To avoid the problematic JSON license in your own projects, it's sufficient to exclude the bin/jsonchecker/ directory, as it's the only code under the JSON license.
  2696   

  2718   
  2719: Open Source Software Licensed Under the JSON License:
  2720  --------------------------------------------------------------------
  2721: json.org 
  2722: Copyright (c) 2002 JSON.org
  2723   

  2725  
  2726: JSON_checker
  2727   
  2728: Copyright (c) 2002 JSON.org
  2729  All Rights Reserved.  
  2730   
  2731: Terms of the JSON License:
  2732  ---------------------------------------------------

  2749  =========================================
  2750: END OF RapidJSON NOTICES AND INFORMATION
  2751  

Extension\webpack.config.js:
  16      entry: './src/main.ts', // the entry point of this extension, 📖 -> https://webpack.js.org/configuration/entry-context/
  17:     output: { // the bundle is stored in the 'dist' folder (check package.json), 📖 -> https://webpack.js.org/configuration/output/
  18          path: path.resolve(__dirname, 'dist'),

Extension\yarn.lock:
    41  
    42: "@discoveryjs/json-ext@^0.5.0":
    43    version "0.5.2"
    44:   resolved "https://registry.yarnpkg.com/@discoveryjs/json-ext/-/json-ext-0.5.2.tgz#8f03a22a04de437254e8ce8cc84ba39689288752"
    45    integrity sha512-HyYEUDeIj5rRQU2Hk5HTB2uHsbRQpF70nvMhVzi+VJR0X+xNEhjPui4/kBf3VeH/wqD28PT4sVOm8qqLjBrSZg==

    68      minimatch "^3.0.4"
    69:     strip-json-comments "^3.1.1"
    70  

   212      "@types/estree" "*"
   213:     "@types/json-schema" "*"
   214  

   224  
   225: "@types/json-schema@*", "@types/json-schema@^7.0.6":
   226    version "7.0.7"
   227:   resolved "https://registry.yarnpkg.com/@types/json-schema/-/json-schema-7.0.7.tgz#98a993516c859eb0d5c4c8f098317a9ea68db9ad"
   228    integrity sha512-cxWFQVseBm6O9Gbw1IWb8r6OS4OhSt3hPZLkFApLjM8TEXROBuQGLAH2i2gZpcXdLBIrpXuTDhH7Vbm1iXmNGA==
   229  
   230: "@types/json-schema@^7.0.3":
   231    version "7.0.4"
   232:   resolved "https://registry.yarnpkg.com/@types/json-schema/-/json-schema-7.0.4.tgz#38fd73ddfd9b55abb1e1b2ed578cb55bd7b7d339"
   233    integrity sha512-8+KAKzEvSUdeo+kmqnKrqgeE+LcA0tjYWFY7RPProVYwnqDjukzO+3b6dLD56rYX5TdWejnEOLJYOIeh4CXKuA==
   234  
   235: "@types/json5@^0.0.29":
   236    version "0.0.29"
   237:   resolved "https://registry.yarnpkg.com/@types/json5/-/json5-0.0.29.tgz#ee28707ae94e11d2b827bcbe5270bcea7f3e71ee"
   238    integrity sha1-7ihweulOEdK4J7y+UnC86n8+ce4=

   330    dependencies:
   331:     "@types/json-schema" "^7.0.3"
   332      "@typescript-eslint/scope-manager" "4.22.1"

   582      fast-deep-equal "^3.1.1"
   583:     fast-json-stable-stringify "^2.0.0"
   584:     json-schema-traverse "^0.4.1"
   585      uri-js "^4.2.2"

   592      fast-deep-equal "^3.1.1"
   593:     fast-json-stable-stringify "^2.0.0"
   594:     json-schema-traverse "^0.4.1"
   595      uri-js "^4.2.2"

   602      fast-deep-equal "^3.1.1"
   603:     json-schema-traverse "^1.0.0"
   604      require-from-string "^2.0.2"

  1314  
  1315: comment-json@^3.0.3:
  1316    version "3.0.3"
  1317:   resolved "https://registry.yarnpkg.com/comment-json/-/comment-json-3.0.3.tgz#0cadacd6278602b57b8c51b1814dc5d311d228c4"
  1318    integrity sha512-P7XwYkC3qjIK45EAa9c5Y3lR7SMXhJqwFdWg3niAIAcbk3zlpKDdajV8Hyz/Y3sGNn3l+YNMl8A2N/OubSArHg==

  1935      js-yaml "^3.13.1"
  1936:     json-stable-stringify-without-jsonify "^1.0.1"
  1937      levn "^0.3.0"

  1946      strip-ansi "^5.2.0"
  1947:     strip-json-comments "^3.0.1"
  1948      table "^5.2.3"

  1979      js-yaml "^3.13.1"
  1980:     json-stable-stringify-without-jsonify "^1.0.1"
  1981      levn "^0.4.1"

  1989      strip-ansi "^6.0.0"
  1990:     strip-json-comments "^3.1.0"
  1991      table "^6.0.4"

  2224  
  2225: fast-json-stable-stringify@^2.0.0:
  2226    version "2.1.0"
  2227:   resolved "https://registry.yarnpkg.com/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz#874bf69c6f404c2b5d99c481341399fd55892633"
  2228    integrity sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==

  2438      graceful-fs "^4.2.0"
  2439:     jsonfile "^4.0.0"
  2440      universalify "^0.1.0"

  3322  
  3323: json-parse-better-errors@^1.0.2:
  3324    version "1.0.2"
  3325:   resolved "https://registry.yarnpkg.com/json-parse-better-errors/-/json-parse-better-errors-1.0.2.tgz#bb867cfb3450e69107c131d1c514bab3dc8bcaa9"
  3326    integrity sha512-mrqyZKfX5EhL7hvqcV6WG1yYjnjeuYDzDhhcAAUrq8Po85NBQBJP+ZDUT75qZQ98IkUoBqdkExkukOU7Ts2wrw==
  3327  
  3328: json-schema-traverse@^0.4.1:
  3329    version "0.4.1"
  3330:   resolved "https://registry.yarnpkg.com/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz#69f6a87d9513ab8bb8fe63bdb0979c448e684660"
  3331    integrity sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==
  3332  
  3333: json-schema-traverse@^1.0.0:
  3334    version "1.0.0"
  3335:   resolved "https://registry.yarnpkg.com/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz#ae7bcb3656ab77a73ba5c49bf654f38e6b6860e2"
  3336    integrity sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==
  3337  
  3338: json-stable-stringify-without-jsonify@^1.0.1:
  3339    version "1.0.1"
  3340:   resolved "https://registry.yarnpkg.com/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz#9db7b59496ad3f3cfef30a75142d2d930ad72651"
  3341    integrity sha1-nbe1lJatPzz+8wp1FC0tkwrXJlE=
  3342  
  3343: json5@^1.0.1:
  3344    version "1.0.1"
  3345:   resolved "https://registry.yarnpkg.com/json5/-/json5-1.0.1.tgz#779fb0018604fa854eacbf6252180d83543e3dbe"
  3346    integrity sha512-aKS4WQjPenRxiQsC93MNfjx+nbF4PAdYzmd/1JIj8HYzqfbu86beTuNgXDzPknWk0n0uARlyewZo4s++ES36Ow==

  3349  
  3350: json5@^2.1.2:
  3351    version "2.2.0"
  3352:   resolved "https://registry.yarnpkg.com/json5/-/json5-2.2.0.tgz#2dfefe720c6ba525d9ebd909950f0515316c89a3"
  3353    integrity sha512-f+8cldu7X/y7RAJurMEJmdoKXGB/X550w2Nr3tTbezL6RwEE/iMcm+tZnXeoZtKuOq6ft8+CqzEkrIgx1fPoQA==

  3356  
  3357: jsonfile@^4.0.0:
  3358    version "4.0.0"
  3359:   resolved "https://registry.yarnpkg.com/jsonfile/-/jsonfile-4.0.0.tgz#8771aae0799b64076b76640fca058f9c10e33ecb"
  3360    integrity sha1-h3Gq4HmbZAdrdmQPygWPnBDjPss=

  3451  
  3452: load-json-file@^1.0.0:
  3453    version "1.1.0"
  3454:   resolved "https://registry.yarnpkg.com/load-json-file/-/load-json-file-1.1.0.tgz#956905708d58b4bab4c2261b04f59f31c99374c0"
  3455    integrity sha1-lWkFcI1YtLq0wiYbBPWfMcmTdMA=

  3457      graceful-fs "^4.1.2"
  3458:     parse-json "^2.2.0"
  3459      pify "^2.0.0"

  3462  
  3463: load-json-file@^2.0.0:
  3464    version "2.0.0"
  3465:   resolved "https://registry.yarnpkg.com/load-json-file/-/load-json-file-2.0.0.tgz#7947e42149af80d696cbf797bcaabcfe1fe29ca8"
  3466    integrity sha1-eUfkIUmvgNaWy/eXvKq8/h/inKg=

  3468      graceful-fs "^4.1.2"
  3469:     parse-json "^2.2.0"
  3470      pify "^2.0.0"

  3484      emojis-list "^3.0.0"
  3485:     json5 "^2.1.2"
  3486  

  3749      serialize-javascript "5.0.1"
  3750:     strip-json-comments "3.1.1"
  3751      supports-color "8.1.1"

  4156  
  4157: parse-json@^2.2.0:
  4158    version "2.2.0"
  4159:   resolved "https://registry.yarnpkg.com/parse-json/-/parse-json-2.2.0.tgz#f480f40434ef80741f8469099f8dea18f55a4dc9"
  4160    integrity sha1-9ID0BDTvgHQfhGkJn43qGPVaTck=

  4438    dependencies:
  4439:     load-json-file "^1.0.0"
  4440      normalize-package-data "^2.3.2"

  4447    dependencies:
  4448:     load-json-file "^2.0.0"
  4449      normalize-package-data "^2.3.2"

  4741    dependencies:
  4742:     "@types/json-schema" "^7.0.6"
  4743      ajv "^6.12.5"

  5169  
  5170: strip-json-comments@3.1.1, strip-json-comments@^3.1.0, strip-json-comments@^3.1.1:
  5171    version "3.1.1"
  5172:   resolved "https://registry.yarnpkg.com/strip-json-comments/-/strip-json-comments-3.1.1.tgz#31f1281b3832630434831c310c01cccda8cbe006"
  5173    integrity sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==
  5174  
  5175: strip-json-comments@^3.0.1:
  5176    version "3.0.1"
  5177:   resolved "https://registry.yarnpkg.com/strip-json-comments/-/strip-json-comments-3.0.1.tgz#85713975a91fb87bf1b305cca77395e40d2a64a7"
  5178    integrity sha512-VTyMAUfdm047mwKl+u79WIdrZxtFtn+nBxHeb844XBQ9uMNTuTHdx2hc5RiAJYqwTj3wc/xe5HLSdJSkJ+WfZw==

  5406    dependencies:
  5407:     "@types/json5" "^0.0.29"
  5408:     json5 "^1.0.1"
  5409      minimist "^1.2.0"

  5548    dependencies:
  5549:     json-stable-stringify-without-jsonify "^1.0.1"
  5550      through2-filter "^3.0.0"

  5713  
  5714: vscode-jsonrpc@^4.0.0:
  5715    version "4.0.0"
  5716:   resolved "https://registry.yarnpkg.com/vscode-jsonrpc/-/vscode-jsonrpc-4.0.0.tgz#a7bf74ef3254d0a0c272fab15c82128e378b3be9"
  5717    integrity sha512-perEnXQdQOJMTDFNv+UF3h1Y0z4iSiaN9jIlb0OqIYgosPCZGYh/MCUlkFtV2668PL69lRDO32hmvL2yiidUYg==

  5731    dependencies:
  5732:     vscode-jsonrpc "^4.0.0"
  5733      vscode-languageserver-types "3.14.0"

  5791    dependencies:
  5792:     "@discoveryjs/json-ext" "^0.5.0"
  5793      "@webpack-cli/configtest" "^1.0.1"

  5841      graceful-fs "^4.2.4"
  5842:     json-parse-better-errors "^1.0.2"
  5843      loader-runner "^4.2.0"

Extension\.vscode\tasks.json:
  2      // See https://go.microsoft.com/fwlink/?LinkId=733558
  3:     // for the documentation about the tasks.json format
  4      "version": "2.0.0",

Extension\i18n\chs\c_cpp_properties.schema.json.i18n.json:
   6  {
   7: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.name": "配置标识符。Mac、Linux 和 Win32 是将在这些平台上自动选定的特殊配置标识符，但标识符可为任何内容。",
   8: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerPath": "正在使用以便启用更准确的 IntelliSense 的编译器的完整路径，例如 /usr/bin/gcc。",
   9: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerArgs": "用于修改所使用的包含或定义的编译器参数，例如 -nostdinc++、-m32 等。",
  10: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cStandard": "用于 IntelliSense 的 C 语言标准的版本。注意: GNU 标准仅用于查询设置编译器以获取 GNU 定义，并且 IntelliSense 将模拟等效的 C 标准版本。",
  11: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cppStandard": "用于 IntelliSense 的 C++ 语言标准的版本。注意: GNU 标准仅用于查询设置用来获取 GNU 定义的编译器，并且 IntelliSense 将模拟等效的 C++ 标准版本。",
  12: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compileCommands": "工作区的 compile_commands.json 文件的完整路径。",
  13: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.includePath": "在搜索包含的标头时 IntelliSense 引擎要使用的路径列表。对这些路径的搜索不是递归搜索。指定 \"**\" 可指示递归搜索。例如: \"${workspaceFolder}/**\" 将搜索所有子目录，而 \"${workspaceFolder}\" 将不搜索所有子目录。",
  14: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.macFrameworkPath": "Intellisense 引擎在 Mac 框架中搜索包含的标头时要使用的路径的列表。仅在 Mac 配置中受支持。",
  15: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.windowsSdkVersion": "要在 Windows 上使用的 Windows SDK 包含路径的版本，例如 \"10.0.17134.0\"。",
  16: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.defines": "分析文件时 IntelliSense 引擎要使用的预处理器定义的列表。(可选)使用 = 设置值，例如 VERSION=1。",
  17: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.intelliSenseMode": "要使用的 IntelliSense 模式，该模式映射到 MSVC、gcc 或 Clang 的平台和体系结构变体。如果未设置或设置为 ${default}，则扩展将选择该平台的默认值。Windows 默认为 windows-msvc-x64，Linux 默认为 linux-gcc-x64，macOS 默认为 macos-clang-x64。仅指定 <compiler>-<architecture> 变体(例如 gcc-x64)的 IntelliSense 模式是旧模式，它们会根据主机平台自动转换为 <platform>-<compiler>-<architecture> 变体。",
  18: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.forcedInclude": "应在翻译单元中包括在任何包含文件之前的文件的列表。",
  19: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.configurationProvider": "可为源文件提供 IntelliSense 配置信息的 VS Code 扩展的 ID。",
  20: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.limitSymbolsToIncludedHeaders": "如果为 true，则仅处理以标头形式直接或间接包含的文件；如果为 false，则处理指定的包含路径下的所有文件。",
  21: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.databaseFilename": "所生成的符号数据库的路径。如果指定了相对路径，则它将相对于工作区的默认存储位置。",
  22: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.path": "一个路径列表，这些路径用于为工作区符号编制索引和进行分析(这些符号用于“转到定义”和“查找所有引用”等)。默认在这些路径中以递归方式进行搜索。指定 \"*\" 可指示非递归搜索。例如，\"${workspaceFolder}\" 将搜索所有子目录，而 \"${workspaceFolder}/*\" 将不会。",
  23: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.customConfigurationVariables": "可通过命令 ${cpptools:activeConfigCustomVariable} 查询要用于 launch.json 或 tasks.json 的输入变量的自定义变量。",
  24: 	"c_cpp_properties.schema.json.definitions.env": "可通过 ${变量} 或 ${env:变量} 语法在此文件中的任意位置重用的自定义变量。",
  25: 	"c_cpp_properties.schema.json.definitions.version": "配置文件的版本。此属性由扩展托管。请勿更改它。",
  26: 	"c_cpp_properties.schema.json.definitions.enableConfigurationSquiggles": "控制扩展是否报告在 c_cpp_properties.json 中检测到的错误。"
  27  }

Extension\i18n\chs\package.i18n.json:
    6  {
    7: 	"c_cpp.capabilities.untrustedWorkspaces.description": "多个设置可以导致执行工作区本地进程，例如 C_Cpp.clang_format_path、C_Cpp.addNodeAddonIncludePaths、C_Cpp.default.compilerPath、C_Cpp.default.configurationProvider 和 C_Cpp.default.compileCommands，以及 c_cpp_properties.json 中的等效属性。",
    8  	"c_cpp.command.configurationSelect.title": "选择配置...",
    9  	"c_cpp.command.configurationProviderSelect.title": "更改配置提供程序...",
   10: 	"c_cpp.command.configurationEditJSON.title": "编辑配置(JSON)",
   11  	"c_cpp.command.configurationEditUI.title": "编辑配置(UI)",

  146  	"c_cpp.configuration.intelliSenseUpdateDelay.description": "控制修改之后到 IntelliSense 开始更新之间的延迟(以毫秒为单位)。",
  147: 	"c_cpp.configuration.default.includePath.description": "在 cpp_properties.json 中未指定 \"includePath\" 时要在配置中使用的值。如果指定了 \"includePath\"，则向数组添加 \"${default}\" 以从此设置插入值。",
  148  	"c_cpp.configuration.default.defines.description": "未指定 \"defines\" 时要在配置中使用的值，或 \"defines\" 中存在 \"${default}\" 时要插入的值。",

  162  	"c_cpp.configuration.default.systemIncludePath.description": "要用于系统包含路径的值。如果已设置，它会覆盖通过 \"compilerPath\" 和 \"compileCommands\" 设置获取的系统包含路径。",
  163: 	"c_cpp.configuration.default.enableConfigurationSquiggles.description": "控制扩展是否报告在 c_cpp_properties.json 中检测到的错误。",
  164  	"c_cpp.configuration.default.customConfigurationVariables.description": "未设置 \"customConfigurationVariables\" 时要在配置中使用的值，或 \"customConfigurationVariables\" 中存在 \"${default}\" 作为键时要插入的值。",

  178  	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: 其他引用结果",
  179: 	"c_cpp.contributes.viewsWelcome.contents": "要了解有关 launch.json 的信息，请参阅 [配置 C/C++ 调试](https://code.visualstudio.com/docs/cpp/launch-json-reference)。",
  180  	"c_cpp.debuggers.pipeTransport.description": "如果存在，这会指示调试程序使用其他可执行文件作为管道来连接到远程计算机，此管道将在 VS Code 和已启用 MI 的调试程序后端可执行文件(如 gdb)之间中继标准输入/输入。",

Extension\i18n\chs\src\common.i18n.json:
  6  {
  7: 	"failed.to.parse.json": "未能分析 json 文件，可能是因注释或尾部逗号所致。",
  8  	"extension.not.ready": "C/C++ 扩展仍在安装。请查看输出窗口获取详细信息。",

Extension\i18n\chs\src\nativeStrings.i18n.json:
   15  	"include_errors_update_include_path_intellisense_disabled": "检测到 #include 错误。请更新 includePath。此翻译单元({0})的 IntelliSense 功能将由标记分析器提供。",
   16: 	"include_errors_update_compile_commands_or_include_path_intellisense_disabled": "检测到 #include 错误。请考虑更新 compile_commands.json 或 includePath。此翻译单元({0})的 IntelliSense 功能将由标记分析器提供。",
   17: 	"could_not_parse_compile_commands": "无法分析“{0}”。将改用来自文件夹“{1}”中的 c_cpp_properties.json 的 \"includePath\"。",
   18: 	"could_not_find_compile_commands": "找不到“{0}”。将改用文件夹“{1}”中来自 c_cpp_properties.json 的 \"includePath\"。",
   19: 	"file_not_found_in_path": "在“{1}”中未找到“{0}”。此文件将改用文件夹“{2}”中来自 c_cpp_properties.json 的 \"includePath\"。",
   20  	"database_reset": "已成功重置 IntelliSense 数据库。",

   47  	"failed_to_reset_timestamps_for": "未能为 {0} 重置时间戳: 错误 = {1}",
   48: 	"no_suitable_complier": "未找到合适的编译器。请在 c_cpp_properties.json 中设置 \"compilerPath\"。",
   49  	"compiler_include_not_found": "未找到编译器包含路径: {0}",

  122  	"error_limit_exceeded": "已超出错误限额，{0} 个错误未报告。",
  123: 	"include_errors_update_compile_commands_or_include_path_squiggles_disabled": "检测到 #include 错误。请考虑更新 compile_commands.json 或 includePath。已为此翻译单元({0})禁用波形曲线。",
  124  	"cannot_reset_database": "无法重置 IntelliSense 数据库。若要手动重置，请关闭所有 VS Code 实例，然后删除此文件: {0}",

  179  	"cpp_compiler_from_compiler_path": "正在尝试从 \"compilerPath\" 属性中的 C++ 编译器获取默认值:“{0}”",
  180: 	"c_compiler_from_compile_commands": "正在尝试从 compile_commands.json 文件中的 C 编译器获取默认值:“{0}”",
  181: 	"cpp_compiler_from_compile_commands": "正在尝试从 compile_commands.json 文件中的 C++ 编译器获取默认值:“{0}”",
  182  	"c_intellisense_mode_changed": "对于 C 源文件，IntelliSenseMode 已从“{0}”更改为“{1}”。",

Extension\i18n\chs\src\LanguageServer\client.i18n.json:
  24  	"update.intellisense.time": "更新 IntelliSense 时间(秒): {0}",
  25: 	"configure.json.button": "配置(JSON)",
  26  	"configure.ui.button": "配置(UI)",

  29  	"configure.your.intellisense.settings": "配置 IntelliSense 设置以帮助查找缺少的标头。",
  30: 	"a.compile.commands.file": "compile_commands.json 文件",
  31  	"auto-configure.intellisense.folder": "是否要使用 {0} 为“{1}”文件夹自动配置 IntelliSense?",

Extension\i18n\chs\src\LanguageServer\configurations.i18n.json:
   9  	"invalid.configuration.file": "配置文件无效。数组中须至少存在一个配置。",
  10: 	"unknown.properties.version": "c_cpp_properties.json 中发现未知的版本号。某些功能可能无法按预期工作。",
  11  	"update.properties.failed": "尝试更新“{0}”失败(是否有写入权限?)",

Extension\i18n\chs\src\LanguageServer\ui.i18n.json:
  12  	"edit.configuration.ui": "编辑配置(UI)",
  13: 	"edit.configuration.json": "编辑配置(JSON)",
  14  	"select.configuration.provider": "选择配置提供程序...",

  17  	"disable.configuration.provider": "禁用活动配置提供程序(如果适用)。",
  18: 	"select.compile.commands": "选择 compile_commands.json...",
  19  	"select.workspace": "选择工作区文件夹…",

Extension\i18n\chs\ui\settings.html.i18n.json:
  10  	"edit.configurations.ui": "C/C++: 编辑配置(UI)",
  11: 	"switch.to.json": "通过单击文件链接或使用以下命令切换到 {0} 文件:",
  12: 	"edit.configurations.in.json": "编辑 JSON 文件中的配置",
  13: 	"edit.configurations.json": "C/C++: 编辑配置(JSON)",
  14  	"check.the.schema": "转到 {0}，详细了解 C/C++ 属性。",

Extension\i18n\cht\c_cpp_properties.schema.json.i18n.json:
   6  {
   7: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.name": "組態識別碼。Mac、Linux 及 Win32 是會在這些平台上自動選取之組態的特殊識別碼，但識別碼可以是任何內容。",
   8: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerPath": "所用編譯器的完整路徑，例如 /usr/bin/gcc，讓 IntelliSense 更準確。",
   9: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerArgs": "用來修改所用 include 或 define 的編譯器引數，例如 -nostdinc++、-m32 等。",
  10: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cStandard": "用於 IntelliSense 的 C 語言標準版本。注意: GNU 標準僅會用於查詢設定編譯器以取得 GNU 定義，而 IntelliSense 將會模擬相同的 C 標準版本。",
  11: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cppStandard": "用於 IntelliSense 的 C++ 語言標準版本。注意: GNU 標準僅會用於查詢設定編譯器以取得 GNU 定義，而 IntelliSense 將會模擬相同的 C++ 標準版本。",
  12: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compileCommands": "工作區 compile_commands.json 檔案的完整路徑。",
  13: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.includePath": "Intellisense 引擎搜尋所含標頭檔時所要使用的清單路徑。若要重複搜尋，請指定 '**'。例如 '${workspaceFolder}/**' 會搜尋所有子目錄，而 '${workspaceFolder}' 不會。",
  14: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.macFrameworkPath": "供 Intellisense 引擎在 Mac 架構中搜尋包含的標頭時使用的路徑清單。僅支援用於 Mac 組態。",
  15: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.windowsSdkVersion": "要在 Windows 上使用的 Windows SDK 包含路徑版本，例如 '10.0.17134.0'。",
  16: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.defines": "剖析檔案時，IntelliSense 引擎要使用的前置處理器定義清單。您可使用 = 來設定值，例如 VERSION=1。",
  17: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.intelliSenseMode": "要使用的 IntelliSense 模式 (對應到 MSVC、gcc 或 Clang 的平台及架構變體)。如果未設定或設為 ${default}，延伸模組會選擇該平台的預設。Windows 預設為 windows-msvc-x64、Linux 預設為 linux-gcc-x64、macOS 預設為 macos-clang-x64。僅指定 <compiler>-<architecture> 變體 (例如 gcc-x64) 的 IntelliSense 模式即為舊版模式，會依據主機平台自動轉換為 <platform>-<compiler>-<architecture> 變體。",
  18: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.forcedInclude": "應包含在編譯單位中任何 include 檔案之前的檔案清單。",
  19: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.configurationProvider": "提供原始程式檔 IntelliSense 組態資訊的 VS Code 延伸模組識別碼。",
  20: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.limitSymbolsToIncludedHeaders": "設為 true，就會只處理直接或間接以標頭形式包含的檔案; 設為 false，則會處理位於指定 include 路徑下的所有檔案。",
  21: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.databaseFilename": "產生的符號資料庫路徑。如果指定了相對路徑，就會是相對於工作區預設儲存位置的路徑。",
  22: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.path": "用來為工作區符號進行索引編製與剖析的路徑清單 (供 [移至定義]、[尋找所有參考] 等使用)。根據預設，會以遞迴方式搜尋這些路徑。指定 '*' 表示非遞迴搜尋。例如，'${workspaceFolder}' 將在所有子目錄中搜尋，'${workspaceFolder}/*' 則不會。",
  23: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.customConfigurationVariables": "可透過命令 ${cpptools:activeConfigCustomVariable} 查詢的自訂變數，用於 launch.json 或 tasks.js 的輸入變數。",
  24: 	"c_cpp_properties.schema.json.definitions.env": "可以透過使用 ${變數} 或 ${環境:變數} 語法，在此檔案中任何地方重複使用的自訂變數。",
  25: 	"c_cpp_properties.schema.json.definitions.version": "組態檔版本。此屬性受延伸模組管理，請勿變更。",
  26: 	"c_cpp_properties.schema.json.definitions.enableConfigurationSquiggles": "控制延伸模組是否會回報 c_cpp_properties.json 中偵測到的錯誤。"
  27  }

Extension\i18n\cht\package.i18n.json:
    9  	"c_cpp.command.configurationProviderSelect.title": "變更組態提供者...",
   10: 	"c_cpp.command.configurationEditJSON.title": "編輯組態 (JSON)",
   11  	"c_cpp.command.configurationEditUI.title": "編輯組態 (UI)",

  146  	"c_cpp.configuration.intelliSenseUpdateDelay.description": "控制 IntelliSense 在修改之後，開始更新前的延遲 (毫秒)。",
  147: 	"c_cpp.configuration.default.includePath.description": "若 c_cpp_properties.json 中未指定 \"includePath\" 時，要在設定中使用的值。如有指定 \"includePath\"，請將 \"${default}\" 新增到陣列中，以插入此設定的值。",
  148  	"c_cpp.configuration.default.defines.description": "當 \"defines\" 未指定時，要在設定中使用的值，或 \"defines\" 中有 \"${default}\" 時要插入的值。",

  162  	"c_cpp.configuration.default.systemIncludePath.description": "要用於系統包含路徑的值。若設定，會覆寫透過 \"compilerPath\" 和 \"compileCommands\" 設定所取得的系統包含路徑。",
  163: 	"c_cpp.configuration.default.enableConfigurationSquiggles.description": "控制延伸模組是否會回報 c_cpp_properties.json 中偵測到的錯誤。",
  164  	"c_cpp.configuration.default.customConfigurationVariables.description": "當未設定 \"customConfigurationVariables\" 時要在組態中使用的值，或當 \"${default}\" 在 \"customConfigurationVariables\" 中顯示為索引鍵時要插入的值。",

  178  	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: 其他參考結果",
  179: 	"c_cpp.contributes.viewsWelcome.contents": "如需深入了解 launch.json，請參閱[設定 C/ C++ 偵錯](https://code.visualstudio.com/docs/cpp/launch-json-reference)。",
  180  	"c_cpp.debuggers.pipeTransport.description": "出現時，會指示偵錯工具使用另一個可執行檔來連線至遠端電腦，該管道會在 VS Code 與 MI 啟用偵錯工具後端可執行檔之間傳送標準輸入/輸出 (例如 gdb)。",

Extension\i18n\cht\src\common.i18n.json:
  6  {
  7: 	"failed.to.parse.json": "無法剖析 json 檔案，這可能是因為註解或結尾逗號所致。",
  8  	"extension.not.ready": "C/C ++ 延伸模組仍在安裝。如需詳細資訊，請查看輸出視窗。",

Extension\i18n\cht\src\nativeStrings.i18n.json:
   15  	"include_errors_update_include_path_intellisense_disabled": "偵測到 #include 錯誤。請更新您的 includePath。此編譯單位 ({0}) 的 IntelliSense 功能將由標籤剖析器提供。",
   16: 	"include_errors_update_compile_commands_or_include_path_intellisense_disabled": "偵測到 #include 錯誤。請考慮更新 compile_commands.json 或 includePath。此編譯單位 ({0}) 的 IntelliSense 功能將由標籤剖析器提供。",
   17: 	"could_not_parse_compile_commands": "無法剖析 \"{0}\"。將改用資料夾 '{1}' 中 c_cpp_properties.json 的 'includePath'。",
   18: 	"could_not_find_compile_commands": "找不到 \"{0}\"。將改用資料夾 '{1}' 中 c_cpp_properties.json 的 'includePath'。",
   19: 	"file_not_found_in_path": "在 \"{1}\" 中找不到 \"{0}\"。將對此檔案改用資料夾 '{2}' 中 c_cpp_properties.json 的 'includePath'。",
   20  	"database_reset": "已成功重設 IntelliSense 資料庫。",

   47  	"failed_to_reset_timestamps_for": "無法重設 {0} 的時間戳記: 錯誤 = {1}",
   48: 	"no_suitable_complier": "找不到任何適合的編譯器。請設定 c_cpp_properties.json 中的 \"compilerPath\"。",
   49  	"compiler_include_not_found": "找不到編譯器包含路徑: {0}",

  122  	"error_limit_exceeded": "超過錯誤限制，未回報 {0} 個錯誤。",
  123: 	"include_errors_update_compile_commands_or_include_path_squiggles_disabled": "偵測到 #include 錯誤。請考慮更新 compile_commands.json 或 includePath。此編譯單位 ({0}) 的波浪線已停用。",
  124  	"cannot_reset_database": "無法重設 IntelliSense 資料庫。若要手動重設，請關閉所有 VS Code 執行個體，然後刪除此檔案: {0}",

  179  	"cpp_compiler_from_compiler_path": "正在嘗試從 C++ 編譯器的 \"compilerPath\" 屬性中取得預設值: '{0}'",
  180: 	"c_compiler_from_compile_commands": "正在嘗試從 C 編譯器的 compile_commands.json 檔案中取得預設值: '{0}'",
  181: 	"cpp_compiler_from_compile_commands": "正在嘗試從 C++ 編譯器的 compile_commands.json 檔案中取得預設值: '{0}'",
  182  	"c_intellisense_mode_changed": "若為 C 原始程式檔，IntelliSenseMode 已從 \"{0}\" 變更為 \"{1}\"。",

Extension\i18n\cht\src\LanguageServer\client.i18n.json:
  24  	"update.intellisense.time": "更新 IntelliSense 時間 (秒): {0}",
  25: 	"configure.json.button": "設定 (JSON)",
  26  	"configure.ui.button": "設定 (UI)",

  29  	"configure.your.intellisense.settings": "設定您的 IntelliSense 設定，以協助找出缺少的標頭。",
  30: 	"a.compile.commands.file": "compile_commands.json 檔案",
  31  	"auto-configure.intellisense.folder": "是否要使用 {0} 自動設定 '{1}' 資料夾的 IntelliSense?",

Extension\i18n\cht\src\LanguageServer\configurations.i18n.json:
   9  	"invalid.configuration.file": "組態檔。陣列中至少必須有一個組態。",
  10: 	"unknown.properties.version": "在 c_cpp_properties.json 中找到未知的版本號碼。某些功能可能無法如期運作。",
  11  	"update.properties.failed": "嘗試更新 \"{0}\" 失敗 (您有寫入權限嗎?)",

Extension\i18n\cht\src\LanguageServer\ui.i18n.json:
  12  	"edit.configuration.ui": "編輯組態 (UI)",
  13: 	"edit.configuration.json": "編輯組態 (JSON)",
  14  	"select.configuration.provider": "選取組態提供者...",

  17  	"disable.configuration.provider": "如果適用，停用現有組態提供者。",
  18: 	"select.compile.commands": "選取 compile_commands.json...",
  19  	"select.workspace": "選取工作區資料夾...",

Extension\i18n\cht\ui\settings.html.i18n.json:
  10  	"edit.configurations.ui": "C/C++: 編輯組態 (UI)",
  11: 	"switch.to.json": "按一下檔案連結或使用以下命令切換至 {0} 檔案:",
  12: 	"edit.configurations.in.json": "編輯 JSON 檔案中的組態",
  13: 	"edit.configurations.json": "C/C++: 編輯組態 (JSON)",
  14  	"check.the.schema": "若要深入了解 C/C++ 屬性，請前往 {0}。",

Extension\i18n\csy\c_cpp_properties.schema.json.i18n.json:
   6  {
   7: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.name": "Identifikátor konfigurace. Mac, Linux a Win32 jsou speciální identifikátory pro konfigurace, které se pro dané platformy vyberou automaticky, ale jinak může být identifikátorem cokoli.",
   8: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerPath": "Úplná cesta ke kompilátoru, který se použije, třeba /usr/bin/gcc. Umožní přesnější IntelliSense.",
   9: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerArgs": "Argumenty kompilátoru, které upraví použité direktivy include a define, např. -nostdinc++, -m32 apod.",
  10: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cStandard": "Verze standardu jazyka C, která se použije pro IntelliSense. Poznámka: Standardy GNU se používají jen k odeslání dotazu nastavenému kompilátoru, aby se získaly definice GNU. IntelliSense bude emulovat ekvivalentní verzi standardu C.",
  11: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cppStandard": "Verze standardu jazyka C++, která se použije pro IntelliSense. Poznámka: Standardy GNU se používají jen k odeslání dotazu nastavenému kompilátoru, aby se získaly definice GNU. IntelliSense bude emulovat ekvivalentní verzi standardu C++.",
  12: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compileCommands": "Úplná cesta k souboru compile_commands.json pro pracovní prostor",
  13: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.includePath": "Seznam cest, které modul IntelliSense použije při hledání zahrnutých hlaviček. Hledání v těchto cestách není rekurzivní. Pokud chcete zapnout rekurzivní hledání, zadejte **. Například při zadání ${workspaceFolder}/** se bude hledat ve všech podadresářích, zatímco při zadání ${workspaceFolder} nebude.",
  14: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.macFrameworkPath": "Seznam cest pro modul IntelliSense, který se použije při hledání zahrnutých hlaviček z architektur Mac. Podporuje se jen pro konfiguraci pro Mac.",
  15: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.windowsSdkVersion": "Verze cesty pro vložené soubory sady Windows SDK, která se má použít ve Windows, např. 10.0.17134.0",
  16: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.defines": "Seznam definic preprocesoru, které modul IntelliSense použije při parsování souborů. Volitelně můžete pomocí = nastavit hodnotu, třeba VERSION=1.",
  17: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.intelliSenseMode": "Režim IntelliSense, který se použije a mapuje na variantu platformy a architektury MSVC, gcc nebo Clangu. Pokud se nenastaví nebo nastaví na ${default}, rozšíření zvolí výchozí režim pro danou platformu. Výchozí možnost pro Windows je windows-msvc-x64, pro Linux linux-gcc-x64 a pro macOS macos-clang-x64. Režimy IntelliSense, které specifikují pouze varianty <compiler>-<architecture> (např. gcc-x64), jsou starší režimy a automaticky se převádí na varianty <platform>-<compiler>-<architecture> založené na hostitelské platformě.",
  18: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.forcedInclude": "Seznam souborů, které by se měly zahrnout dříve než kterýkoli vložený soubor v jednotce překladu",
  19: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.configurationProvider": "ID rozšíření VS Code, které může funkci IntelliSense poskytnout informace o konfiguraci pro zdrojové soubory.",
  20: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.limitSymbolsToIncludedHeaders": "True, pokud chcete zpracovat jen soubory přímo nebo nepřímo zahrnuté jako hlavičky, false, pokud chcete zpracovat všechny soubory na zadaných cestách pro vložené soubory",
  21: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.databaseFilename": "Cesta k vygenerované databázi symbolů. Pokud se zadá relativní cesta, nastaví se jako relativní k výchozímu umístění úložiště pracovního prostoru.",
  22: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.path": "Seznam cest, které se použijí pro indexování a parsování symbolů pracovního prostoru (použijí se pro funkce Přejít na definici, Najít všechny odkazy apod.). Hledání na těchto cestách je standardně rekurzivní. Pokud chcete zadat nerekurzivní vyhledávání, zadejte *. Například ${workspaceFolder} prohledá všechny podadresáře, ale ${workspaceFolder}/* ne.",
  23: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.customConfigurationVariables": "Vlastní proměnné, na které se dá poslat dotaz prostřednictvím příkazu ${cpptools:activeConfigCustomVariable}, aby se použily jako vstupní proměnné v souborech launch.json nebo tasks.json.",
  24: 	"c_cpp_properties.schema.json.definitions.env": "Vlastní proměnné, které se dají opakovaně použít kdekoli v tomto souboru pomocí syntaxe ${proměnná} nebo ${env:proměnná}.",
  25: 	"c_cpp_properties.schema.json.definitions.version": "Verze konfiguračního souboru. Tuto vlastnost spravuje rozšíření. Neměňte ji prosím.",
  26: 	"c_cpp_properties.schema.json.definitions.enableConfigurationSquiggles": "Určuje, jestli rozšíření ohlásí chyby zjištěné v souboru c_cpp_properties.json."
  27  }

Extension\i18n\csy\package.i18n.json:
    6  {
    7: 	"c_cpp.capabilities.untrustedWorkspaces.description": "Více nastavení může způsobit spuštění procesů místních pro pracovní prostor, třeba C_Cpp.clang_format_path, C_Cpp.addNodeAddonIncludePaths, C_Cpp.default.compilerPath, C_Cpp.default.configurationProvider a C_Cpp.default.compileCommands, a ekvivalentní vlastnosti v souboru c_cpp_properties.json.",
    8  	"c_cpp.command.configurationSelect.title": "Vybrat konfiguraci...",
    9  	"c_cpp.command.configurationProviderSelect.title": "Změnit poskytovatele konfigurací...",
   10: 	"c_cpp.command.configurationEditJSON.title": "Upravit konfigurace (JSON)",
   11  	"c_cpp.command.configurationEditUI.title": "Upravit konfigurace (uživatelské rozhraní)",

  146  	"c_cpp.configuration.intelliSenseUpdateDelay.description": "Určuje prodlevu v milisekundách, než se po úpravě začne aktualizovat IntelliSense.",
  147: 	"c_cpp.configuration.default.includePath.description": "Hodnota, která se použije v konfiguraci, když se v souboru c_cpp_properties.json nezadá includePath. Pokud se includePath zadá, přidejte do pole ${default}, aby se vložily hodnoty z tohoto nastavení.",
  148  	"c_cpp.configuration.default.defines.description": "Hodnota, která se použije v konfiguraci, pokud se nezadá defines, nebo hodnoty, které se mají vložit, pokud se v defines nachází ${default}",

  162  	"c_cpp.configuration.default.systemIncludePath.description": "Hodnota, která se použije pro systémovou cestu pro vložené soubory. Pokud se nastaví, přepíše systémovou cestu pro vložené soubory získanou z nastavení compilerPath a compileCommands.",
  163: 	"c_cpp.configuration.default.enableConfigurationSquiggles.description": "Určuje, jestli rozšíření ohlásí chyby zjištěné v souboru c_cpp_properties.json.",
  164  	"c_cpp.configuration.default.customConfigurationVariables.description": "Hodnota, která se použije v konfiguraci, pokud se nenastaví customConfigurationVariables, nebo hodnoty, které se mají vložit, pokud se v customConfigurationVariables jako klíč nachází ${default}",

  178  	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: výsledky jiných odkazů",
  179: 	"c_cpp.contributes.viewsWelcome.contents": "Další informace o launch.json najdete tady: [konfigurace C/C++ ladění](https://code.visualstudio.com/docs/cpp/launch-json-reference).",
  180  	"c_cpp.debuggers.pipeTransport.description": "Pokud je k dispozici, předá ladicímu programu informaci, aby se připojil ke vzdálenému počítači pomocí dalšího spustitelného souboru jako kanál, který bude přenášet standardní vstup a výstup mezi nástrojem VS Code a spustitelným souborem back-endu ladicího programu s podporou MI (třeba gdb).",

Extension\i18n\csy\src\common.i18n.json:
  6  {
  7: 	"failed.to.parse.json": "Nepovedlo se parsovat soubor json, pravděpodobně kvůli komentářům nebo čárkám na konci.",
  8  	"extension.not.ready": "Rozšíření C/C++ se stále instaluje. Další informace najdete v okně výstupu.",

Extension\i18n\csy\src\nativeStrings.i18n.json:
   15  	"include_errors_update_include_path_intellisense_disabled": "Zjistily se chyby direktivy #include. Aktualizujte prosím includePath. Funkce IntelliSense pro tuto jednotku překladu ({0}) poskytne analyzátor značek.",
   16: 	"include_errors_update_compile_commands_or_include_path_intellisense_disabled": "Zjistily se chyby direktivy #include. Zvažte možnost aktualizovat soubor compile_commands.json nebo includePath. Funkce IntelliSense pro tuto jednotku překladu ({0}) poskytne analyzátor značek.",
   17: 	"could_not_parse_compile_commands": "{0} se nepovedlo parsovat. Použijí se místo toho includePath ze souboru c_cpp_properties.json ve složce {1}.",
   18: 	"could_not_find_compile_commands": "{0} se nepovedlo najít. Použijí se místo toho includePath ze souboru c_cpp_properties.json ve složce {1}.",
   19: 	"file_not_found_in_path": "{0} se v {1} nenašlo. Pro tento soubor se místo toho použije includePath ze souboru c_cpp_properties.json ve složce {2}.",
   20  	"database_reset": "Databáze IntelliSense se úspěšně resetovala.",

   47  	"failed_to_reset_timestamps_for": "Nepovedlo se resetovat časové razítko pro {0}: chyba = {1}",
   48: 	"no_suitable_complier": "Nenašel se žádný vhodný kompilátor. Nastavte prosím compilerPath v souboru c_cpp_properties.json.",
   49  	"compiler_include_not_found": "Nenašla se cesta kompilátoru pro vložené soubory: {0}",

  122  	"error_limit_exceeded": "Dosáhlo se limitu chyb, následující počet chyb se neohlásil: {0}",
  123: 	"include_errors_update_compile_commands_or_include_path_squiggles_disabled": "Zjistily se chyby direktivy #include. Zvažte možnost aktualizovat soubor compile_commands.json nebo includePath. Podtrhávání vlnovkou je pro tuto jednotku překladu ({0}) zakázané.",
  124  	"cannot_reset_database": "Databázi IntelliSense se nepovedlo resetovat. Pokud ji chcete resetovat ručně, zavřete všechny instance VS Code a pak odstraňte tento soubor: {0}",

  179  	"cpp_compiler_from_compiler_path": "Probíhá pokus o získání výchozích hodnot z kompilátoru jazyka C++ ve vlastnosti compilerPath: {0}",
  180: 	"c_compiler_from_compile_commands": "Probíhá pokus o získání výchozích hodnot z kompilátoru jazyka C v souboru compile_commands.json: {0}",
  181: 	"cpp_compiler_from_compile_commands": "Probíhá pokus o získání výchozích hodnot z kompilátoru jazyka C++ v souboru compile_commands.json: {0}",
  182  	"c_intellisense_mode_changed": "Pro zdrojové soubory jazyka C se režim IntelliSenseMode změnil z {0} na {1}.",

Extension\i18n\csy\src\LanguageServer\client.i18n.json:
  24  	"update.intellisense.time": "Čas aktualizace IntelliSense (sek.): {0}",
  25: 	"configure.json.button": "Nakonfigurovat (JSON)",
  26  	"configure.ui.button": "Nakonfigurovat (uživatelské rozhraní)",

  29  	"configure.your.intellisense.settings": "Pokud chcete snadněji najít chybějící hlavičky, nakonfigurujte nastavení IntelliSense.",
  30: 	"a.compile.commands.file": "soubor compile_commands.json",
  31  	"auto-configure.intellisense.folder": "Chcete použít {0} k automatické konfiguraci IntelliSense pro složku {1}?",

Extension\i18n\csy\src\LanguageServer\configurations.i18n.json:
   9  	"invalid.configuration.file": "Neplatný konfigurační soubor. V poli se musí nacházet alespoň jedna konfigurace.",
  10: 	"unknown.properties.version": "V souboru c_cpp_properties.json se našlo neplatné číslo verze. Některé funkce nemusí fungovat podle očekávání.",
  11  	"update.properties.failed": "Nepovedlo se aktualizovat {0} (máte oprávnění k zápisu?).",

Extension\i18n\csy\src\LanguageServer\ui.i18n.json:
  12  	"edit.configuration.ui": "Upravit konfigurace (uživatelské rozhraní)",
  13: 	"edit.configuration.json": "Upravit konfigurace (JSON)",
  14  	"select.configuration.provider": "Vyberte poskytovatele konfigurací...",

  17  	"disable.configuration.provider": "Zakažte aktivního poskytovatele konfigurací, pokud je to možné.",
  18: 	"select.compile.commands": "Vyberte soubor compile_commands.json...",
  19  	"select.workspace": "Vyberte složku pracovního prostoru...",

Extension\i18n\csy\ui\settings.html.i18n.json:
  10  	"edit.configurations.ui": "C/C++: Upravit konfigurace (uživatelské rozhraní)",
  11: 	"switch.to.json": "Pokud se chcete přepnout na soubor {0}, klikněte na odkaz na soubor nebo použijte příkaz:",
  12: 	"edit.configurations.in.json": "Upravit konfigurace v souboru JSON",
  13: 	"edit.configurations.json": "C/C++: Upravit konfigurace (JSON)",
  14  	"check.the.schema": "Další informace o vlastnostech jazyků C/C++ najdete tady: {0}",

Extension\i18n\deu\c_cpp_properties.schema.json.i18n.json:
   6  {
   7: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.name": "Konfigurationsbezeichner. Mac, Linux und Win32 sind spezielle Bezeichner für Konfigurationen, die auf diesen Plattformen automatisch ausgewählt werden. Sie können jedoch einen beliebigen Bezeichner angeben.",
   8: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerPath": "Vollständiger Pfad zum verwendeten Compiler für mehr Genauigkeit bei IntelliSense (Beispiel: /usr/bin/gcc).",
   9: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerArgs": "Compilerargumente zum Ändern der verwendeten Include- oder Define-Anweisungen. Beispiel: \"-nostdinc++\", \"-m32\" usw.",
  10: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cStandard": "Version des C-Sprachstandards, die für IntelliSense verwendet werden soll. Hinweis: GNU-Standards werden nur zum Abfragen des festgelegten Compilers zum Abrufen von GNU-Definitionen verwendet, und IntelliSense emuliert die äquivalente Version des C-Standards.",
  11: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cppStandard": "Version des C++-Sprachstandards, die für IntelliSense verwendet werden soll. Hinweis: GNU-Standards werden nur zum Abfragen des festgelegten Compilers zum Abrufen von GNU-Definitionen verwendet, und IntelliSense emuliert die äquivalente Version des C++-Standards.",
  12: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compileCommands": "Vollständiger Pfad zur Datei \"compile_commands.json\" für den Arbeitsbereich.",
  13: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.includePath": "Eine Liste mit Pfaden, die von der IntelliSense-Engine bei der Suche nach eingeschlossenen Headern verwendet werden sollen. In diesen Pfaden wird keine rekursive Suche durchgeführt. Geben Sie \"*\" an, um eine rekursive Suche durchzuführen. Beispiel: Bei einer Festlegung auf \"${workspaceFolder}/**\" werden alle Unterverzeichnisse durchsucht, bei Verwendung von \"${workspaceFolder}\" werden keine Unterverzeichnisse durchsucht.",
  14: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.macFrameworkPath": "Eine Liste der Pfade für die IntelliSense-Engine, die beim Suchen nach eingeschlossenen Headern aus Mac-Frameworks verwendet werden sollen. Wird nur in der Mac-Konfiguration unterstützt.",
  15: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.windowsSdkVersion": "Die Version des Windows SDK-Includepfads zur Verwendung unter Windows, z. B. \"10.0.17134.0\".",
  16: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.defines": "Eine Liste der Präprozessordefinitionen für die IntelliSense-Engine, die beim Analysieren von Dateien verwendet werden sollen. Verwenden Sie optional \"=\", um einen Wert festzulegen. Beispiel: VERSION=1.",
  17: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.intelliSenseMode": "Der zu verwendende IntelliSense-Modus, der einer Plattform- und Architekturvariante von MSVC, gcc oder Clang zugeordnet wird. Wenn er nicht oder auf \"${default}\" festgelegt wird, wählt die Erweiterung den Standardwert für diese Plattform aus. Bei Windows lautet dieser \"windows-msvc-x64\", bei Linux \"linux-gcc-x64\" und bei macOS \"macos-clang-x64\". IntelliSense-Modi, die nur Varianten in der Form \"<compiler>-<architektur>\" angeben (z. B. gcc-x64) sind Legacymodi, die basierend auf der Hostplattform automatisch in Varianten des Formats \"<plattform>-<compiler>-<architektur>\" konvertiert werden.",
  18: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.forcedInclude": "Eine Liste der Dateien, die vor einer Includedatei in einer Übersetzungseinheit enthalten sein sollen.",
  19: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.configurationProvider": "Die ID einer VS Code-Erweiterung, die IntelliSense-Konfigurationsinformationen für Quelldateien bereitstellen kann.",
  20: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.limitSymbolsToIncludedHeaders": "TRUE, um nur die direkt oder indirekt als Header enthaltenen Dateien zu verarbeiten; FALSE, um alle Dateien unter den angegebenen Includepfaden zu verarbeiten.",
  21: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.databaseFilename": "Pfad zur generierten Symboldatenbank. Wenn ein relativer Pfad angegeben wird, wird er relativ zum Standardspeicherort des Arbeitsbereichs erstellt.",
  22: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.path": "Eine Liste der Pfade, die für die Indizierung und Analyse von Arbeitsbereichssymbolen verwendet werden sollen (z. B. bei \"Zur Definition wechseln\" oder \"Alle Verweise suchen\"). Die Suche in diesen Pfaden ist standardmäßig rekursiv. Geben Sie \"*\" an, um eine nicht rekursive Suche durchzuführen. Beispiel: Bei \"${workspaceFolder}\" werden alle Unterverzeichnisse durchsucht, bei \"${workspaceFolder}/*\" hingegen nicht.",
  23: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.customConfigurationVariables": "Benutzerdefinierte Variablen, die über den Befehl ${cpptools:activeConfigCustomVariable} abgefragt und für die Eingabevariablen in launch.json oder tasks.json verwendet werden können.",
  24: 	"c_cpp_properties.schema.json.definitions.env": "Benutzerdefinierte Variablen, die mithilfe der ${variable}- oder ${env:variable}-Syntax an beliebiger Stelle in dieser Datei wiederverwendet werden können.",
  25: 	"c_cpp_properties.schema.json.definitions.version": "Version der Konfigurationsdatei. Diese Eigenschaft wird von der Erweiterung verwaltet und darf nicht geändert werden.",
  26: 	"c_cpp_properties.schema.json.definitions.enableConfigurationSquiggles": "Hiermit wird gesteuert, ob die Erweiterung in \"c_cpp_properties.json\" erkannte Fehler meldet."
  27  }

Extension\i18n\deu\package.i18n.json:
    6  {
    7: 	"c_cpp.capabilities.untrustedWorkspaces.description": "Mehrere Einstellungen können dazu führen, dass lokale Prozesse für den Arbeitsbereich ausgeführt werden, z. B. C_Cpp.clang_format_path, C_Cpp.addNodeAddonIncludePaths, C_Cpp.default.compilerPath, C_Cpp.default.configurationProvider, and C_Cpp.default.compileCommands und die entsprechenden Eigenschaften in c_cpp_properties.json.",
    8  	"c_cpp.command.configurationSelect.title": "Konfiguration auswählen...",
    9  	"c_cpp.command.configurationProviderSelect.title": "Konfigurationsanbieter ändern...",
   10: 	"c_cpp.command.configurationEditJSON.title": "Konfigurationen bearbeiten (JSON)",
   11  	"c_cpp.command.configurationEditUI.title": "Konfigurationen bearbeiten (Benutzeroberfläche)",

  146  	"c_cpp.configuration.intelliSenseUpdateDelay.description": "Steuert die Verzögerung in Millisekunden, bevor IntelliSense nach einer Änderung aktualisiert wird.",
  147: 	"c_cpp.configuration.default.includePath.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"includePath\" nicht in c_cpp_properties.json angegeben ist. Wenn \"includePath\" angegeben ist, fügen Sie dem Array \"${default}\" hinzu, um die Werte aus dieser Einstellung einzufügen.",
  148  	"c_cpp.configuration.default.defines.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"defines\" nicht angegeben ist, oder die einzufügenden Werte, wenn \"${default}\" in \"defines\" vorhanden ist.",

  162  	"c_cpp.configuration.default.systemIncludePath.description": "Der Wert, der für den Systemincludepfad verwendet werden soll. Wenn diese Option festgelegt ist, wird der über die Einstellungen \"compilerPath\" und \"compileCommands\" erhaltene Systemincludepfad überschrieben.",
  163: 	"c_cpp.configuration.default.enableConfigurationSquiggles.description": "Hiermit wird gesteuert, ob die Erweiterung in \"c_cpp_properties.json\" erkannte Fehler meldet.",
  164  	"c_cpp.configuration.default.customConfigurationVariables.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"customConfigurationVariables\" nicht angegeben ist, oder die einzufügenden Werte, wenn \"${default}\" als Schlüssel in \"customConfigurationVariables\" vorhanden ist.",

  178  	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: andere Verweisergebnisse",
  179: 	"c_cpp.contributes.viewsWelcome.contents": "Weitere Informationen zu launch.json finden Sie unter [Konfigurieren von C/C++-Debuggen](https://code.visualstudio.com/docs/cpp/launch-json-reference).",
  180  	"c_cpp.debuggers.pipeTransport.description": "Falls angegeben, weist diese Option den Debugger an, eine Verbindung mit einem Remotecomputer mithilfe einer anderen ausführbaren Datei als Pipe herzustellen, die Standardeingaben/-ausgaben zwischen VS Code und der ausführbaren Back-End-Datei für den MI-fähigen Debugger weiterleitet (z. B. gdb).",

Extension\i18n\deu\src\common.i18n.json:
  6  {
  7: 	"failed.to.parse.json": "Fehler beim Analysieren der JSON-Datei, möglicherweise aufgrund von Kommentaren oder nachgestellten Kommas.",
  8  	"extension.not.ready": "Die C/C++-Erweiterung wird noch installiert. Weitere Informationen finden Sie im Ausgabefenster.",

Extension\i18n\deu\src\nativeStrings.i18n.json:
   15  	"include_errors_update_include_path_intellisense_disabled": "#include-Fehler erkannt. Aktualisieren Sie Ihren includePath. IntelliSense-Features für diese Übersetzungseinheit ({0}) werden vom Tagparser bereitgestellt.",
   16: 	"include_errors_update_compile_commands_or_include_path_intellisense_disabled": "#include-Fehler erkannt. Erwägen Sie, Ihre compile_commands.json-Datei oder Ihren includePath zu aktualisieren. IntelliSense-Features für diese Übersetzungseinheit ({0}) werden vom Tagparser bereitgestellt.",
   17: 	"could_not_parse_compile_commands": "\"{0}\" konnte nicht analysiert werden. Stattdessen wird \"includePath\" aus \"c_cpp_properties.json\" im Ordner \"{1}\" verwendet.",
   18: 	"could_not_find_compile_commands": "\"{0}\" wurde nicht gefunden. Stattdessen wird \"includePath\" aus \"c_cpp_properties.json\" im Ordner \"{1}\" verwendet.",
   19: 	"file_not_found_in_path": "\"{0}\" wurde in \"{1}\" nicht gefunden. Stattdessen wird \"includePath\" aus \"c_cpp_properties.json\" im Ordner \"{2}\" für diese Datei verwendet.",
   20  	"database_reset": "Die IntelliSense-Datenbank wurde erfolgreich zurückgesetzt.",

   47  	"failed_to_reset_timestamps_for": "Fehler beim Zurücksetzen des Zeitstempels für \"{0}\": Fehler = {1}",
   48: 	"no_suitable_complier": "Es wurde kein geeigneter Compiler gefunden. Legen Sie \"compilerPath\" in \"c_cpp_properties.json\" fest.",
   49  	"compiler_include_not_found": "Compilerincludepfad nicht gefunden: {0}",

  122  	"error_limit_exceeded": "Fehlerlimit überschritten, {0} Fehler nicht gemeldet.",
  123: 	"include_errors_update_compile_commands_or_include_path_squiggles_disabled": "#include-Fehler erkannt. Erwägen Sie, Ihre compile_commands.json-Datei oder Ihren includePath zu aktualisieren. Wellenlinien sind für diese Übersetzungseinheit ({0}) deaktiviert.",
  124  	"cannot_reset_database": "Die IntelliSense-Datenbank konnte nicht zurückgesetzt werden. Um sie manuell zurückzusetzen, schließen Sie alle VS Code-Instanzen, und löschen Sie dann diese Datei: {0}",

  179  	"cpp_compiler_from_compiler_path": "Es wird versucht, Standardwerte vom C++-Compiler in der Eigenschaft \"compilerPath\" abzurufen: {0}",
  180: 	"c_compiler_from_compile_commands": "Es wird versucht, Standardwerte vom C-Compiler in der Datei \"compile_commands.json\" abzurufen: {0}",
  181: 	"cpp_compiler_from_compile_commands": "Es wird versucht, Standardwerte vom C++-Compiler in der Datei \"compile_commands.json\" abzurufen: {0}",
  182  	"c_intellisense_mode_changed": "Für C-Quelldateien wurde \"IntelliSenseMode\" von \"{0}\" in \"{1}\" geändert.",

Extension\i18n\deu\src\LanguageServer\client.i18n.json:
  24  	"update.intellisense.time": "IntelliSense-Zeit aktualisieren (Sek.): {0}",
  25: 	"configure.json.button": "Konfigurieren (JSON)",
  26  	"configure.ui.button": "Konfigurieren (Benutzeroberfläche)",

  29  	"configure.your.intellisense.settings": "Konfigurieren Sie Ihre IntelliSense-Einstellungen, um fehlende Header zu suchen.",
  30: 	"a.compile.commands.file": "eine compile_commands.json-Datei",
  31  	"auto-configure.intellisense.folder": "Möchten Sie {0} zum automatischen Konfigurieren von IntelliSense für den Ordner \"{1}\" verwenden?",

Extension\i18n\deu\src\LanguageServer\configurations.i18n.json:
   9  	"invalid.configuration.file": "Ungültige Konfigurationsdatei. Im Array muss mindestens eine Konfiguration vorhanden sein.",
  10: 	"unknown.properties.version": "In \"c_cpp_properties.json\" wurde eine unbekannte Versionsnummer gefunden. Einige Features funktionieren möglicherweise nicht wie erwartet.",
  11  	"update.properties.failed": "Fehler beim Aktualisieren von \"{0}\". (Besitzen Sie Schreibzugriff?)",

Extension\i18n\deu\src\LanguageServer\ui.i18n.json:
  12  	"edit.configuration.ui": "Konfigurationen bearbeiten (Benutzeroberfläche)",
  13: 	"edit.configuration.json": "Konfigurationen bearbeiten (JSON)",
  14  	"select.configuration.provider": "Konfigurationsanbieter auswählen...",

  17  	"disable.configuration.provider": "Deaktivieren Sie den aktiven Konfigurationsanbieter, falls zutreffend.",
  18: 	"select.compile.commands": "compile_commands.json-Datei auswählen...",
  19  	"select.workspace": "Arbeitsbereichsordner auswählen...",

Extension\i18n\deu\ui\settings.html.i18n.json:
  10  	"edit.configurations.ui": "C/C++: Konfigurationen bearbeiten (Benutzeroberfläche)",
  11: 	"switch.to.json": "Wechseln Sie zur {0}-Datei, indem Sie auf den Link klicken oder diesen Befehl verwenden:",
  12: 	"edit.configurations.in.json": "Konfigurationen in JSON-Datei bearbeiten",
  13: 	"edit.configurations.json": "C/C++: Konfigurationen bearbeiten (JSON)",
  14  	"check.the.schema": "Weitere Informationen zu den C-/C++-Eigenschaften finden Sie unter {0}.",

Extension\i18n\esn\c_cpp_properties.schema.json.i18n.json:
   6  {
   7: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.name": "Identificador de configuración. Mac, Linux y Win32 son identificadores especiales de configuraciones que se seleccionarán automáticamente en esas plataformas, pero el identificador puede ser cualquier texto.",
   8: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerPath": "Ruta de acceso completa del compilador usado (por ejemplo, /usr/bin/gcc) para que IntelliSense sea más preciso.",
   9: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerArgs": "Argumentos del compilador para modificar las inclusiones o definiciones usadas (por ejemplo, -nostdinc++, -m32, etc.).",
  10: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cStandard": "Versión del estándar del lenguaje C que se va a usar para IntelliSense. Nota: Los estándares GNU solo se usan para consultar el compilador de conjuntos a fin de obtener definiciones GNU e IntelliSense emulará la versión del estándar C equivalente.",
  11: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cppStandard": "Versión del estándar del lenguaje C++ que se va a usar para IntelliSense. Nota: Los estándares GNU solo se usan para consultar el compilador de conjuntos a fin de obtener definiciones GNU e IntelliSense emulará la versión del estándar C++ equivalente.",
  12: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compileCommands": "Ruta de acceso completa al archivo compile_commands.json del área de trabajo.",
  13: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.includePath": "Lista de rutas de acceso que el motor de IntelliSense debe usar al buscar los encabezados incluidos. La búsqueda en estas rutas de acceso no es recursiva. Especifique \"**\" para indicar una búsqueda recursiva. Por ejemplo, \"${workspaceFolder}/**\" buscará en todos los subdirectorios, mientras que \"${workspaceFolder}\" no lo hará.",
  14: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.macFrameworkPath": "Lista de rutas de acceso que el motor de IntelliSense necesita usar para buscar los encabezados incluidos de las plataformas Mac. Solo se admite en configuraciones para Mac.",
  15: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.windowsSdkVersion": "Versión de la ruta de acceso de inclusión del SDK de Windows que debe usarse en Windows; por ejemplo, \"10.0.17134.0\".",
  16: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.defines": "Lista de definiciones del preprocesador que usará el motor de IntelliSense al analizar los archivos. También se puede usar “=” para establecer un valor (por ejemplo, VERSION=1).",
  17: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.intelliSenseMode": "Modo IntelliSense que se usará y que se asigna a una variante de plataforma y arquitectura de MSVC, gcc o Clang. Si se establece en ${default} o no se establece, la extensión usará el valor predeterminado para esa plataforma. De forma predeterminada, Windows usa windows-msvc-x64, Linux usa linux-gcc-x64 y macOS usa macos-clang-x64. Los modos IntelliSense que solo especifican variantes de <compilador>-<arquitectura> (por ejemplo, gcc-x64) son modos heredados y se convierten automáticamente a las variantes de <plataforma>-<compilador>-<arquitectura> en función de la plataforma del host.",
  18: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.forcedInclude": "Lista de archivos que tienen que incluirse antes que cualquier archivo de inclusión en una unidad de traducción.",
  19: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.configurationProvider": "El identificador de una extensión de VS Code que puede proporcionar información de configuración de IntelliSense para los archivos de código fuente.",
  20: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.limitSymbolsToIncludedHeaders": "true para procesar únicamente los archivos incluidos directa o indirectamente como encabezados; false para procesar todos los archivos en las rutas de acceso de inclusión especificadas.",
  21: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.databaseFilename": "Ruta de acceso a la base de datos de símbolos generada. Si se especifica una ruta de acceso relativa, será relativa a la ubicación de almacenamiento predeterminada del área de trabajo.",
  22: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.path": "Lista de rutas de acceso que se usarán para indexar y analizar símbolos del área de trabajo (que se usarán con comandos como Ir a definición, Buscar todas las referencias, etc.). La búsqueda en estas rutas de acceso es recursiva de forma predeterminada. Especifique \"*\" para indicar una búsqueda no recursiva. Por ejemplo, \"${workspaceFolder}\" buscará en todos los subdirectorios, mientras que \"${workspaceFolder}/*\" no lo hará.",
  23: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.customConfigurationVariables": "Variables personalizadas que pueden consultarse mediante el comando ${cpptools:activeConfigCustomVariable} para utilizarlas en las variables de entrada en launch.json o tasks.json.",
  24: 	"c_cpp_properties.schema.json.definitions.env": "Las variables personalizadas se pueden reutilizar en cualquier ubicación del archivo mediante la sintaxis ${variable} o ${env:variable}.",
  25: 	"c_cpp_properties.schema.json.definitions.version": "Versión del archivo de configuración. La extensión administra esta propiedad, no la modifique.",
  26: 	"c_cpp_properties.schema.json.definitions.enableConfigurationSquiggles": "Controla si la extensión notificará los errores detectados en c_cpp_properties.json."
  27  }

Extension\i18n\esn\package.i18n.json:
    6  {
    7: 	"c_cpp.capabilities.untrustedWorkspaces.description": "La configuración múltiple puede provocar que los procesos sean locales en el área de trabajos que se va a ejecutar, por ejemplo, C_Cpp.clang_format_path, C_Cpp.addNodeAddonIncludePaths, C_Cpp.default.compilerPath, C_Cpp.default.configurationProvider y C_Cpp.default.compileCommands y las propiedades equivalentes en c_cpp_properties.json.",
    8  	"c_cpp.command.configurationSelect.title": "Seleccione una configuración...",
    9  	"c_cpp.command.configurationProviderSelect.title": "Cambiar el proveedor de configuración...",
   10: 	"c_cpp.command.configurationEditJSON.title": "Editar configuraciones (JSON)",
   11  	"c_cpp.command.configurationEditUI.title": "Editar configuraciones (interfaz de usuario)",

  146  	"c_cpp.configuration.intelliSenseUpdateDelay.description": "Controla el retraso en milisegundos antes de que IntelliSense inicie la actualización después de una modificación.",
  147: 	"c_cpp.configuration.default.includePath.description": "Valor que se va a usar en una configuración si \"includePath\" no se especifica en c_cpp_properties.json. Si se especifica \"includePath\", agregue \"${default}\" a la matriz para insertar los valores de esta configuración.",
  148  	"c_cpp.configuration.default.defines.description": "Valor que debe usarse en una configuración si no se especifica \"defines\", o bien los valores que se deben insertar si se especifica \"${default}\" en \"defines\".",

  162  	"c_cpp.configuration.default.systemIncludePath.description": "Valor que debe usarse para la ruta de acceso de inclusión del sistema. Si se establece, invalida la ruta de acceso de inclusión del sistema adquirida a través de las opciones de configuración \"compilerPath\" y \"compileCommands\".",
  163: 	"c_cpp.configuration.default.enableConfigurationSquiggles.description": "Controla si la extensión notificará los errores detectados en c_cpp_properties.json.",
  164  	"c_cpp.configuration.default.customConfigurationVariables.description": "Valor que debe usarse en una configuración si no se establece \"customConfigurationVariables\", o bien los valores que se deben insertar si se especifica \"${default}\" como clave en \"customConfigurationVariables\".",

  178  	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: resultados de otras referencias",
  179: 	"c_cpp.contributes.viewsWelcome.contents": "Para obtener más información sobre launch.json, vea [configurar depuración de C/C++](https://code.visualstudio.com/docs/cpp/launch-json-reference).",
  180  	"c_cpp.debuggers.pipeTransport.description": "Cuando se especifica, indica al depurador que se conecte a un equipo remoto usando otro archivo ejecutable como canalización que retransmitirá la entrada o la salida estándar entre VS Code y el archivo ejecutable del back-end del depurador habilitado para MI (por ejemplo, gdb).",

Extension\i18n\esn\src\common.i18n.json:
  6  {
  7: 	"failed.to.parse.json": "No se pudo analizar el archivo json, posiblemente debido a comentarios o a comas finales.",
  8  	"extension.not.ready": "La extensión de C/C++ aún se está instalando. Vea la ventana de salida para obtener más información.",

Extension\i18n\esn\src\nativeStrings.i18n.json:
   15  	"include_errors_update_include_path_intellisense_disabled": "Se han detectado errores de #include. Actualice el valor de includePath. El analizador de etiquetas proporcionará las características de IntelliSense para esta unidad de traducción ({0}).",
   16: 	"include_errors_update_compile_commands_or_include_path_intellisense_disabled": "Se han detectado errores de #include. Considere la posibilidad de actualizar compile_commands.json o includePath. El analizador de etiquetas proporcionará las características de IntelliSense para esta unidad de traducción ({0}).",
   17: 	"could_not_parse_compile_commands": "No se puede analizar \"{0}\". En su lugar, se usará el valor de \"includePath\" del archivo c_cpp_properties.json en la carpeta \"{1}\".",
   18: 	"could_not_find_compile_commands": "No se encuentra \"{0}\". En su lugar, se usará el valor de \"includePath\" del archivo c_cpp_properties.json en la carpeta \"{1}\".",
   19: 	"file_not_found_in_path": "No se encuentra \"{0}\" en \"{1}\". En su lugar, se usará el valor de \"includePath\" del archivo c_cpp_properties.json en la carpeta \"{2}\" para este archivo.",
   20  	"database_reset": "La base de datos de IntelliSense se restableció correctamente.",

   47  	"failed_to_reset_timestamps_for": "No se pudo restablecer la marca de tiempo de {0}. Error = {1}",
   48: 	"no_suitable_complier": "No se encontró ningún compilador adecuado. Establezca \"compilerPath\" en c_cpp_properties.json.",
   49  	"compiler_include_not_found": "No se encontró la ruta de acceso de inclusión del compilador: {0}",

  122  	"error_limit_exceeded": "Se superó el límite de errores, no se han notificado {0} errores.",
  123: 	"include_errors_update_compile_commands_or_include_path_squiggles_disabled": "Se han detectado errores de #include. Considere la posibilidad de actualizar el archivo compile_commands.json o el valor de includePath. El subrayado ondulado de errores está deshabilitado para esta unidad de traducción ({0}).",
  124  	"cannot_reset_database": "No se pudo restablecer la base de datos de IntelliSense. Para restablecerla manualmente, cierre todas las instancias de VS Code y, después, elimine este archivo: {0}",

  179  	"cpp_compiler_from_compiler_path": "Intentando obtener los valores predeterminados del compilador de C++ en la propiedad \"compilerPath\": \"{0}\"",
  180: 	"c_compiler_from_compile_commands": "Intentando obtener los valores predeterminados del compilador de C en el archivo compile_commands.json: \"{0}\"",
  181: 	"cpp_compiler_from_compile_commands": "Intentando obtener los valores predeterminados del compilador de C++ en el archivo compile_commands.json: \"{0}\"",
  182  	"c_intellisense_mode_changed": "Para los archivos de código fuente de C, IntelliSenseMode se ha cambiado de \"{0}\" a \"{1}\".",

Extension\i18n\esn\src\LanguageServer\client.i18n.json:
  24  	"update.intellisense.time": "Tiempo de actualización de IntelliSense (s): {0}",
  25: 	"configure.json.button": "Configurar (JSON)",
  26  	"configure.ui.button": "Configurar (UI)",

  29  	"configure.your.intellisense.settings": "Configure las opciones de IntelliSense para buscar los encabezados que faltan.",
  30: 	"a.compile.commands.file": "un archivo compile_commands.json",
  31  	"auto-configure.intellisense.folder": "¿Desea usar {0} para configurar automáticamente IntelliSense para la carpeta \"{1}\"?",

Extension\i18n\esn\src\LanguageServer\configurations.i18n.json:
   9  	"invalid.configuration.file": "Archivo de configuración no válido. Debe haber al menos una configuración en la matriz.",
  10: 	"unknown.properties.version": "Se encontró un número de versión desconocido en el archivo c_cpp_properties.json. Es posible que algunas características no funcionen correctamente.",
  11  	"update.properties.failed": "No se pudo actualizar \"{0}\". ¿Tiene acceso de escritura?",

Extension\i18n\esn\src\LanguageServer\ui.i18n.json:
  12  	"edit.configuration.ui": "Editar configuraciones (interfaz de usuario)",
  13: 	"edit.configuration.json": "Editar configuraciones (JSON)",
  14  	"select.configuration.provider": "Seleccione un proveedor de configuración...",

  17  	"disable.configuration.provider": "Deshabilite el proveedor de configuración activo, si procede.",
  18: 	"select.compile.commands": "Seleccione un archivo compile_commands.json...",
  19  	"select.workspace": "Seleccione una carpeta del área de trabajo...",

Extension\i18n\esn\ui\settings.html.i18n.json:
  10  	"edit.configurations.ui": "C/C++: Editar configuraciones (UI)",
  11: 	"switch.to.json": "Cambie al archivo {0} haciendo clic en el vínculo del archivo o usando el comando:",
  12: 	"edit.configurations.in.json": "Editar las configuraciones del archivo JSON",
  13: 	"edit.configurations.json": "C/C++: Editar configuraciones (JSON)",
  14  	"check.the.schema": "Para obtener más información sobre las propiedades de C/C++, vaya a {0}.",

Extension\i18n\fra\c_cpp_properties.schema.json.i18n.json:
   6  {
   7: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.name": "Identificateur de configuration. Mac, Linux et Win32 sont des identificateurs spéciaux pour les configurations qui sont automatiquement sélectionnées sur ces plateformes, mais l'identificateur peut avoir n'importe quelle valeur.",
   8: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerPath": "Chemin complet du compilateur utilisé, par ex., /usr/bin/gcc, pour améliorer la précision d'IntelliSense.",
   9: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerArgs": "Arguments du compilateur permettant de modifier les inclusions ou les définitions utilisées, par exemple, -nostdinc++, -m32, etc.",
  10: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cStandard": "Version de la norme de langage C à utiliser pour IntelliSense. Remarque : Les normes GNU sont utilisées uniquement pour interroger le compilateur défini afin d'obtenir les définitions GNU. IntelliSense émule la version C normalisée équivalente.",
  11: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cppStandard": "Version de la norme de langage C++ à utiliser pour IntelliSense. Remarque : Les normes GNU sont utilisées uniquement pour interroger le compilateur défini afin d'obtenir les définitions GNU. IntelliSense émule la version C++ normalisée équivalente.",
  12: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compileCommands": "Chemin complet du fichier compile_commands.json pour l'espace de travail.",
  13: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.includePath": "Liste de chemins à utiliser par le moteur IntelliSense durant la recherche d'en-tête inclus. La recherche dans ces chemins n'est pas récursive. Spécifiez '**' pour indiquer une recherche récursive. Par exemple, '${workspaceFolder}/**' permet d'effectuer une recherche parmi tous les sous-répertoires, ce qui n'est pas le cas de '${workspaceFolder}'.",
  14: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.macFrameworkPath": "Liste de chemins que le moteur IntelliSense doit utiliser pour la recherche des en-têtes inclus dans les frameworks Mac. Prise en charge uniquement sur la configuration Mac.",
  15: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.windowsSdkVersion": "Version du chemin d'inclusion du SDK Windows à utiliser sur Windows, par ex., '10.0.17134.0'.",
  16: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.defines": "Liste des définitions de préprocesseur que le moteur IntelliSense doit utiliser pendant l'analyse des fichiers. Vous pouvez aussi utiliser = pour définir une valeur, par ex., VERSION=1.",
  17: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.intelliSenseMode": "Mode IntelliSense à utiliser, qui est mappé à une variante de plateforme et d'architecture de MSVC, gcc ou Clang. En l'absence de valeur définie, ou si la valeur est ${default}, l'extension choisit la valeur par défaut pour cette plateforme. Pour Windows, la valeur par défaut est windows-msvc-x64. Pour Linux, la valeur par défaut est linux-gcc-x64. Pour macOS, la valeur par défaut est macos-clang-x64. Les modes IntelliSense qui spécifient uniquement les variantes <compilateur>-<architecture> (par exemple gcc-x64) sont des modes hérités. Ils sont convertis automatiquement en variantes <plateforme>-<compilateur>-<architecture> en fonction de la plateforme hôte.",
  18: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.forcedInclude": "Liste des fichiers qui doivent être inclus avant tout fichier d'inclusion dans une unité de traduction.",
  19: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.configurationProvider": "ID d'une extension VS Code pouvant fournir des informations de configuration IntelliSense pour les fichiers sources.",
  20: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.limitSymbolsToIncludedHeaders": "true pour traiter uniquement les fichiers inclus directement ou indirectement comme des en-têtes, false pour traiter tous les fichiers sous les chemins d'inclusion spécifiés.",
  21: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.databaseFilename": "Chemin de la base de données de symboles générée. Si un chemin relatif est spécifié, il est relatif à l'emplacement de stockage par défaut de l'espace de travail.",
  22: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.path": "Liste de chemins à utiliser pour l'indexation et l'analyse des symboles d'espace de travail (à utiliser par Atteindre la définition, Rechercher toutes les références, etc.). La recherche sur ces chemins est récursive par défaut. Spécifiez '*' pour indiquer une recherche non récursive. Par exemple, '${workspaceFolder}' permet d'effectuer une recherche parmi tous les sous-répertoires, ce qui n'est pas le cas de '${workspaceFolder}/*'.",
  23: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.customConfigurationVariables": "Variables personnalisées qui peuvent être interrogées par le biais de la commande ${cpptools:activeConfigCustomVariable} à utiliser pour les variables d'entrée dans launch.json ou tasks.json.",
  24: 	"c_cpp_properties.schema.json.definitions.env": "Variables personnalisées pouvant être réutilisées partout dans ce fichier à l'aide de la syntaxe ${variable} ou ${env:variable}.",
  25: 	"c_cpp_properties.schema.json.definitions.version": "Version du fichier de configuration. Cette propriété est gérée par l'extension. Ne la changez pas.",
  26: 	"c_cpp_properties.schema.json.definitions.enableConfigurationSquiggles": "Contrôle si l'extension signale les erreurs détectées dans c_cpp_properties.json."
  27  }

Extension\i18n\fra\package.i18n.json:
    6  {
    7: 	"c_cpp.capabilities.untrustedWorkspaces.description": "Plusieurs paramètres peuvent entraîner l’exécution de processus locaux dans l’espace de travail, par exemple C_Cpp.clang_format_path, C_Cpp.addNodeAddonIncludePaths, C_Cpp.default.compilerPath, C_Cpp.default.configurationProvider et C_Cpp.default.compileCommands, ainsi que les propriétés équivalentes dans c_cpp_properties.json.",
    8  	"c_cpp.command.configurationSelect.title": "Sélectionner une configuration...",
    9  	"c_cpp.command.configurationProviderSelect.title": "Changer le fournisseur de configuration...",
   10: 	"c_cpp.command.configurationEditJSON.title": "Modifier les configurations (JSON)",
   11  	"c_cpp.command.configurationEditUI.title": "Modifier les configurations (IU)",

  146  	"c_cpp.configuration.intelliSenseUpdateDelay.description": "Contrôle le délai en millisecondes avant que la mise à jour d'IntelliSense ne commence après une modification.",
  147: 	"c_cpp.configuration.default.includePath.description": "Valeur à utiliser dans une configuration si \"includePath\" n'est pas spécifié dans c_cpp_properties.json. Si \"includePath\" est spécifié, ajoutez \"${default}\" au tableau pour insérer les valeurs de ce paramètre.",
  148  	"c_cpp.configuration.default.defines.description": "Valeur à utiliser dans une configuration si \"defines\" n'est pas spécifié ou valeurs à insérer si \"${default}\" est présent dans \"defines\".",

  162  	"c_cpp.configuration.default.systemIncludePath.description": "Valeur à utiliser pour le chemin d'inclusion système. Si cette option est définie, elle remplace le chemin d'inclusion système obtenu via les paramètres \"compilerPath\" et \"compileCommands\".",
  163: 	"c_cpp.configuration.default.enableConfigurationSquiggles.description": "Contrôle si l'extension signale les erreurs détectées dans c_cpp_properties.json.",
  164  	"c_cpp.configuration.default.customConfigurationVariables.description": "Valeur à utiliser dans une configuration si \"customConfigurationVariables\" n'est pas défini, ou valeurs à insérer si \"${default}\" est présent dans \"customConfigurationVariables\".",

  178  	"c_cpp.contributes.views.cppReferencesView.title": "C/C++ : Autres résultats des références",
  179: 	"c_cpp.contributes.viewsWelcome.contents": "Pour en savoir plus sur launch.json, consultez [Configuration du C++ débogage C/](https://code.visualstudio.com/docs/cpp/launch-json-reference).",
  180  	"c_cpp.debuggers.pipeTransport.description": "Quand ce paramètre est présent, indique au débogueur de se connecter à un ordinateur distant en se servant d'un autre exécutable comme canal de relais d'entrée/de sortie standard entre VS Code et l'exécutable du back-end du débogueur MI (par exemple, gdb).",

Extension\i18n\fra\src\common.i18n.json:
  6  {
  7: 	"failed.to.parse.json": "Échec de l'analyse du fichier json, probablement en raison de commentaires ou de virgules de fin.",
  8  	"extension.not.ready": "L'extension C/C++ est toujours en cours d'installation. Pour plus d'informations, consultez la fenêtre Sortie.",

Extension\i18n\fra\src\nativeStrings.i18n.json:
   15  	"include_errors_update_include_path_intellisense_disabled": "Erreurs #include détectées. Mettez à jour includePath. Les fonctionnalités IntelliSense de cette unité de traduction ({0}) sont fournies par l'analyseur de balises.",
   16: 	"include_errors_update_compile_commands_or_include_path_intellisense_disabled": "Erreurs #include détectées. Mettez à jour compile_commands.json ou includePath. Les fonctionnalités IntelliSense de cette unité de traduction ({0}) sont fournies par l'analyseur de balises.",
   17: 	"could_not_parse_compile_commands": "Impossible d'analyser \"{0}\". 'includePath' dans c_cpp_properties.json dans le dossier '{1}' sera utilisé à la place.",
   18: 	"could_not_find_compile_commands": "\"{0}\" est introuvable. 'includePath' dans c_cpp_properties.json dans le dossier '{1}' sera utilisé à la place.",
   19: 	"file_not_found_in_path": "\"{0}\" introuvable dans \"{1}\". 'includePath' dans c_cpp_properties.json dans le dossier '{2}' sera utilisé à la place pour ce fichier.",
   20  	"database_reset": "La base de données IntelliSense a été réinitialisée.",

   47  	"failed_to_reset_timestamps_for": "La réinitialisation de l'horodatage a échoué pour {0} : erreur = {1}",
   48: 	"no_suitable_complier": "Aucun compilateur approprié. Définissez \"compilerPath\" dans c_cpp_properties.json.",
   49  	"compiler_include_not_found": "Le chemin d'inclusion du compilateur est introuvable : {0}",

  122  	"error_limit_exceeded": "Limite d'erreurs dépassée, {0} erreur(s) non signalée(s).",
  123: 	"include_errors_update_compile_commands_or_include_path_squiggles_disabled": "Erreurs #include détectées. Mettez à jour compile_commands.json ou includePath. Les tildes sont désactivés pour cette unité de traduction ({0}).",
  124  	"cannot_reset_database": "Impossible de réinitialiser la base de données IntelliSense. Pour effectuer une réinitialisation manuelle, fermez toutes les instances de VS Code, puis supprimez ce fichier : {0}",

  179  	"cpp_compiler_from_compiler_path": "Tentative d'obtention des valeurs par défaut du compilateur C++ dans la propriété \"compilerPath\" : '{0}'",
  180: 	"c_compiler_from_compile_commands": "Tentative d'obtention des valeurs par défaut du compilateur C dans le fichier compile_commands.json : '{0}'",
  181: 	"cpp_compiler_from_compile_commands": "Tentative d'obtention des valeurs par défaut du compilateur C++ dans le fichier compile_commands.json : '{0}'",
  182  	"c_intellisense_mode_changed": "Pour les fichiers sources C, IntelliSenseMode est passé de \"{0}\" à \"{1}\".",

Extension\i18n\fra\src\LanguageServer\client.i18n.json:
  24  	"update.intellisense.time": "Durée de mise à jour d'IntelliSense (s) : {0}",
  25: 	"configure.json.button": "Configurer (JSON)",
  26  	"configure.ui.button": "Configurer (IU)",

  29  	"configure.your.intellisense.settings": "Configurez vos paramètres IntelliSense pour vous aider à trouver les en-têtes manquants.",
  30: 	"a.compile.commands.file": "fichier compile_commands.json",
  31  	"auto-configure.intellisense.folder": "Voulez-vous utiliser {0} pour configurer automatiquement IntelliSense pour le dossier '{1}' ?",

Extension\i18n\fra\src\LanguageServer\configurations.i18n.json:
   9  	"invalid.configuration.file": "Fichier de configuration non valide. Au moins une configuration doit être présente dans le tableau.",
  10: 	"unknown.properties.version": "Numéro de version inconnu dans c_cpp_properties.json. Certaines fonctionnalités peuvent ne pas fonctionner comme prévu.",
  11  	"update.properties.failed": "La tentative de mise à jour de \"{0}\" a échoué (avez-vous un accès en écriture ?)",

Extension\i18n\fra\src\LanguageServer\ui.i18n.json:
  12  	"edit.configuration.ui": "Modifier les configurations (IU)",
  13: 	"edit.configuration.json": "Modifier les configurations (JSON)",
  14  	"select.configuration.provider": "Sélectionner un fournisseur de configuration...",

  17  	"disable.configuration.provider": "Désactivez le fournisseur de configuration actif, le cas échéant.",
  18: 	"select.compile.commands": "Sélectionner un fichier compile_commands.json...",
  19  	"select.workspace": "Sélectionner un dossier d'espace de travail...",

Extension\i18n\fra\ui\settings.html.i18n.json:
  10  	"edit.configurations.ui": "C/C++ : Modifier les configurations (IU)",
  11: 	"switch.to.json": "Basculez vers le fichier {0} en cliquant sur le lien du fichier ou en utilisant la commande :",
  12: 	"edit.configurations.in.json": "Modifier les configurations dans le fichier JSON",
  13: 	"edit.configurations.json": "C/C++ : Modifier les configurations (JSON)",
  14  	"check.the.schema": "En savoir plus sur les propriétés C/C++ en accédant à {0}.",

Extension\i18n\ita\c_cpp_properties.schema.json.i18n.json:
   6  {
   7: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.name": "Identificatore di configurazione. Mac, Linux e Win32 sono identificatori speciali delle configurazioni che verranno selezionati automaticamente in queste piattaforme, ma come identificatore è possibile specificarne uno qualsiasi.",
   8: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerPath": "Percorso completo del compilatore usato, ad esempio /usr/bin/gcc, per abilitare una versione più accurata di IntelliSense.",
   9: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerArgs": "Argomenti del compilatore per modificare le direttive include o define usate, ad esempio -nostdinc++, -m32 e così via.",
  10: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cStandard": "Versione dello standard del linguaggio C da usare per IntelliSense. Nota: gli standard GNU vengono usati solo per eseguire query sul compilatore impostato per ottenere le definizioni di GNU. IntelliSense emulerà la versione dello standard di C equivalente.",
  11: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cppStandard": "Versione dello standard del linguaggio C++ da usare per IntelliSense. Nota: gli standard GNU vengono usati solo per eseguire query sul compilatore impostato per ottenere le definizioni di GNU. IntelliSense emulerà la versione dello standard di C++ equivalente.",
  12: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compileCommands": "Percorso completo del file compile_commands.json per l'area di lavoro.",
  13: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.includePath": "Elenco di percorsi che il motore IntelliSense userà durante la ricerca delle intestazioni incluse. La ricerca in questi percorsi non è ricorsiva. Specificare '**' per indicare la ricerca ricorsiva. Ad esempio: con '${workspaceFolder}/**' la ricerca verrà estesa a tutte le sottodirectory, mentre con '${workspaceFolder}' sarà limitata a quella corrente.",
  14: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.macFrameworkPath": "Elenco di percorsi che il motore IntelliSense userà durante la ricerca delle intestazioni incluse da framework Mac. Supportato solo nella configurazione Mac.",
  15: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.windowsSdkVersion": "Versione del percorso di inclusione di Windows SDK da usare in Windows, ad esempio '10.0.17134.0'.",
  16: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.defines": "Elenco di definizioni del preprocessore che il motore IntelliSense userà durante l'analisi dei file. Facoltativamente, usare = per impostare un valore, ad esempio VERSION=1.",
  17: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.intelliSenseMode": "Modalità IntelliSense da usare per eseguire il mapping a una variante della piattaforma e dell'architettura di MSVC, gcc o Clang. Se non è impostata o se è impostata su ${default}, sarà l'estensione a scegliere il valore predefinito per tale piattaforma. L'impostazione predefinita di Windows è windows-msvc-x64, quella di Linux è linux-gcc-x64 e quella di macOS è macos-clang-x64. Le modalità IntelliSense che specificano solo varianti <compilatore>-<architettura> (ad esempio gcc-x64) sono modalità legacy e vengono convertite automaticamente nelle varianti <piattaforma>-<compilatore>-<architettura> in base alla piattaforma host.",
  18: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.forcedInclude": "Elenco di file che devono essere inclusi prima di qualsiasi file include in un'unità di conversione.",
  19: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.configurationProvider": "ID di un'estensione VS Code che può fornire informazioni di configurazione IntelliSense per i file di origine.",
  20: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.limitSymbolsToIncludedHeaders": "true per elaborare solo i file inclusi direttamente o indirettamente come intestazioni; false per elaborare tutti i file nei percorsi di inclusione specificati.",
  21: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.databaseFilename": "Percorso del database dei simboli generato. Se viene specificato un percorso relativo, sarà relativo al percorso di archiviazione predefinito dell'area di lavoro.",
  22: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.path": "Elenco di percorsi da usare per l'indicizzazione e l'analisi dei simboli dell'area di lavoro (usati da Vai alla definizione, Trova tutti i riferimenti e così via). Per impostazione predefinita, la ricerca in questi percorsi è ricorsiva. Specificare '**' per indicare la ricerca non ricorsiva. Ad esempio, con '${workspaceFolder}' la ricerca verrà estesa a tutte le sottodirectory, mentre con '${workspaceFolder}/*' sarà limitata a quella corrente.",
  23: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.customConfigurationVariables": "Variabili personalizzate su cui è possibile eseguire query tramite il comando ${cpptools:activeConfigCustomVariable} da usare per le variabili di input in launch.jso o tasks.js.",
  24: 	"c_cpp_properties.schema.json.definitions.env": "Variabili personalizzate che è possibile riutilizzare in qualsiasi punto del file usando la sintassi ${variabile} o ${env:variabile}.",
  25: 	"c_cpp_properties.schema.json.definitions.version": "Versione del file di configurazione. Questa proprietà è gestita dall'estensione. Non modificarla.",
  26: 	"c_cpp_properties.schema.json.definitions.enableConfigurationSquiggles": "Controlla se l'estensione segnalerà errori rilevati in c_cpp_properties.json."
  27  }

Extension\i18n\ita\package.i18n.json:
    6  {
    7: 	"c_cpp.capabilities.untrustedWorkspaces.description": "Le impostazioni multiple possono comportare l'esecuzione dei processi locali nell'area di lavoro, quali C_Cpp.clang_format_path, C_Cpp.addNodeAddonIncludePaths, C_Cpp.default.compilerPath, C_Cpp.default.configurationProvider, C_Cpp.default.compileCommands e le proprietà equivalenti in c_cpp_properties.json.",
    8  	"c_cpp.command.configurationSelect.title": "Seleziona una configurazione...",
    9  	"c_cpp.command.configurationProviderSelect.title": "Cambia provider di configurazione...",
   10: 	"c_cpp.command.configurationEditJSON.title": "Modifica configurazioni (JSON)",
   11  	"c_cpp.command.configurationEditUI.title": "Modifica configurazioni (interfaccia utente)",

  146  	"c_cpp.configuration.intelliSenseUpdateDelay.description": "Controlla il ritardo in millisecondi prima che IntelliSense avvii l'aggiornamento dopo una modifica.",
  147: 	"c_cpp.configuration.default.includePath.description": "Valore da usare in una configurazione se \"includePath\" non è specificato in c_cpp_properties.json. Se \"includePath\" è specificato, aggiungere \"${default}\" alla matrice per inserire i valori da questa impostazione.",
  148  	"c_cpp.configuration.default.defines.description": "Valore da usare in una configurazione se \"defines\" non è specificato oppure valori da inserire se \"${default}\" è presente in \"defines\".",

  162  	"c_cpp.configuration.default.systemIncludePath.description": "Valore da usare per il percorso di inclusione di sistema. Se è impostato, esegue l'override del percorso di inclusione di sistema acquisito con le impostazioni \"compilerPath\" e \"compileCommands\".",
  163: 	"c_cpp.configuration.default.enableConfigurationSquiggles.description": "Controlla se l'estensione segnalerà errori rilevati in c_cpp_properties.json.",
  164  	"c_cpp.configuration.default.customConfigurationVariables.description": "Valore da usare in una configurazione se \"customConfigurationVariables\" non è impostato oppure valori da inserire se \"${default}\" è presente come chiave in \"customConfigurationVariables\".",

  178  	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: Risultati altri riferimenti",
  179: 	"c_cpp.contributes.viewsWelcome.contents": "Per altre informazioni su launch.json, vedere [Configurazione del debug C/C++](https://code.visualstudio.com/docs/cpp/launch-json-reference).",
  180  	"c_cpp.debuggers.pipeTransport.description": "Se presente, indica al debugger di connettersi a un computer remoto usando come pipe un altro eseguibile che inoltra l'input/output standard tra VS Code e l'eseguibile back-end del debugger abilitato per MI, ad esempio gdb.",

Extension\i18n\ita\src\common.i18n.json:
  6  {
  7: 	"failed.to.parse.json": "Non è stato possibile analizzare il file JSON probabilmente a causa di commenti o virgole finali.",
  8  	"extension.not.ready": "L'estensione C/C++ è ancora in fase di installazione. Per altre informazioni, vedere la finestra di output.",

Extension\i18n\ita\src\nativeStrings.i18n.json:
   15  	"include_errors_update_include_path_intellisense_disabled": "Sono stati rilevati errori #include. Aggiornare includePath. Le funzionalità IntelliSense per questa unità di conversione ({0}) verranno fornite dal parser di tag.",
   16: 	"include_errors_update_compile_commands_or_include_path_intellisense_disabled": "Sono stati rilevati errori #include. Provare ad aggiornare il file compile_commands.json o includePath. Le funzionalità IntelliSense per questa unità di conversione ({0}) verranno fornite dal parser di tag.",
   17: 	"could_not_parse_compile_commands": "Non è stato possibile analizzare \"{0}\". In alternativa, verrà usato 'includePath' del file c_cpp_properties.json nella cartella '{1}'.",
   18: 	"could_not_find_compile_commands": "Non è stato possibile trovare \"{0}\". In alternativa, verrà usato 'includePath' del file c_cpp_properties.json nella cartella '{1}'.",
   19: 	"file_not_found_in_path": "\"{0}\" non è stato trovato in \"{1}\". In alternativa per questo file verrà usato 'includePath' del file c_cpp_properties.json nella cartella '{2}'.",
   20  	"database_reset": "Il database IntelliSense è stato reimpostato.",

   47  	"failed_to_reset_timestamps_for": "Non è stato possibile reimpostare il timestamp per {0}. Errore = {1}",
   48: 	"no_suitable_complier": "Non sono stati trovati compilatore appropriati. Impostare \"compilerPath\" in c_cpp_properties.json.",
   49  	"compiler_include_not_found": "Il percorso di inclusione del compilatore non è stato trovato: {0}",

  122  	"error_limit_exceeded": "È stato superato il limite di errori. {0} errore/i non sono stati segnalati.",
  123: 	"include_errors_update_compile_commands_or_include_path_squiggles_disabled": "Sono stati rilevati errori #include. Provare ad aggiornare il file compile_commands.json o includePath. I segni di revisione sono disabilitati per questa unità di conversione ({0}).",
  124  	"cannot_reset_database": "Non è stato possibile reimpostare il database IntelliSense. Per reimpostare manualmente, chiudere tutte le istanze di VS Code, quindi eliminare questo file: {0}",

  179  	"cpp_compiler_from_compiler_path": "Tentativo di recuperare le impostazioni predefinite dal compilatore C++ nella proprietà \"compilerPath\": '{0}'",
  180: 	"c_compiler_from_compile_commands": "Tentativo di recuperare le impostazioni predefinite dal compilatore C nel file compile_commands.json: '{0}'",
  181: 	"cpp_compiler_from_compile_commands": "Tentativo di recuperare le impostazioni predefinite dal compilatore C++ nel file compile_commands.json: '{0}'",
  182  	"c_intellisense_mode_changed": "Per i file di origine C, il valore di IntelliSenseMode è stato modificato da \"{0}\" a \"{1}\".",

Extension\i18n\ita\src\LanguageServer\client.i18n.json:
  24  	"update.intellisense.time": "Aggiorna ora di IntelliSense (sec): {0}",
  25: 	"configure.json.button": "Configura (JSON)",
  26  	"configure.ui.button": "Configura (interfaccia utente)",

  29  	"configure.your.intellisense.settings": "Configurare le impostazioni di IntelliSense per facilitare la ricerca delle intestazioni mancanti.",
  30: 	"a.compile.commands.file": "un file compile_commands.json",
  31  	"auto-configure.intellisense.folder": "Usare {0} per configurare automaticamente IntelliSense per la cartella '{1}'?",

Extension\i18n\ita\src\LanguageServer\configurations.i18n.json:
   9  	"invalid.configuration.file": "File di configurazione non valido. Nella matrice deve essere presente almeno una configurazione.",
  10: 	"unknown.properties.version": "È stato trovato un numero di versione sconosciuto in c_cpp_properties.json. Alcune funzionalità potrebbero non funzionare come previsto.",
  11  	"update.properties.failed": "Il tentativo di aggiornamento di \"{0}\" non è riuscito. L'accesso in scrittura è disponibile?",

Extension\i18n\ita\src\LanguageServer\ui.i18n.json:
  12  	"edit.configuration.ui": "Modifica configurazioni (interfaccia utente)",
  13: 	"edit.configuration.json": "Modifica configurazioni (JSON)",
  14  	"select.configuration.provider": "Seleziona un provider di configurazione...",

  17  	"disable.configuration.provider": "Disabilita il provider di configurazione attivo, se applicabile.",
  18: 	"select.compile.commands": "Seleziona un file compile_commands.json...",
  19  	"select.workspace": "Seleziona una cartella dell'area di lavoro...",

Extension\i18n\ita\ui\settings.html.i18n.json:
  10  	"edit.configurations.ui": "C/C++: Modifica configurazioni (interfaccia utente)",
  11: 	"switch.to.json": "Passare al file {0} facendo clic sul collegamento del file o usando il comando:",
  12: 	"edit.configurations.in.json": "Modifica le configurazioni nel file JSON",
  13: 	"edit.configurations.json": "C/C++: Modifica configurazioni (JSON)",
  14  	"check.the.schema": "Per altre informazioni sulle proprietà di C/C++, vedere {0}.",

Extension\i18n\jpn\c_cpp_properties.schema.json.i18n.json:
   6  {
   7: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.name": "構成識別子です。Mac、Linux、Win32 は、それらのプラットフォームで自動選択される構成の特別な識別子ですが、どの識別子でも使用できます。",
   8: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerPath": "より正確な IntelliSense を有効にするために使用されているコンパイラの完全なパスです (例: /usr/bin/gcc)。",
   9: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerArgs": "たとえば -nostdinc++、-m32 など、使用されているインクルードや定義を変更するコンパイラ引数です。",
  10: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cStandard": "IntelliSense に使用する C 言語標準のバージョンです。注意: GNU 標準は、set コンパイラをクエリして GNU 定義を取得するためにのみ使用されるため、IntelliSense は同等の C 標準バージョンをエミュレートします。",
  11: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cppStandard": "IntelliSense に使用する C++ 言語標準のバージョンです。注意: GNU 標準は、set コンパイラをクエリして GNU 定義を取得するためにのみ使用されるため、IntelliSense は同等の C++ 標準バージョンをエミュレートします。",
  12: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compileCommands": "ワークスペースの compile_commands.json ファイルへの完全なパスです。",
  13: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.includePath": "インクルードされたヘッダーを検索する際に IntelliSense エンジンによって使用されるパスの一覧です。これらのパスでの検索は再帰的ではありません。再帰的な検索を示すには、'**' を指定します。たとえば、'${workspaceFolder}/**' を指定するとすべてのサブディレクトリが検索されますが、'${workspaceFolder}' はそうではありません。",
  14: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.macFrameworkPath": "Mac フレームワークからインクルードされたヘッダーを検索する際に Intellisense エンジンが使用するパスの一覧です。Mac 構成でのみサポートされます。",
  15: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.windowsSdkVersion": "Windows で使用する Windows SDK インクルード パスのバージョン (例: '10.0.17134.0')。",
  16: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.defines": "ファイルを解析する際に IntelliSense エンジンが使用するプリプロセッサ定義の一覧です。必要に応じて、= を使用して値を設定します (例: VERSION=1)。",
  17: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.intelliSenseMode": "プラットフォームおよびアーキテクチャのバリアント (MSVC、gcc、Clang) へのマップに使用する IntelliSense モードです。値が設定されていない、または ${default} に設定されている場合、拡張機能ではそのプラットフォームの既定値が選択されます。Windows の既定値は windows-msvc-x64、Linux の既定値は linux-gcc-x64、macOS の既定値は macos-clang-x64 です。<compiler>-<architecture> バリエント (例: gcc-x64) のみを指定する IntelliSense モードはレガシ モードであり、ホスト プラットフォームに基づいて <platform>-<compiler>-<architecture> に自動的に変換されます。",
  18: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.forcedInclude": "翻訳単位のインクルード ファイルの前に含める必要があるファイルの一覧。",
  19: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.configurationProvider": "ソース ファイルの IntelliSense 構成情報を提供できる VS Code 拡張機能の ID です。",
  20: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.limitSymbolsToIncludedHeaders": "ヘッダーとして直接的または間接的にインクルードされたファイルのみを処理する場合は true、指定したインクルード パスにあるすべてのファイルを処理する場合は false です。",
  21: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.databaseFilename": "生成されるシンボル データベースへのパスです。相対パスを指定した場合、ワークスペースの既定のストレージの場所に対する相対パスになります。",
  22: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.path": "ワークスペース シンボルのインデックス作成と解析に使用するパスの一覧です ([定義へ移動]、[すべての参照を検索] などに使用する)。既定では、これらのパスでの検索は再帰的です。非再帰的な検索を示すには '*' を指定します。たとえば、'${workspaceFolder}' を指定するとすべてのサブディレクトリが検索されますが、'${workspaceFolder}/*' を指定すると検索されません。",
  23: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.customConfigurationVariables": "launch.json または tasks.json で入力変数として使用するためにコマンド ${cpptools:activeConfigCustomVariable} を使用して照会できるカスタム変数。",
  24: 	"c_cpp_properties.schema.json.definitions.env": "${変数} 構文または ${env:変数} 構文を使用して、このファイルのどこからでも再利用できるカスタム変数です。",
  25: 	"c_cpp_properties.schema.json.definitions.version": "構成ファイルのバージョンです。このプロパティは、拡張機能によって管理されています。変更しないでください。",
  26: 	"c_cpp_properties.schema.json.definitions.enableConfigurationSquiggles": "拡張機能が、c_cpp_properties.json で検出されたエラーを報告するかどうかを制御します。"
  27  }

Extension\i18n\jpn\package.i18n.json:
    6  {
    7: 	"c_cpp.capabilities.untrustedWorkspaces.description": "複数の設定によって、ワークスペースにローカルなプロセスが実行される場合があります (例: C_Cpp.clang_format_path、C_Cpp.addNodeAddonIncludePaths、C_Cpp.default.compilerPath、C_Cpp.default.configurationProvider、C_Cpp.default.compileCommands、および c_cpp_properties.json で不連続なプロパティ)。",
    8  	"c_cpp.command.configurationSelect.title": "構成を選択する...",
    9  	"c_cpp.command.configurationProviderSelect.title": "構成プロバイダーを変更する...",
   10: 	"c_cpp.command.configurationEditJSON.title": "構成の編集 (JSON)",
   11  	"c_cpp.command.configurationEditUI.title": "構成の編集 (UI)",

  146  	"c_cpp.configuration.intelliSenseUpdateDelay.description": "修正後に IntelliSense によって更新が開始されるまでの遅延時間をミリ秒単位で制御します。",
  147: 	"c_cpp.configuration.default.includePath.description": "c_cpp_properties.json で \"includePath\" が指定されていない場合に構成で使用する値です。\"includePath\" が指定されている場合に、この設定から値を挿入するには、配列に \"${default}\" を追加します。",
  148  	"c_cpp.configuration.default.defines.description": "\"defines\" が指定されていない場合に構成で使用される値、または \"defines\" 内に \"${default}\" が存在する場合に挿入される値です。",

  162  	"c_cpp.configuration.default.systemIncludePath.description": "システム インクルード パスに使用する値です。これを設定した場合、\"compilerPath\" および \"compileCommands\" の設定によって取得されるシステム インクルード パスが上書きされます。",
  163: 	"c_cpp.configuration.default.enableConfigurationSquiggles.description": "拡張機能が、c_cpp_properties.json で検出されたエラーを報告するかどうかを制御します。",
  164  	"c_cpp.configuration.default.customConfigurationVariables.description": "\"customConfigurationVariables\" が設定されていない場合に構成で使用される値、または \"customConfigurationVariables\" 内に \"${default}\" がキーとして存在する場合に挿入される値です。",

  178  	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: その他の参照結果",
  179: 	"c_cpp.contributes.viewsWelcome.contents": "launch.json に関する詳細については、[C/C++ デバッグを構成する](https://code.visualstudio.com/docs/cpp/launch-json-reference) を参照してください。",
  180  	"c_cpp.debuggers.pipeTransport.description": "これを指定すると、デバッガーにより、別の実行可能ファイルをパイプとして使用してリモート コンピューターに接続され、VS Code と MI 対応のデバッガー バックエンド実行可能ファイル (gdb など) との間で標準入出力が中継されます。",

Extension\i18n\jpn\src\common.i18n.json:
  6  {
  7: 	"failed.to.parse.json": "json ファイルを解析できませんでした。コメントまたは末尾のコンマが原因の可能性があります。",
  8  	"extension.not.ready": "C/C++ の拡張機能はまだインストール中です。詳細については、出力ウィンドウをご覧ください。",

Extension\i18n\jpn\src\nativeStrings.i18n.json:
   15  	"include_errors_update_include_path_intellisense_disabled": "#include エラーが検出されました。includePath を更新してください。この翻訳単位 ({0}) の IntelliSense 機能は、タグ パーサーによって提供されます。",
   16: 	"include_errors_update_compile_commands_or_include_path_intellisense_disabled": "#include エラーが検出されました。compile_commands.json または includePath を更新してみてください。この翻訳単位 ({0}) の IntelliSense 機能は、タグ パーサーによって提供されます。",
   17: 	"could_not_parse_compile_commands": "\"{0}\" を解析できませんでした。フォルダー '{1}' にある c_cpp_properties.json からの 'includePath' が代わりに使用されます。",
   18: 	"could_not_find_compile_commands": "\"{0}\" が見つかりませんでした。フォルダー '{1}' にある c_cpp_properties.json からの 'includePath' が代わりに使用されます。",
   19: 	"file_not_found_in_path": "\"{1}\" に \"{0}\" が見つかりませんでした。フォルダー '{2}' にある c_cpp_properties.json からの 'includePath' が、このファイルで代わりに使用されます。",
   20  	"database_reset": "IntelliSense データベースが正常にリセットされました。",

   47  	"failed_to_reset_timestamps_for": "{0} のタイムスタンプをリセットできませんでした: エラー = {1}",
   48: 	"no_suitable_complier": "適切なコンパイラが見つかりませんでした。c_cpp_properties.json の \"compilerPath\" を設定してください。",
   49  	"compiler_include_not_found": "コンパイラのインクルード パスが見つかりませんでした: {0}",

  122  	"error_limit_exceeded": "エラーの制限を超過しました。{0} 件のエラーが報告されません。",
  123: 	"include_errors_update_compile_commands_or_include_path_squiggles_disabled": "#include エラーが検出されました。compile_commands.json または includePath を更新してみてください。この翻訳単位 ({0}) では、波線が無効になっています。",
  124  	"cannot_reset_database": "IntelliSense データベースをリセットできませんでした。手動でリセットするには、VS Code のインスタンスをすべて閉じてから、このファイルを削除してください: {0}",

  179  	"cpp_compiler_from_compiler_path": "\"compilerPath\" プロパティの C++ コンパイラから既定値を取得しようとしています: '{0}'",
  180: 	"c_compiler_from_compile_commands": "compile_commands.json ファイルの C コンパイラから既定値を取得しようとしています: '{0}'",
  181: 	"cpp_compiler_from_compile_commands": "compile_commands.json ファイルの C++ コンパイラから既定値を取得しようとしています: '{0}'",
  182  	"c_intellisense_mode_changed": "C ソース ファイルで、IntelliSenseMode が \"{0}\" から \"{1}\" に変更されました。",

Extension\i18n\jpn\src\LanguageServer\client.i18n.json:
  24  	"update.intellisense.time": "IntelliSense 時間 (秒) の更新: {0}",
  25: 	"configure.json.button": "構成 (JSON)",
  26  	"configure.ui.button": "構成 (UI)",

  29  	"configure.your.intellisense.settings": "IntelliSense の設定を構成して、不足しているヘッダーを見つけられるようにします。",
  30: 	"a.compile.commands.file": "compile_commands.json ファイル",
  31  	"auto-configure.intellisense.folder": "{0} を使用して '{1}' フォルダーの IntelliSense を自動構成しますか?",

Extension\i18n\jpn\src\LanguageServer\configurations.i18n.json:
   9  	"invalid.configuration.file": "構成ファイルが無効です。配列には少なくとも 1 つの構成が必要です。",
  10: 	"unknown.properties.version": "c_cpp_properties.json に不明なバージョン番号が見つかりました。一部の機能が予期したとおりに動作しない可能性があります。",
  11  	"update.properties.failed": "\"{0}\" を更新しようとして失敗しました (書き込みアクセス権限があるか確認してください)",

Extension\i18n\jpn\src\LanguageServer\ui.i18n.json:
  12  	"edit.configuration.ui": "構成の編集 (UI)",
  13: 	"edit.configuration.json": "構成の編集 (JSON)",
  14  	"select.configuration.provider": "構成プロバイダーを選択してください...",

  17  	"disable.configuration.provider": "該当する場合は、アクティブな構成プロバイダーを無効にします。",
  18: 	"select.compile.commands": "compile_commands.json を選択してください...",
  19  	"select.workspace": "ワークスペース フォルダーを選択します...",

Extension\i18n\jpn\ui\settings.html.i18n.json:
  10  	"edit.configurations.ui": "C/C++: 構成の編集 (UI)",
  11: 	"switch.to.json": "ファイルのリンクをクリックするか、次のコマンドを使用して、{0} ファイルに切り替えてください:",
  12: 	"edit.configurations.in.json": "JSON ファイル内の構成の編集",
  13: 	"edit.configurations.json": "C/C++: 構成の編集 (JSON)",
  14  	"check.the.schema": "C/C++ プロパティの詳細については、{0} に移動してください。",

Extension\i18n\kor\c_cpp_properties.schema.json.i18n.json:
   6  {
   7: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.name": "구성 식별자입니다. Mac, Linux 및 Win32는 해당 플랫폼에서 자동으로 선택되는 구성의 특수 식별자이지만, 식별자는 무엇이든 될 수 있습니다.",
   8: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerPath": "더 정확한 IntelliSense를 사용하도록 설정하는 데 사용되는 컴파일러의 전체 경로입니다(예: /usr/bin/gcc).",
   9: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerArgs": "사용되는 포함 또는 정의를 수정하기 위한 컴파일러 인수입니다(예: -nostdinc++, -m32 등).",
  10: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cStandard": "IntelliSense에 사용할 C 언어 표준의 버전입니다. 참고: GNU 표준은 GNU 정의를 가져오기 위해 설정된 컴파일러를 쿼리하는 데만 사용되며, IntelliSense는 해당 C 표준 버전을 에뮬레이트합니다.",
  11: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cppStandard": "IntelliSense에 사용할 C++ 언어 표준의 버전입니다. 참고: GNU 표준은 GNU 정의를 가져오기 위해 설정된 컴파일러를 쿼리하는 데만 사용되며, IntelliSense는 해당 C++ 표준 버전을 에뮬레이트합니다.",
  12: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compileCommands": "작업 영역의 compile_commands.json 파일 전체 경로입니다.",
  13: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.includePath": "포함된 헤더를 검색하는 동안 사용할 IntelliSense 엔진의 경로 목록입니다. 이러한 경로 검색은 비재귀적입니다. 재귀적 검색을 나타내려면 '**'를 지정합니다. 예를 들어 '${workspaceFolder}/**'는 모든 하위 디렉터리를 검색하지만 '${workspaceFolder}'은(는) 하위 디렉터리를 검색하지 않습니다.",
  14: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.macFrameworkPath": "Mac 프레임워크에서 포함된 헤더를 검색하는 동안 사용할 IntelliSense 엔진의 경로 목록입니다. Mac 구성에서만 지원됩니다.",
  15: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.windowsSdkVersion": "Windows에서 사용할 Windows SDK 포함 경로의 버전입니다(예: '10.0.17134.0').",
  16: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.defines": "파일을 구문 분석하는 동안 사용할 IntelliSense 엔진의 전처리기 정의 목록입니다. 선택적으로 =을 사용하여 값을 설정합니다(예: VERSION= 1).",
  17: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.intelliSenseMode": "MSVC, gcc 또는 Clang의 플랫폼 및 아키텍처 변형에 매핑되는 사용할 IntelliSense 모드입니다. 설정되지 않거나 ${default}로 설정된 경우 확장에서 해당 플랫폼의 기본값을 선택합니다. Windows의 경우 기본값인 windows-msvc-x64로 설정되고, Linux의 경우 기본값인 linux-gcc-x64로 설정되며, macOS의 경우 기본값인 macos-clang-x64로 설정됩니다. <compiler>-<architecture> 변형(예: gcc-x64)만 지정하는 IntelliSense 모드는 레거시 모드이며 호스트 플랫폼에 따라 <platform>-<compiler>-<architecture> 변형으로 자동으로 변환됩니다.",
  18: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.forcedInclude": "변환 단위에서 포함 파일 앞에 포함해야 하는 파일의 목록입니다.",
  19: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.configurationProvider": "소스 파일에 IntelliSense 구성 정보를 제공할 수 있는 VS Code 확장의 ID입니다.",
  20: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.limitSymbolsToIncludedHeaders": "true인 경우 직접적으로 또는 간접적으로 헤더로 포함된 파일만 처리되고, false인 경우 지정된 포함 경로 아래의 모든 파일이 처리됩니다.",
  21: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.databaseFilename": "생성된 기호 데이터베이스의 경로입니다. 상대 경로가 지정된 경우 작업 영역의 기본 스토리지 위치에 대해 상대적으로 만들어집니다.",
  22: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.path": "작업 영역 기호의 인덱싱 및 구문 분석에 사용할 경로의 목록입니다(정의로 이동, 모든 참조 찾기 등에서 사용). 이 경로에서 검색하는 작업은 기본적으로 재귀 작업입니다. 비재귀 검색을 나타내려면 '*'를 지정하세요. 예를 들어 '${workspaceFolder}'은(는) 모든 하위 디렉터리를 검색하지만 '${workspaceFolder}/*'는 그러지 않습니다.",
  23: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.customConfigurationVariables": "launch.json 또는 tasks.json의 입력 변수에 사용하기 위해 ${cpptools:activeConfigCustomVariable} 명령을 통해 쿼리할 수 있는 사용자 지정 변수입니다.",
  24: 	"c_cpp_properties.schema.json.definitions.env": "${변수} 또는 ${환경 변수} 구문을 사용하여 이 파일 내 어디서나 재사용할 수 있는 사용자 지정 변수입니다.",
  25: 	"c_cpp_properties.schema.json.definitions.version": "구성 파일의 버전입니다. 이 속성은 확장에서 관리합니다. 변경하지 마세요.",
  26: 	"c_cpp_properties.schema.json.definitions.enableConfigurationSquiggles": "확장이 c_cpp_properties.json에서 탐지된 오류를 보고하도록 할지를 제어합니다."
  27  }

Extension\i18n\kor\package.i18n.json:
    6  {
    7: 	"c_cpp.capabilities.untrustedWorkspaces.description": "여러 설정으로 인해 작업 공간에 로컬인 프로세스가 실행될 수 있습니다(예: C_Cpp.clang_format_path, C_Cpp.addNodeAddonIncludePaths, C_Cpp.default.compilerPath, C_Cpp.default.configurationProvider 및 C_Cpp.default.compileCommands 및 그와 동등한 c_cpp_properties.json의 속성).",
    8  	"c_cpp.command.configurationSelect.title": "구성 선택...",
    9  	"c_cpp.command.configurationProviderSelect.title": "구성 공급자 변경...",
   10: 	"c_cpp.command.configurationEditJSON.title": "구성 편집(JSON)",
   11  	"c_cpp.command.configurationEditUI.title": "구성 편집(UI)",

  146  	"c_cpp.configuration.intelliSenseUpdateDelay.description": "수정 후에 IntelliSense에서 업데이트를 시작하기 전까지의 지연 시간(밀리초)을 제어합니다.",
  147: 	"c_cpp.configuration.default.includePath.description": "c_cpp_properties.json에 \"includePath\"가 지정되지 않은 경우 구성에 사용할 값입니다. \"includePath\"가 지정된 경우 배열에 \"${default}\"를 추가하여 이 설정의 값을 삽입합니다.",
  148  	"c_cpp.configuration.default.defines.description": "\"defines\"가 지정되지 않은 경우 구성에서 사용할 값 또는 \"${default}\"가 \"defines\"에 있는 경우 삽입할 값입니다.",

  162  	"c_cpp.configuration.default.systemIncludePath.description": "시스템 포함 경로에 사용할 값입니다. 설정하는 경우 \"compilerPath\" 및 \"compileCommands\" 설정을 통해 얻은 시스템 포함 경로를 재정의합니다.",
  163: 	"c_cpp.configuration.default.enableConfigurationSquiggles.description": "확장이 c_cpp_properties.json에서 검색된 오류를 보고할지 여부를 제어합니다.",
  164  	"c_cpp.configuration.default.customConfigurationVariables.description": "\"customConfigurationVariables\"가 설정되지 않은 경우 구성에서 사용할 값 또는 \"${default}\"가 \"customConfigurationVariables\"에 키로 존재하는 경우 삽입할 값입니다.",

  178  	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: 기타 참조 결과",
  179: 	"c_cpp.contributes.viewsWelcome.contents": "launch.json에 대한 자세한 내용은 [C/C++ 디버깅 구성](https://code.visualstudio.com/docs/cpp/launch-json-reference)을 참조하세요.",
  180  	"c_cpp.debuggers.pipeTransport.description": "있을 경우 VS Code와 MI 지원 디버거 백 엔드 실행 파일(예: gdb) 사이에 표준 입출력을 릴레이하는 파이프로 다른 실행 파일을 사용하여 원격 컴퓨터에 연결되도록 디버거를 지정합니다.",

Extension\i18n\kor\src\common.i18n.json:
  6  {
  7: 	"failed.to.parse.json": "주석 또는 후행 쉼표로 인해 json 파일을 구문 분석하지 못했습니다.",
  8  	"extension.not.ready": "C/C++ 확장을 아직 설치하고 있습니다. 자세한 내용은 출력 창을 참조하세요.",

Extension\i18n\kor\src\nativeStrings.i18n.json:
   15  	"include_errors_update_include_path_intellisense_disabled": "#include 오류가 검색되었습니다. includePath를 업데이트하는 것이 좋습니다. 이 변환 단위({0})에 대한 IntelliSense 기능은 태그 파서에서 제공됩니다.",
   16: 	"include_errors_update_compile_commands_or_include_path_intellisense_disabled": "#include 오류가 검색되었습니다. compile_commands.json 또는 includePath를 업데이트하는 것이 좋습니다. 이 변환 단위({0})에 대한 IntelliSense 기능은 태그 파서에서 제공됩니다.",
   17: 	"could_not_parse_compile_commands": "\"{0}\"을(를) 구문 분석할 수 없습니다. '{1}' 폴더에 있는 c_cpp_properties.json의 'includePath'가 대신 사용됩니다.",
   18: 	"could_not_find_compile_commands": "\"{0}\"을(를) 찾을 수 없습니다. '{1}' 폴더에 있는 c_cpp_properties.json의 'includePath'가 대신 사용됩니다.",
   19: 	"file_not_found_in_path": "\"{1}\"에서 \"{0}\"을(를) 찾을 수 없습니다. '{2}' 폴더에 있는 c_cpp_properties.json의 'includePath'가 이 파일에 대신 사용됩니다.",
   20  	"database_reset": "IntelliSense 데이터베이스를 다시 설정했습니다.",

   47  	"failed_to_reset_timestamps_for": "{0}에 대한 타임스탬프를 다시 설정하지 못했습니다. 오류 = {1}",
   48: 	"no_suitable_complier": "적합한 컴파일러를 찾을 수 없습니다. c_cpp_properties.json에서 \"compilerPath\"를 설정하세요.",
   49  	"compiler_include_not_found": "컴파일러 포함 경로를 찾을 수 없음: {0}",

  122  	"error_limit_exceeded": "오류 제한이 초과되었습니다. {0} 오류가 보고되지 않았습니다.",
  123: 	"include_errors_update_compile_commands_or_include_path_squiggles_disabled": "#include 오류가 검색되었습니다. compile_commands.json 또는 includePath를 업데이트하는 것이 좋습니다. 이 변환 단위({0})에는 물결선을 사용할 수 없습니다.",
  124  	"cannot_reset_database": "IntelliSense 데이터베이스를 다시 설정할 수 없습니다. 수동으로 다시 설정하려면 VS Code 인스턴스를 모두 닫은 후 {0} 파일을 삭제합니다.",

  179  	"cpp_compiler_from_compiler_path": "\"compilerPath\" 속성의 C++ 컴파일러에서 기본값을 가져오려고 합니다. '{0}'",
  180: 	"c_compiler_from_compile_commands": "compile_commands.json 파일의 C 컴파일러에서 기본값을 가져오려고 합니다. '{0}'",
  181: 	"cpp_compiler_from_compile_commands": "compile_commands.json 파일의 C++ 컴파일러에서 기본값을 가져오려고 합니다. '{0}'",
  182  	"c_intellisense_mode_changed": "C 소스 파일에서는 IntelliSenseMode가 \"{0}\"에서 \"{1}\"(으)로 변경되었습니다.",

Extension\i18n\kor\src\LanguageServer\client.i18n.json:
  24  	"update.intellisense.time": "IntelliSense 시간(초) 업데이트: {0}",
  25: 	"configure.json.button": "구성(JSON)",
  26  	"configure.ui.button": "구성(UI)",

  29  	"configure.your.intellisense.settings": "누락된 헤더를 찾을 수 있도록 IntelliSense 설정을 구성합니다.",
  30: 	"a.compile.commands.file": "compile_commands.json 파일",
  31  	"auto-configure.intellisense.folder": "{0}을(를) 사용하여 '{1}' 폴더에 IntelliSense를 자동으로 구성하시겠습니까?",

Extension\i18n\kor\src\LanguageServer\configurations.i18n.json:
   9  	"invalid.configuration.file": "구성 파일이 잘못되었습니다. 배열에 구성이 하나 이상 있어야 합니다.",
  10: 	"unknown.properties.version": "c_cpp_properties.json에 알 수 없는 버전 번호가 있습니다. 일부 기능이 예상대로 작동하지 않을 수 있습니다.",
  11  	"update.properties.failed": "\"{0}\"을(를) 업데이트하지 못했습니다(쓰기 권한이 있어야 함).",

Extension\i18n\kor\src\LanguageServer\ui.i18n.json:
  12  	"edit.configuration.ui": "구성 편집(UI)",
  13: 	"edit.configuration.json": "구성 편집(JSON)",
  14  	"select.configuration.provider": "구성 공급자 선택...",

  17  	"disable.configuration.provider": "해당하는 경우 활성 구성 공급자를 사용하지 않도록 설정합니다.",
  18: 	"select.compile.commands": "compile_commands.json 선택...",
  19  	"select.workspace": "작업 영역 폴더 선택...",

Extension\i18n\kor\ui\settings.html.i18n.json:
  10  	"edit.configurations.ui": "C/C++: 구성 편집(UI)",
  11: 	"switch.to.json": "파일 링크를 클릭하거나 명령을 사용하여 {0} 파일로 전환합니다.",
  12: 	"edit.configurations.in.json": "JSON 파일의 구성 편집",
  13: 	"edit.configurations.json": "C/C++: 구성 편집(JSON)",
  14  	"check.the.schema": "{0}(으)로 이동하여 C/C++ 속성에 대해 자세히 알아보세요.",

Extension\i18n\plk\c_cpp_properties.schema.json.i18n.json:
   6  {
   7: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.name": "Identyfikator konfiguracji. Wartości Mac, Linux i Win32 są specjalnymi identyfikatorami dla konfiguracji, które zostaną wybrane automatycznie na tych platformach, ale ten identyfikator może być dowolny.",
   8: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerPath": "Pełna ścieżka używanego kompilatora, na przykład /usr/bin/gcc. Umożliwia ona zwiększenie dokładności funkcji IntelliSense.",
   9: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerArgs": "Argumenty kompilatora do modyfikacji używanych elementów dołączanych lub definicji, na przykład -nostdinc++, -m32 itp.",
  10: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cStandard": "Wersja standardu języka C, która ma być używana na potrzeby funkcji IntelliSense. Uwaga: standardy GNU są używane tylko do wykonywania zapytań względem kompilatora w celu pobrania dyrektyw define systemu GNU, a funkcja IntelliSense będzie emulować odpowiednią wersję standardu języka C.",
  11: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cppStandard": "Wersja standardu języka C++, która ma być używana na potrzeby funkcji IntelliSense. Uwaga: standardy GNU są używane tylko do wykonywania zapytań względem kompilatora w celu pobrania dyrektyw define systemu GNU, a funkcja IntelliSense będzie emulować odpowiednią wersję standardu języka C++.",
  12: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compileCommands": "Pełna ścieżka do pliku compile_commands.json dla obszaru roboczego.",
  13: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.includePath": "Lista ścieżek, których aparat IntelliSense ma używać podczas wyszukiwania dołączanych nagłówków. Wyszukiwanie w tych ścieżkach nie jest rekurencyjne. Użyj znaku „*”, aby określić wyszukiwanie rekurencyjne. Na przykład wartość „${workspaceFolder}/**” powoduje przeszukiwanie wszystkich podkatalogów, w przeciwieństwie do wartości „${workspaceFolder}”.",
  14: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.macFrameworkPath": "Lista ścieżek, których aparat IntelliSense ma używać podczas wyszukiwania dołączanych nagłówków z platform na komputerach Mac. Obsługiwane tylko w konfiguracji dla komputerów Mac.",
  15: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.windowsSdkVersion": "Wersja ścieżki dołączania zestawu Windows SDK do użycia w systemie Windows, na przykład „10.0.17134.0”.",
  16: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.defines": "Lista definicji preprocesora, które mają być używane przez aparat IntelliSense podczas analizowania plików. Opcjonalnie można użyć operatora =, aby ustawić wartość, na przykład VERSION=1.",
  17: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.intelliSenseMode": "Tryb funkcji IntelliSense do użycia, który jest mapowany na odpowiedni dla platformy i architektury wariant kompilatora MSVC, gcc albo Clang. Jeśli ta wartość nie zostanie ustawiona lub zostanie ustawiona na ${default}, rozszerzenie wybierze ustawienie domyślne dla danej platformy. Dla systemu Windows jest używana wartość domyślna windows-msvc-x64, dla systemu Linux — linux-gcc-x64, a dla systemu macOS — macos-clang-x64. Tryby funkcji IntelliSense, które określają tylko warianty <kompilator>-<architektura> (np. gcc-x64) to starsze tryby i są one automatycznie konwertowane na warianty <platforma>-<kompilator>-<architektura> w oparciu o platformę hosta.",
  18: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.forcedInclude": "Lista plików, które powinny być dołączane przed wszelkimi dołączanymi plikami w jednostce translacji.",
  19: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.configurationProvider": "Identyfikator rozszerzenia programu VS Code, które może udostępnić informacje o konfiguracji funkcji IntelliSense dla plików źródłowych.",
  20: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.limitSymbolsToIncludedHeaders": "Wartość true, aby przetwarzać tylko pliki bezpośrednio lub pośrednio dołączone jako nagłówki. Wartość false, aby przetwarzać wszystkie pliki w określonych ścieżkach dołączania.",
  21: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.databaseFilename": "Ścieżka do generowanej bazy danych symboli. Jeśli zostanie określona ścieżka względna, będzie to ścieżka względem domyślnej lokalizacji magazynowania obszaru roboczego.",
  22: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.path": "Lista ścieżek używanych do indeksowania i analizowania symboli obszaru roboczego (używana m.in. przez funkcje Przejście do definicji, Znajdowanie wszystkich odwołań). Wyszukiwanie na tych ścieżkach jest domyślnie rekursywne. Za pomocą znaku „*” możesz oznaczyć wyszukiwanie jako nierekursywne. Na przykład „${workspaceFolder}” przeszukuje wszystkie podkatalogi, a „${workspaceFolder}/*” już nie.",
  23: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.customConfigurationVariables": "Zmienne niestandardowe, względem których można wykonywać zapytania za pomocą polecenia ${cpptools:activeConfigCustomVariable}, aby użyć ich na potrzeby zmiennych wejściowych w plikach launch.js lub tasks.js.",
  24: 	"c_cpp_properties.schema.json.definitions.env": "Zmienne niestandardowe, których można używać ponownie w dowolnym miejscu tego pliku przy użyciu składni ${zmienna} lub ${env:zmienna}.",
  25: 	"c_cpp_properties.schema.json.definitions.version": "Wersja pliku konfiguracji. Tą właściwością zarządza rozszerzenie. Nie zmieniaj jej.",
  26: 	"c_cpp_properties.schema.json.definitions.enableConfigurationSquiggles": "Określa, czy rozszerzenie będzie raportować błędy wykryte w pliku c_cpp_properties.json."
  27  }

Extension\i18n\plk\package.i18n.json:
    6  {
    7: 	"c_cpp.capabilities.untrustedWorkspaces.description": "Wiele ustawień może spowodować wykonanie procesów lokalnych dla obszaru roboczego, na przykład C_Cpp.clang_format_path, C_Cpp.addNodeAddonIncludePaths, C_Cpp.default.compilerPath, C_Cpp.default.configurationProvider, C_Cpp.default.compileCommands, a także równoważnych właściwości w c_cpp_properties.json.",
    8  	"c_cpp.command.configurationSelect.title": "Wybierz konfigurację...",
    9  	"c_cpp.command.configurationProviderSelect.title": "Zmień dostawcę konfiguracji...",
   10: 	"c_cpp.command.configurationEditJSON.title": "Edytowanie konfiguracji (JSON)",
   11  	"c_cpp.command.configurationEditUI.title": "Edytowanie konfiguracji (interfejs użytkownika)",

  146  	"c_cpp.configuration.intelliSenseUpdateDelay.description": "Steruje opóźnieniem w milisekundach, po którym funkcja IntelliSense rozpocznie aktualizowanie po modyfikacji.",
  147: 	"c_cpp.configuration.default.includePath.description": "Wartość, która ma być używana w konfiguracji, jeśli element „includePath” nie jest określony w pliku c_cpp_properties.json. Jeśli element „includePath” jest określony, dodaj wartość „${default}” do tablicy, aby wstawić wartości z tego ustawienia.",
  148  	"c_cpp.configuration.default.defines.description": "Wartość do użycia w konfiguracji, jeśli element „defines” nie został określony, lub wartości do wstawienia, jeśli element „${default}” istnieje w ramach elementu „defines”.",

  162  	"c_cpp.configuration.default.systemIncludePath.description": "Wartość do użycia na potrzeby ścieżki dołączania systemu. Jeśli jest ustawiona, zastępuje systemową ścieżką dołączania, którą można uzyskać za pomocą ustawień „compilerPath” i „compileCommands”.",
  163: 	"c_cpp.configuration.default.enableConfigurationSquiggles.description": "Określa, czy rozszerzenie będzie raportować błędy wykryte w pliku c_cpp_properties.json.",
  164  	"c_cpp.configuration.default.customConfigurationVariables.description": "Wartość do użycia w konfiguracji, jeśli element „customConfigurationVariables” nie został ustawiony, lub wartości do wstawienia, jeśli element „${default}” istnieje jako klucz w ramach elementu „customConfigurationVariables”.",

  178  	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: inne wyniki odwołań",
  179: 	"c_cpp.contributes.viewsWelcome.contents": "Aby dowiedzieć się więcej na temat pliku launch.json, zobacz [Konfigurowanie debugowania C/C++](https://code.visualstudio.com/docs/cpp/launch-json-reference).",
  180  	"c_cpp.debuggers.pipeTransport.description": "Jeśli jest obecny, zawiera instrukcje dla debugera, aby połączył się z komputerem zdalnym przy użyciu innego pliku wykonywalnego jako potoku, który będzie przekazywał standardowe wejście/wyjście między programem VS Code a plikiem wykonywalnym zaplecza debugera z włączoną obsługą indeksu MI (takim jak gdb).",

Extension\i18n\plk\src\common.i18n.json:
  6  {
  7: 	"failed.to.parse.json": "Nie można przeanalizować pliku json, prawdopodobnie z powodu komentarzy lub końcowych przecinków.",
  8  	"extension.not.ready": "Nadal trwa instalowanie rozszerzenia języka C/C++. Zobacz okno danych wyjściowych, aby uzyskać więcej informacji.",

Extension\i18n\plk\src\nativeStrings.i18n.json:
   15  	"include_errors_update_include_path_intellisense_disabled": "Wykryto błędy elementu #include. Zaktualizuj element includePath. Funkcje IntelliSense dla tej jednostki translacji ({0}) będą udostępniane przez analizator tagów.",
   16: 	"include_errors_update_compile_commands_or_include_path_intellisense_disabled": "Wykryto błędy elementu #include. Rozważ zaktualizowanie pliku compile_commands.json lub elementu includePath. Funkcje IntelliSense dla tej jednostki translacji ({0}) będą udostępniane przez analizator tagów.",
   17: 	"could_not_parse_compile_commands": "Nie można przeanalizować elementu „{0}”. Zamiast tego zostanie użyty element „includePath” z pliku c_cpp_properties.json znajdującego się w folderze „{1}”.",
   18: 	"could_not_find_compile_commands": "Nie można odnaleźć elementu „{0}”. Zamiast tego zostanie użyty element „includePath” z pliku c_cpp_properties.json znajdującego się w folderze „{1}”.",
   19: 	"file_not_found_in_path": "Nie odnaleziono elementu „{0}” w lokalizacji „{1}”. W zamian dla tego pliku zostanie użyty element „includePath” z pliku c_cpp_properties.json znajdującego się w folderze „{2}”.",
   20  	"database_reset": "Pomyślnie zresetowano bazę danych funkcji IntelliSense.",

   47  	"failed_to_reset_timestamps_for": "Nie można zresetować znacznika czasu dla elementu {0}: błąd = {1}",
   48: 	"no_suitable_complier": "Nie znaleziono odpowiedniego kompilatora. Ustaw element „compilerPath” w pliku c_cpp_properties.json.",
   49  	"compiler_include_not_found": "Nie znaleziono ścieżki dołączania kompilatora: {0}",

  122  	"error_limit_exceeded": "Przekroczono limit błędów, niezgłoszone błędy: {0}.",
  123: 	"include_errors_update_compile_commands_or_include_path_squiggles_disabled": "Wykryto błędy elementu #include. Rozważ zaktualizowanie pliku compile_commands.json lub elementu includePath. Dla tej jednostki translacji ({0}) wyłączono zygzaki.",
  124  	"cannot_reset_database": "Nie można zresetować bazy danych funkcji IntelliSense. Aby zresetować ręcznie, zamknij wszystkie wystąpienia programu VS Code, a następnie usuń ten plik: {0}",

  179  	"cpp_compiler_from_compiler_path": "Próba pobrania wartości domyślnych z kompilatora języka C++ we właściwości „compilerPath”: „{0}”",
  180: 	"c_compiler_from_compile_commands": "Próba pobrania wartości domyślnych z kompilatora języka C w pliku compile_commands.json: „{0}”",
  181: 	"cpp_compiler_from_compile_commands": "Próba pobrania wartości domyślnych z kompilatora języka C++ w pliku compile_commands.json: „{0}”",
  182  	"c_intellisense_mode_changed": "W przypadku plików źródłowych w języku C wartość właściwości IntelliSenseMode została zmieniona z „{0}” na „{1}”.",

Extension\i18n\plk\src\LanguageServer\client.i18n.json:
  24  	"update.intellisense.time": "Aktualizuj czas funkcji IntelliSense (s): {0}",
  25: 	"configure.json.button": "Konfiguruj (JSON)",
  26  	"configure.ui.button": "Konfiguruj (interfejs użytkownika)",

  29  	"configure.your.intellisense.settings": "Skonfiguruj ustawienia funkcji IntelliSense, aby pomóc w znalezieniu brakujących nagłówków.",
  30: 	"a.compile.commands.file": "plik compile_commands.json",
  31  	"auto-configure.intellisense.folder": "Czy chcesz użyć elementu {0}, aby automatycznie skonfigurować funkcję IntelliSense dla folderu „{1}”?",

Extension\i18n\plk\src\LanguageServer\configurations.i18n.json:
   9  	"invalid.configuration.file": "Nieprawidłowy plik konfiguracji. W tablicy musi być obecna co najmniej jedna konfiguracja.",
  10: 	"unknown.properties.version": "W pliku c_cpp_properties.json znaleziono nieznany numer wersji. Niektóre funkcje mogą nie działać w oczekiwany sposób.",
  11  	"update.properties.failed": "Próba aktualizacji elementu „{0}” nie powiodła się (czy masz dostęp do zapisu?)",

Extension\i18n\plk\src\LanguageServer\ui.i18n.json:
  12  	"edit.configuration.ui": "Edytowanie konfiguracji (interfejs użytkownika)",
  13: 	"edit.configuration.json": "Edytowanie konfiguracji (JSON)",
  14  	"select.configuration.provider": "Wybierz dostawcę konfiguracji...",

  17  	"disable.configuration.provider": "Wyłącz aktywnego dostawcę konfiguracji, jeśli ma zastosowanie.",
  18: 	"select.compile.commands": "Wybierz plik compile_commands.json...",
  19  	"select.workspace": "Wybierz folder obszaru roboczego...",

Extension\i18n\plk\ui\settings.html.i18n.json:
  10  	"edit.configurations.ui": "C/C++: edytuj konfiguracje (interfejs użytkownika)",
  11: 	"switch.to.json": "Przełącz do pliku {0}, klikając link pliku lub używając polecenia:",
  12: 	"edit.configurations.in.json": "Edytuj konfiguracje w pliku JSON",
  13: 	"edit.configurations.json": "C/C++: edytuj konfiguracje (JSON)",
  14  	"check.the.schema": "Dowiedz się więcej o właściwościach języka C/C++, przechodząc do: {0}.",

Extension\i18n\ptb\c_cpp_properties.schema.json.i18n.json:
   6  {
   7: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.name": "Identificador de configuração. Mac, Linux e Win32 são identificadores especiais para as configurações que serão selecionadas automaticamente nessas plataformas, mas o identificador pode ser qualquer coisa.",
   8: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerPath": "Caminho completo do compilador sendo usado, por exemplo, /usr/bin/gcc, para habilitar IntelliSense mais preciso.",
   9: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerArgs": "Argumentos do compilador para modificar as inclusões ou definições usadas. Por exemplo, -nostdinc++, -m32, etc.",
  10: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cStandard": "Versão do padrão da linguagem C a ser usada para o IntelliSense. Observação: os padrões GNU são usados apenas para consultar o compilador de conjunto para obter definições GNU e o IntelliSense emulará a versão padrão do C equivalente.",
  11: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cppStandard": "Versão do padrão da linguagem C++ a ser usada para o IntelliSense. Observação: os padrões GNU são usados apenas para consultar o compilador de conjunto para obter definições de GNU e o IntelliSense emulará a versão do C++ padrão equivalente.",
  12: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compileCommands": "Caminho completo do arquivo compile_commands.json para o workspace.",
  13: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.includePath": "Uma lista de caminhos para o mecanismo do IntelliSense usar ao procurar cabeçalhos incluídos. A pesquisa nesses caminhos não é recursiva. Especifique '**' para indicar uma pesquisa recursiva. Por exemplo, '${workspaceFolder}/**' pesquisará em todos os subdiretórios, enquanto '${workspaceFolder}' não fará isso.",
  14: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.macFrameworkPath": "Uma lista de caminhos para o mecanismo IntelliSense usar durante a pesquisa de cabeçalhos incluídos por meio das estruturas Mac. Compatível somente com configurações do Mac.",
  15: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.windowsSdkVersion": "A versão do caminho de inclusão do SDK do Windows a ser usada no Windows, por exemplo, '10.0.17134.0'.",
  16: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.defines": "Uma lista de definições de pré-processador para o mecanismo IntelliSense usar durante a análise de arquivos. Opcionalmente, use = para definir um valor, por exemplo, VERSION=1.",
  17: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.intelliSenseMode": "O modo do IntelliSense a ser usado, que é mapeado para uma plataforma e uma variante de arquitetura do MSVC, do gcc ou do Clang. Se esta opção não for definida ou se for definida como ${default}, a extensão escolherá o padrão dessa plataforma. O Windows usa windows-msvc-x64, o Linux usa linux-gcc-x64 e o macOS usa macos-clang-x64 como padrão. Os modos do IntelliSense que só especificam variantes <compiler>-<architecture> (por exemplo, gcc-x64) são os modos herdados, que são convertidos automaticamente nas variantes <platform>-<compiler>-<architecture> com base na plataforma host.",
  18: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.forcedInclude": "Uma lista de arquivos que devem ser incluídos antes de qualquer arquivo de inclusão em uma unidade de tradução.",
  19: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.configurationProvider": "A ID de uma extensão do VS Code que pode fornecer informações de configuração do IntelliSense para arquivos de origem.",
  20: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.limitSymbolsToIncludedHeaders": "true para processar somente os arquivos direta ou indiretamente incluídos como cabeçalhos, false para processar todos os arquivos nos caminhos de inclusão especificados.",
  21: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.databaseFilename": "Caminho para o banco de dados de símbolo gerado. Se um caminho relativo for especificado, ele será criado em relação ao local de armazenamento padrão do workspace.",
  22: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.path": "Uma lista de caminhos a serem usados para indexação e análise de símbolos do workspace (usados por Ir para Definição, Localizar Todas as Referências etc.). A pesquisa nesses caminhos é recursiva por padrão. Especifique '*' para indicar uma pesquisa não recursiva. Por exemplo, '${workspaceFolder}' pesquisará todos os subdiretórios enquanto '${workspaceFolder}/*' não fará isso.",
  23: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.customConfigurationVariables": "Variáveis personalizadas que podem ser consultadas por meio do comando ${cpptools:activeConfigCustomVariable} a serem usadas para as variáveis de entrada no launch.json ou tasks.json.",
  24: 	"c_cpp_properties.schema.json.definitions.env": "Variáveis personalizadas que podem ser reutilizadas em qualquer lugar neste arquivo usando a sintaxe ${variável} ou ${env:variável}.",
  25: 	"c_cpp_properties.schema.json.definitions.version": "Versão do arquivo de configuração. Esta propriedade é gerenciada pela extensão. Não a altere.",
  26: 	"c_cpp_properties.schema.json.definitions.enableConfigurationSquiggles": "Controla se a extensão relatará erros detectados em c_cpp_properties.json."
  27  }

Extension\i18n\ptb\package.i18n.json:
    6  {
    7: 	"c_cpp.capabilities.untrustedWorkspaces.description": "Múltiplas configurações podem fazer com que processos locais ao espaço de trabalho sejam executados, por exemplo, C_Cpp.clang_format_path, C_Cpp.addNodeAddonIncludePaths, C_Cpp.default.compilerPath, C_Cpp.default.configurationProvider, e C_Cpp.default.compileCommands, e as propriedades equivalentes em c_cpp_properties.json.",
    8  	"c_cpp.command.configurationSelect.title": "Selecione uma Configuração...",
    9  	"c_cpp.command.configurationProviderSelect.title": "Alterar Provedor de Configuração...",
   10: 	"c_cpp.command.configurationEditJSON.title": "Editar Configurações (JSON)",
   11  	"c_cpp.command.configurationEditUI.title": "Editar Configurações (IU)",

  146  	"c_cpp.configuration.intelliSenseUpdateDelay.description": "Controla o atraso em milissegundos até que o IntelliSense comece a ser atualizado após uma modificação.",
  147: 	"c_cpp.configuration.default.includePath.description": "O valor a ser usado em uma configuração se \"includePath\" não estiver especificado em c_cpp_properties.json. Se \"includePath\" estiver especificado, adicione \"${default}\" à matriz para inserir os valores dessa configuração.",
  148  	"c_cpp.configuration.default.defines.description": "O valor a ser usado em uma configuração se \"defines\" não for especificado ou os valores a serem inseridos se \"${default}\" estiver presente em \"defines\".",

  162  	"c_cpp.configuration.default.systemIncludePath.description": "O valor a ser usado para o caminho de inclusão do sistema. Se definido, substitui o caminho de inclusão do sistema adquirido por meio das configurações \"compilerPath\" e \"compileCommands\".",
  163: 	"c_cpp.configuration.default.enableConfigurationSquiggles.description": "Controla se a extensão relatará erros detectados em c_cpp_properties.json.",
  164  	"c_cpp.configuration.default.customConfigurationVariables.description": "O valor a ser usado em uma configuração se \"customConfigurationVariables\" não for definido ou os valores a serem inseridos se \"${default}\" estiver presente como uma chave em \"customConfigurationVariables\".",

  178  	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: outros resultados de referências",
  179: 	"c_cpp.contributes.viewsWelcome.contents": "Para saber mais sobre o launch.json, veja [Configuring C/C++ debugging](https://code.visualstudio.com/docs/cpp/launch-json-reference).",
  180  	"c_cpp.debuggers.pipeTransport.description": "Quando presente, isso instrui o depurador a conectar-se a um computador remoto usando outro executável como um pipe que retransmitirá a entrada/saída padrão entre o VS Code e o executável do back-end do depurador habilitado para MI (como gdb).",

Extension\i18n\ptb\src\common.i18n.json:
  6  {
  7: 	"failed.to.parse.json": "Falha ao analisar o arquivo JSON, possivelmente devido a comentários ou vírgulas à direita.",
  8  	"extension.not.ready": "A extensão C/C++ ainda está sendo instalada. Confira a janela de saída para obter mais informações.",

Extension\i18n\ptb\src\nativeStrings.i18n.json:
   15  	"include_errors_update_include_path_intellisense_disabled": "#incluir erros detectados. Atualize o includePath. Os recursos do IntelliSense para esta unidade de tradução ({0}) serão fornecidos pelo Analisador de Marca.",
   16: 	"include_errors_update_compile_commands_or_include_path_intellisense_disabled": "#incluir erros detectados. Considere atualizar o compile_commands.json ou o includePath. Os recursos do IntelliSense para esta unidade de tradução ({0}) serão fornecidos pelo Analisador de Marca.",
   17: 	"could_not_parse_compile_commands": "Não foi possível analisar \"{0}\". Em seu lugar, será usado o 'includePath' de c_cpp_properties.json na pasta '{1}'.",
   18: 	"could_not_find_compile_commands": "Não foi possível encontrar \"{0}\". Em seu lugar, será usado o 'includePath' de c_cpp_properties.json na pasta '{1}'.",
   19: 	"file_not_found_in_path": "\"{0}\" não foi encontrado em \"{1}\". Em seu lugar, será usado 'includePath' de c_cpp_properties.json na pasta '{2}' para esse arquivo.",
   20  	"database_reset": "O banco de dados do IntelliSense foi redefinido com êxito.",

   47  	"failed_to_reset_timestamps_for": "Falha ao redefinir o carimbo de data/hora para {0}: erro = {1}",
   48: 	"no_suitable_complier": "Nenhum compilador adequado encontrado. Defina \"compilerPath\" em c_cpp_properties.json.",
   49  	"compiler_include_not_found": "O compilador inclui o caminho não encontrado: {0}",

  122  	"error_limit_exceeded": "O limite de erros foi excedido. {0} erros não relatados.",
  123: 	"include_errors_update_compile_commands_or_include_path_squiggles_disabled": "#incluir erros detectados. Considere atualizar o compile_commands.json ou o includePath. Os rabiscos estão desabilitados para esta unidade de tradução ({0}).",
  124  	"cannot_reset_database": "O banco de dados do IntelliSense não pôde ser redefinido. Para redefinir manualmente, feche todas as instâncias do VS Code e exclua este arquivo: {0}",

  179  	"cpp_compiler_from_compiler_path": "Tentando obter padrões do compilador C++ na propriedade \"compilerPath\": '{0}'",
  180: 	"c_compiler_from_compile_commands": "Tentando obter padrões do compilador C no arquivo compile_commands.json: '{0}'",
  181: 	"cpp_compiler_from_compile_commands": "Tentando obter padrões do compilador C++ no arquivo compile_commands.json: '{0}'",
  182  	"c_intellisense_mode_changed": "Para arquivos de origem C, o IntelliSenseMode foi alterado de \"{0}\" para \"{1}\".",

Extension\i18n\ptb\src\LanguageServer\client.i18n.json:
  24  	"update.intellisense.time": "Atualize o tempo do IntelliSense (s): {0}",
  25: 	"configure.json.button": "Configurar (JSON)",
  26  	"configure.ui.button": "Configurar (IU)",

  29  	"configure.your.intellisense.settings": "Defina as configurações do IntelliSense para ajudar a localizar cabeçalhos ausentes.",
  30: 	"a.compile.commands.file": "um arquivo compile_commands.json",
  31  	"auto-configure.intellisense.folder": "Deseja usar {0} para configurar automaticamente o IntelliSense para a pasta '{1}'?",

Extension\i18n\ptb\src\LanguageServer\configurations.i18n.json:
   9  	"invalid.configuration.file": "Arquivo de configuração inválido. Precisa haver pelo menos uma configuração presente na matriz.",
  10: 	"unknown.properties.version": "Número de versão desconhecido encontrado em c_cpp_properties.json. Alguns recursos podem não funcionar como esperado.",
  11  	"update.properties.failed": "Falha na tentativa de atualizar \"{0}\" (você tem acesso de gravação?)",

Extension\i18n\ptb\src\LanguageServer\ui.i18n.json:
  12  	"edit.configuration.ui": "Editar Configurações (IU)",
  13: 	"edit.configuration.json": "Editar Configurações (JSON)",
  14  	"select.configuration.provider": "Selecione um Provedor de Configuração...",

  17  	"disable.configuration.provider": "Desabilite o provedor de configuração ativo, se aplicável.",
  18: 	"select.compile.commands": "Selecione um compile_commands.json...",
  19  	"select.workspace": "Selecionar uma pasta de workspace...",

Extension\i18n\ptb\ui\settings.html.i18n.json:
  10  	"edit.configurations.ui": "C/C++: editar configurações (IU)",
  11: 	"switch.to.json": "Alterne para o arquivo {0} clicando no link do arquivo ou usando o comando:",
  12: 	"edit.configurations.in.json": "Editar as configurações no arquivo JSON",
  13: 	"edit.configurations.json": "C/C++: editar configurações (JSON)",
  14  	"check.the.schema": "Saiba mais sobre as propriedades de C/C++ acessando {0}.",

Extension\i18n\rus\c_cpp_properties.schema.json.i18n.json:
   6  {
   7: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.name": "Идентификатор конфигурации. Mac, Linux и Win32 — это специальные идентификаторы для конфигураций, которые будут автоматически выбираться на этих платформах, но идентификатор может быть любым.",
   8: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerPath": "Полный путь к используемому компилятору, например \"/usr/bin/gcc\", для повышения точности IntelliSense.",
   9: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerArgs": "Аргументы компилятора для изменения используемых включений или определений, например -nostdinc++, -m32 и т. д.",
  10: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cStandard": "Версия стандарта языка C, используемая для IntelliSense. Примечание: стандарты GNU используются только для запроса определений GNU у установленного компилятора, а IntelliSense будет эмулировать эквивалентную версию стандарта C.",
  11: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cppStandard": "Версия стандарта языка C++, используемая для IntelliSense. Примечание: стандарты GNU используются только для запроса определений GNU у установленного компилятора, а IntelliSense будет эмулировать эквивалентную версию стандарта C++.",
  12: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compileCommands": "Полный путь к файлу compile_commands.json рабочей области.",
  13: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.includePath": "Список путей подсистемы IntelliSense, используемый при поиске включаемых заголовков. Поиск по этим путям не является рекурсивным. Чтобы использовать рекурсивный поиск, укажите \"**\". Например, если указать \"${workspaceFolder}/**\", будет выполнен поиск по всем подкаталогам, а если указать \"${workspaceFolder}\" — не будет.",
  14: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.macFrameworkPath": "Список путей для подсистемы IntelliSense, используемых при поиске включаемых файлов заголовков из платформ Mac. Поддерживается только в конфигурации для Mac.",
  15: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.windowsSdkVersion": "Версия пути включения Windows SDK для использования в Windows, например \"10.0.17134.0\".",
  16: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.defines": "Список определений препроцессора для подсистемы IntelliSense, используемых при анализе файлов. При необходимости вы можете задать значение с помощью \"=\", например: VERSION=1.",
  17: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.intelliSenseMode": "Используемый режим IntelliSense, соответствующий определенному варианту платформы и архитектуры MSVC, gcc или Clang. Если значение не указано или указано значение ${default}, расширение выберет вариант по умолчанию для этой платформы. Для Windows по умолчанию используется windows-msvc-x64, для Linux — linux-gcc-x64, а для macOS — macos-clang-x64. Режимы IntelliSense, в которых указаны только варианты <compiler>-<architecture> (например, gcc-x64), являются устаревшими и автоматически преобразуются в варианты <platform>-<compiler>-<architecture> на основе платформы узла.",
  18: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.forcedInclude": "Список файлов, которые должны быть включены перед любым файлом включений в единице трансляции.",
  19: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.configurationProvider": "Идентификатор расширения VS Code, которое может предоставить данные конфигурации IntelliSense для исходных файлов.",
  20: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.limitSymbolsToIncludedHeaders": "При значении true (истина) будут обрабатываться только файлы, прямо или косвенно включенные как файлы заголовков, а при значении false (ложь) — все файлы по указанным путям для включений.",
  21: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.databaseFilename": "Путь к создаваемой базе данных символов. При указании относительного пути он будет отсчитываться от используемого в рабочей области места хранения по умолчанию.",
  22: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.path": "Список путей, используемых для индексирования и анализа символов рабочей области (для использования командами \"Перейти к определению\", \"Найти все ссылки\" и т. д.). Поиск по этим путям по умолчанию является рекурсивным. Укажите \"*\", чтобы использовать нерекурсивный поиск. Например, \"${workspaceFolder}\" будет означать поиск во всех подкаталогах, тогда как \"${workspaceFolder}/*\" — не будет.",
  23: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.customConfigurationVariables": "Пользовательские переменные, которые можно запросить с помощью команды ${cpptools:activeConfigCustomVariable}, чтобы использовать в качестве входных переменных в файле launch.js или tasks.js.",
  24: 	"c_cpp_properties.schema.json.definitions.env": "Пользовательские переменные, которые могут многократно применяться в любом месте этого файла с помощью синтаксиса ${переменная} или ${env:переменная}.",
  25: 	"c_cpp_properties.schema.json.definitions.version": "Версия файла конфигурации. Этим свойством управляет расширение. Не изменяйте его.",
  26: 	"c_cpp_properties.schema.json.definitions.enableConfigurationSquiggles": "Определяет, будет ли расширение сообщать об ошибках, обнаруженных в c_cpp_properties.json."
  27  }

Extension\i18n\rus\package.i18n.json:
    6  {
    7: 	"c_cpp.capabilities.untrustedWorkspaces.description": "Наличие нескольких параметров может привести к выполнению процессов, локальных для рабочей области, например C_Cpp.clang_format_path, C_Cpp.addNodeAddonIncludePaths, C_Cpp.default.compilerPath, C_Cpp.default.configurationProvider и C_Cpp.default.compileCommands, а также эквивалентные свойства в c_cpp_properties.json.",
    8  	"c_cpp.command.configurationSelect.title": "Выберите конфигурацию...",
    9  	"c_cpp.command.configurationProviderSelect.title": "Изменение поставщика конфигурации...",
   10: 	"c_cpp.command.configurationEditJSON.title": "Изменить конфигурации (JSON)",
   11  	"c_cpp.command.configurationEditUI.title": "Изменить конфигурации (пользовательский интерфейс)",

  162  	"c_cpp.configuration.default.systemIncludePath.description": "Значение, используемое для системного пути включения. Если этот параметр задан, он переопределяет системный путь включения, полученный с помощью параметров \"compilerPath\" и \"compileCommands\".",
  163: 	"c_cpp.configuration.default.enableConfigurationSquiggles.description": "Определяет, будет ли расширение сообщать об ошибках, обнаруженных в c_cpp_properties.json.",
  164  	"c_cpp.configuration.default.customConfigurationVariables.description": "Значение, используемое в конфигурации, если параметр \"customConfigurationVariables\" не установлен, или вставляемые значения, если в \"customConfigurationVariables\" присутствует значение \"${default}\" в качестве ключа.",

  178  	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: результаты по другим ссылкам",
  179: 	"c_cpp.contributes.viewsWelcome.contents": "Дополнительные сведения о launch.json см. в статье [Настройка отладки C/C++](https://code.visualstudio.com/docs/cpp/launch-json-reference).",
  180  	"c_cpp.debuggers.pipeTransport.description": "При наличии сообщает отладчику о необходимости подключения к удаленному компьютеру с помощью другого исполняемого файла в качестве канала, который будет пересылать стандартный ввод и вывод между VS Code и исполняемым файлом отладчика с поддержкой MI в серверной части (например, gdb).",

Extension\i18n\rus\src\common.i18n.json:
  6  {
  7: 	"failed.to.parse.json": "Не удалось проанализировать файл JSON, возможно, из-за комментариев или конечных запятых.",
  8  	"extension.not.ready": "Расширение C/C++ еще устанавливается. Дополнительные сведения см. в окне вывода.",

Extension\i18n\rus\src\nativeStrings.i18n.json:
   15  	"include_errors_update_include_path_intellisense_disabled": "Обнаружены ошибки #include. Измените includePath. Функции IntelliSense для этой единицы трансляции ({0}) будет предоставлены анализатором тегов.",
   16: 	"include_errors_update_compile_commands_or_include_path_intellisense_disabled": "Обнаружены ошибки #include. Рекомендуется изменить compile_commands.json или includePath. Функции IntelliSense для этой единицы трансляции ({0}) будет предоставлены анализатором тегов.",
   17: 	"could_not_parse_compile_commands": "Не удалось проанализировать \"{0}\". Вместо этого будет использоваться \"includePath\" из файла c_cpp_properties.json в папке \"{1}\".",
   18: 	"could_not_find_compile_commands": "Не удалось найти \"{0}\". Вместо этого будет использоваться \"includePath\" из файла c_cpp_properties.json в папке \"{1}\".",
   19: 	"file_not_found_in_path": "Не удалось найти \"{0}\" в \"{1}\". Вместо него для этого файла будет использоваться \"includePath\" из файла c_cpp_properties.json в папке \"{2}\".",
   20  	"database_reset": "База данных IntelliSense успешно сброшена.",

   47  	"failed_to_reset_timestamps_for": "Не удалось сбросить метку времени для {0}: ошибка — {1}",
   48: 	"no_suitable_complier": "Подходящий компилятор не найден. Укажите \"compilerPath\" в c_cpp_properties.json.",
   49  	"compiler_include_not_found": "Путь включения компилятора не найден: {0}",

  122  	"error_limit_exceeded": "Превышено предельное число ошибок, ошибок не выводится: {0}.",
  123: 	"include_errors_update_compile_commands_or_include_path_squiggles_disabled": "Обнаружены ошибки #include. Рекомендуется изменить compile_commands.json или includePath. Волнистые линии отключены для этой единицы трансляции ({0}).",
  124  	"cannot_reset_database": "Не удалось сбросить базу данных IntelliSense. Чтобы выполнить сброс вручную, закройте все экземпляры VS Code, а затем удалите этот файл: {0}",

  179  	"cpp_compiler_from_compiler_path": "Попытка получить значения по умолчанию из компилятора C++ в свойстве \"compilerPath\": \"{0}\"",
  180: 	"c_compiler_from_compile_commands": "Попытка получить значения по умолчанию из компилятора C в файле compile_commands.json: \"{0}\"",
  181: 	"cpp_compiler_from_compile_commands": "Попытка получить значения по умолчанию из компилятора C++ в файле compile_commands.json: \"{0}\"",
  182  	"c_intellisense_mode_changed": "Для исходных файлов C IntelliSenseMode был изменен с \"{0}\" на \"{1}\".",

Extension\i18n\rus\src\LanguageServer\client.i18n.json:
  24  	"update.intellisense.time": "Время обновления IntelliSense (в секундах): {0}",
  25: 	"configure.json.button": "Настройка (JSON)",
  26  	"configure.ui.button": "Настройка (пользовательский интерфейс)",

  29  	"configure.your.intellisense.settings": "Настройте параметры IntelliSense, чтобы помочь обнаружить отсутствующие заголовки.",
  30: 	"a.compile.commands.file": "файл compile_commands.json",
  31  	"auto-configure.intellisense.folder": "Вы хотите использовать {0} для автонастройки IntelliSense для папки \"{1}\"?",

Extension\i18n\rus\src\LanguageServer\configurations.i18n.json:
   9  	"invalid.configuration.file": "Недопустимый файл конфигурации. В массиве должна присутствовать по меньшей мере одна конфигурация.",
  10: 	"unknown.properties.version": "В c_cpp_properties.json найден неизвестный номер версии. Некоторые функции могут работать не так, как ожидалось.",
  11  	"update.properties.failed": "Сбой при попытке обновления \"{0}\" (у вас есть доступ на запись?)",

Extension\i18n\rus\src\LanguageServer\ui.i18n.json:
  12  	"edit.configuration.ui": "Изменить конфигурации (пользовательский интерфейс)",
  13: 	"edit.configuration.json": "Изменить конфигурации (JSON)",
  14  	"select.configuration.provider": "Выберите поставщик конфигурации...",

  17  	"disable.configuration.provider": "Отключите активный поставщик конфигурации (если применимо).",
  18: 	"select.compile.commands": "Выберите compile_commands.json...",
  19  	"select.workspace": "Выберите папку рабочей области…",

Extension\i18n\rus\ui\settings.html.i18n.json:
  10  	"edit.configurations.ui": "C/C++: изменение конфигураций (пользовательский интерфейс)",
  11: 	"switch.to.json": "Переключитесь на файл {0}, щелкнув ссылку на него или используя команду:",
  12: 	"edit.configurations.in.json": "Изменение конфигураций в файле JSON",
  13: 	"edit.configurations.json": "C/C++: изменение конфигураций (JSON)",
  14  	"check.the.schema": "Дополнительные сведения о свойствах C/C++ см. в {0}.",

Extension\i18n\trk\c_cpp_properties.schema.json.i18n.json:
   6  {
   7: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.name": "Yapılandırma tanımlayıcısı. Mac, Linux ve Win32, bu platformlarda otomatik olarak seçilecek yapılandırmalar için özel tanımlayıcılardır, ancak tanımlayıcı herhangi bir işlem olabilir.",
   8: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerPath": "Daha doğru IntelliSense'i etkinleştirmek için kullanılan derleyicinin tam yolu (örneğin, /usr/bin/gcc).",
   9: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerArgs": "Kullanılan eklemeleri veya tanımları değiştirmek için derleyici bağımsız değişkenleri. Örneğin -nostdinc++, -m32, vb.",
  10: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cStandard": "IntelliSense için kullanılacak C dil standardı sürümü. Not: GNU standartları yalnızca GNU tanımlarını almak için ayarlanan derleyiciyi sorgulamak amacıyla kullanılır ve IntelliSense eşdeğer C standart sürümüne öykünür.",
  11: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cppStandard": "IntelliSense için kullanılacak C++ dil standardı sürümü. Not: GNU standartları yalnızca GNU tanımlarını almak için ayarlanan derleyiciyi sorgulamak amacıyla kullanılır ve IntelliSense, eşdeğer C++ standart sürümüne öykünür.",
  12: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compileCommands": "Çalışma alanı için compile_commands.json dosyasının tam yolu.",
  13: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.includePath": "IntelliSense altyapısının eklenen üst bilgileri ararken kullanacağı yol listesi. Bu yollarda arama özyinelemeli değildir. Özyinelemeli aramayı göstermek için '**' belirtin. Örneğin: '${workspaceFolder}/**' tüm alt dizinlerde ararken '${workspaceFolder}' aramaz.",
  14: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.macFrameworkPath": "Mac çerçevelerinden eklenen üst bilgileri ararken IntelliSense altyapısı tarafından kullanılacak yolların listesi. Yalnızca Mac yapılandırmalarında desteklenir.",
  15: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.windowsSdkVersion": "Windows üzerinde kullanılacak Windows SDK ekleme yolu sürümü, ör. '10.0.17134.0'.",
  16: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.defines": "IntelliSense altyapısının dosyaları ayrıştırırken kullanacağı ön işlemci tanımlarının bir listesi. İsteğe bağlı olarak, bir değer ayarlamak için = kullanın, örneğin VERSION=1.",
  17: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.intelliSenseMode": "MSVC, gcc veya Clang'in platform ve mimari varyantına eşlemek için kullanılacak IntelliSense modu. Ayarlanmazsa veya ${default} olarak belirlenirse uzantı, ilgili platform için varsayılan ayarı seçer. Windows için varsayılan olarak windows-msvc-x64, Linux için varsayılan olarak linux-gcc-x64 ve macOS için varsayılan olarak macos-clang-x64 kullanılır. Yalnızca <compiler>-<architecture> varyantlarını belirten IntelliSense modları (yani gcc-x64), eski modlardır ve konak platformuna göre otomatik olarak <platform>-<compiler>-<architecture> varyantlarına dönüştürülür.",
  18: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.forcedInclude": "Çeviri birimindeki herhangi bir içerme dosyasından önce dahil edilmesi gereken dosyaların listesi.",
  19: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.configurationProvider": "Kaynak dosyalar için IntelliSense yapılandırma bilgilerini sağlayabilecek VS Code uzantısının kimliği.",
  20: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.limitSymbolsToIncludedHeaders": "yalnızca doğrudan veya dolaylı olarak üst bilgi olarak dahil edilen dosyaları işlemek için true, belirtilen ekleme yolları altındaki tüm dosyaları işlemek için false.",
  21: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.databaseFilename": "Oluşturulan sembol veritabanının yolu. Göreli bir yol belirtilirse, çalışma alanının varsayılan depolama konumuna göreli hale getirilir.",
  22: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.path": "Çalışma alanı sembollerinin (Tanıma Git, Tüm Başvuruları Bul gibi özellikleri için kullanılabilir) dizininin oluşturulması ve ayrıştırılması için kullanılacak yolların listesi. Bu yollarda arama varsayılan olarak özyinelemelidir. Özyinelemeli olmayan aramayı göstermek için '*' belirtin. Örneğin, '${workspaceFolder}' tüm alt dizinlerde arama yaparken '${workspaceFolder}/*' arama yapmaz.",
  23: 	"c_cpp_properties.schema.json.definitions.configurations.items.properties.customConfigurationVariables": "launch.json veya tasks.json içindeki giriş bağımsız değişkenleri için kullanılacak, ${cpptools:activeConfigCustomVariable} komutu aracılığıyla sorgulanabilen özel değişkenler.",
  24: 	"c_cpp_properties.schema.json.definitions.env": "${değişken} veya ${env:değişken} söz dizimi kullanılarak bu dosyada herhangi bir yerde yeniden kullanılabilen özel değişkenler.",
  25: 	"c_cpp_properties.schema.json.definitions.version": "Yapılandırma dosyasının sürümü. Bu özellik uzantı tarafından yönetilir. Lütfen değiştirmeyin.",
  26: 	"c_cpp_properties.schema.json.definitions.enableConfigurationSquiggles": "Uzantının c_cpp_properties.json dosyasında algılanan hataları bildirip bildirmeyeceğini denetler."
  27  }

Extension\i18n\trk\package.i18n.json:
    6  {
    7: 	"c_cpp.capabilities.untrustedWorkspaces.description": "Birden çok ayar çalışma alanına yönelik işlemlerin yürütülmesine neden olabilir (ör. C_Cpp.clang_format_path, C_Cpp.addNodeAddonIncludePaths, C_Cpp.default.compilerPath, C_Cpp.default.configurationProvider, C_Cpp.default.compileCommands ve c_cpp_properties.json içindeki eşdeğer özellikler).",
    8  	"c_cpp.command.configurationSelect.title": "Yapılandırma Seçin...",
    9  	"c_cpp.command.configurationProviderSelect.title": "Yapılandırma Sağlayıcısını Değiştir...",
   10: 	"c_cpp.command.configurationEditJSON.title": "Yapılandırmaları Düzenle (JSON)",
   11  	"c_cpp.command.configurationEditUI.title": "Yapılandırmaları Düzenle (UI)",

  146  	"c_cpp.configuration.intelliSenseUpdateDelay.description": "IntelliSense'in, bir değişiklikten sonra güncelleştirilmeye başlamasından önce beklenecek milisaniye cinsinden gecikme süresini denetler.",
  147: 	"c_cpp.configuration.default.includePath.description": "c_cpp_properties.json dosyasında \"includePath\" belirtilmediyse bir yapılandırmada kullanılacak değer. \"includePath\" belirtildiyse, değerleri bu ayardan eklemek için diziye \"${default}\" ekleyin.",
  148  	"c_cpp.configuration.default.defines.description": "\"defines\" belirtilmemişse bir yapılandırmada kullanılacak değer veya \"defines\" içinde \"${default}\" varsa eklenecek değerler.",

  162  	"c_cpp.configuration.default.systemIncludePath.description": "Sistem ekleme yolu için kullanılacak değer. Ayarlanırsa \"compilerPath\" ve \"compileCommands\" ayarları aracılığıyla elde edilen sistem ekleme yolunu geçersiz kılar.",
  163: 	"c_cpp.configuration.default.enableConfigurationSquiggles.description": "Uzantının c_cpp_properties.json dosyasında algılanan hataları bildirip bildirmeyeceğini denetler.",
  164  	"c_cpp.configuration.default.customConfigurationVariables.description": "\"customConfigurationVariables\" ayarlanmamışsa bir yapılandırmada kullanılacak değer veya \"customConfigurationVariables\" içinde anahtar olarak \"${default}\" varsa eklenecek değerler.",

  178  	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: Diğer başvuru sonuçları",
  179: 	"c_cpp.contributes.viewsWelcome.contents": "launch.json hakkında daha fazla bilgi için [C/C++ hata ayıklamasını yapılandırma](https://code.visualstudio.com/docs/cpp/launch-json-reference) konusuna bakın.",
  180  	"c_cpp.debuggers.pipeTransport.description": "Mevcut olduğunda, hata ayıklayıcısına, VS Code ile MI özellikli hata ayıklayıcısı arka uç yürütülebilir dosyası (gdb gibi) arasında standart giriş/çıkış geçişi sağlayan bir kanal olarak görev yapacak başka bir yürütülebilir dosya aracılığıyla uzak bilgisayara bağlanmasını söyler.",

Extension\i18n\trk\src\common.i18n.json:
  6  {
  7: 	"failed.to.parse.json": "Büyük olasılıkla açıklamalar veya sondaki virgüllerden dolayı json dosyası ayrıştırılamadı.",
  8  	"extension.not.ready": "C/C++ uzantısı hala yükleniyor. Daha fazla bilgi için çıkış penceresine bakın.",

Extension\i18n\trk\src\nativeStrings.i18n.json:
   15  	"include_errors_update_include_path_intellisense_disabled": "#include hataları algılandı. Lütfen includePath değerinizi güncelleştirin. Bu çeviri birimi ({0}) için IntelliSense özellikleri Etiket Ayrıştırıcısı tarafından sağlanır.",
   16: 	"include_errors_update_compile_commands_or_include_path_intellisense_disabled": "#include hataları algılandı. compile_commands.json dosyanızı veya includePath değerinizi güncelleştirmeyi deneyin. Bu çeviri birimi ({0}) için IntelliSense özellikleri Etiket Ayrıştırıcısı tarafından sağlanır.",
   17: 	"could_not_parse_compile_commands": "\"{0}\" ayrıştırılamadı. Bunun yerine '{1}' klasöründeki c_cpp_properties.json dosyasında bulunan 'includePath' kullanılacak.",
   18: 	"could_not_find_compile_commands": "\"{0}\" bulunamadı. Bunun yerine '{1}' klasöründeki c_cpp_properties.json dosyasında bulunan 'includePath' kullanılacak.",
   19: 	"file_not_found_in_path": "\"{0}\", \"{1}\" içinde bulunamadı. Bu dosya yerine '{2}' klasöründeki c_cpp_properties.json dosyasında bulunan 'includePath' kullanılacak.",
   20  	"database_reset": "IntelliSense veritabanı başarıyla sıfırlandı.",

   47  	"failed_to_reset_timestamps_for": "{0} için zaman damgası sıfırlanamadı: hata = {1}",
   48: 	"no_suitable_complier": "Uygun derleyici bulunamadı. Lütfen c_cpp_properties.json dosyasında \"compilerPath\" öğesini ayarlayın.",
   49  	"compiler_include_not_found": "Derleyici ekleme yolu bulunamadı: {0}",

  122  	"error_limit_exceeded": "Hata sınırı aşıldı, {0} hata bildirilmedi.",
  123: 	"include_errors_update_compile_commands_or_include_path_squiggles_disabled": "#include hataları algılandı. compile_commands.json dosyanızı veya includePath değerinizi güncelleştirmeyi deneyin. Bu çeviri birimi ({0}) için ilişkilendirmeler devre dışı bırakıldı.",
  124  	"cannot_reset_database": "IntelliSense veritabanı sıfırlanamadı. Kendiniz sıfırlamak istiyorsanız, tüm VS Code örneklerini kapatıp bu dosyayı silin: {0}",

  179  	"cpp_compiler_from_compiler_path": "\"compilerPath\" özelliğindeki C++ derleyicisinden varsayılan değerler alınmaya çalışılıyor: '{0}'",
  180: 	"c_compiler_from_compile_commands": "compile_commands.json dosyasındaki C derleyicisinden varsayılan değerler alınmaya çalışılıyor: '{0}'",
  181: 	"cpp_compiler_from_compile_commands": "compile_commands.json dosyasındaki C++ derleyicisinden varsayılan değerler alınmaya çalışılıyor: '{0}'",
  182  	"c_intellisense_mode_changed": "C kaynak dosyaları için \"{0}\" olan IntelliSenseMode, \"{1}\" olarak değiştirildi.",

Extension\i18n\trk\src\LanguageServer\client.i18n.json:
  24  	"update.intellisense.time": "IntelliSense güncelleştirme zamanı (sn): {0}",
  25: 	"configure.json.button": "Yapılandır (JSON)",
  26  	"configure.ui.button": "Yapılandır (UI)",

  29  	"configure.your.intellisense.settings": "Eksik üst bilgilerin bulunmasına yardımcı olmak için IntelliSense ayarlarınızı yapılandırın.",
  30: 	"a.compile.commands.file": "bir compile_commands.json dosyası",
  31  	"auto-configure.intellisense.folder": "{0} kullanarak '{1}' klasörü için IntelliSense'i otomatik olarak yapılandırmak ister misiniz?",

Extension\i18n\trk\src\LanguageServer\configurations.i18n.json:
   9  	"invalid.configuration.file": "Yapılandırma dosyası geçersiz. Dizide mevcut en az bir yapılandırma olmalıdır.",
  10: 	"unknown.properties.version": "c_cpp_properties.json dosyasında bilinmeyen sürüm numarası bulundu. Bazı özellikler beklendiği gibi çalışmayabilir.",
  11  	"update.properties.failed": "\"{0}\" öğesini güncelleştirme girişimi başarısız oldu (yazma erişiminiz var mı?)",

Extension\i18n\trk\src\LanguageServer\ui.i18n.json:
  12  	"edit.configuration.ui": "Yapılandırmaları Düzenle (UI)",
  13: 	"edit.configuration.json": "Yapılandırmaları Düzenle (JSON)",
  14  	"select.configuration.provider": "Yapılandırma Sağlayıcısı Seçin...",

  17  	"disable.configuration.provider": "Varsa etkin yapılandırma sağlayıcısını devre dışı bırakın.",
  18: 	"select.compile.commands": "compile_commands.json dosyası seçin...",
  19  	"select.workspace": "Çalışma alanı klasörü seçin...",

Extension\i18n\trk\ui\settings.html.i18n.json:
  10  	"edit.configurations.ui": "C/C++: Yapılandırmaları düzenle (UI)",
  11: 	"switch.to.json": "Dosya bağlantısına tıklayarak veya şu komutu kullanarak {0} dosyasına geçiş yapın:",
  12: 	"edit.configurations.in.json": "JSON dosyasındaki yapılandırmaları düzenle",
  13: 	"edit.configurations.json": "C/C++: Yapılandırmaları düzenle (JSON)",
  14  	"check.the.schema": "{0} adresine giderek C/C++ özellikleri hakkında daha fazla bilgi edinin.",

Extension\src\commands.ts:
  22      private commandsToRegister: string[] = [
  23:         "C_Cpp.ConfigurationEditJSON",
  24          "C_Cpp.ConfigurationEditUI",

Extension\src\common.ts:
    23  import { PackageManager, IPackage } from './packageManager';
    24: import * as jsonc from 'comment-json';
    25  

    27  const localize: nls.LocalizeFunc = nls.loadMessageBundle();
    28: export const failedToParseJson: string = localize("failed.to.parse.json", "Failed to parse json file, possibly due to comments or trailing commas.");
    29  export let supportCuda: boolean = false;

    56  
    57: // Use this package.json to read values
    58: export const packageJson: any = vscode.extensions.getExtension("ms-vscode.cpptools")?.packageJSON;
    59  
    60: // Use getRawPackageJson to read and write back to package.json
    61  // This prevents obtaining any of VSCode's expanded variables.
    62: let rawPackageJson: any = null;
    63: export function getRawPackageJson(): any {
    64:     if (rawPackageJson === null || rawPackageJson === undefined) {
    65:         const fileContents: Buffer = fs.readFileSync(getPackageJsonPath());
    66:         rawPackageJson = JSON.parse(fileContents.toString());
    67      }
    68:     return rawPackageJson;
    69  }
    70  
    71: export async function getRawJson(path: string | undefined): Promise<any> {
    72      if (!path) {

    82      try {
    83:         rawElement = jsonc.parse(fileContents);
    84      } catch (error) {
    85:         throw new Error(failedToParseJson);
    86      }

   102  
   103: // This function is used to stringify the rawPackageJson.
   104: // Do not use with util.packageJson or else the expanded
   105: // package.json will be written back.
   106: export function stringifyPackageJson(packageJson: string): string {
   107:     return JSON.stringify(packageJson, null, 2);
   108  }

   113  
   114: export function getPackageJsonPath(): string {
   115:     return getExtensionFilePath("package.json");
   116  }
   117  
   118: export function getJsonPath(jsonFilaName: string): string | undefined {
   119      const editor: vscode.TextEditor | undefined = vscode.window.activeTextEditor;

   126      }
   127:     return path.join(folder.uri.fsPath, ".vscode", jsonFilaName);
   128  }

   203  
   204: const installProgressStr: string = "CPP." + packageJson.version + ".Progress";
   205: const intelliSenseProgressStr: string = "CPP." + packageJson.version + ".IntelliSenseProgress";
   206  

   429      };
   430:     const content: string = JSON.stringify(installLockObject);
   431      return writeFileText(getInstallLockPath(), content);

   552  
   553: /** Check if the core Json files exists in extension's installation folder */
   554: export async function checkInstallJsonsExist(): Promise<boolean> {
   555:     let installJsonsExist: boolean = true;
   556:     const jsonFiles: string[] = [
   557:         "bin/common.json",
   558:         "bin/linux.clang.arm.json",
   559:         "bin/linux.clang.arm64.json",
   560:         "bin/linux.clang.x64.json",
   561:         "bin/linux.clang.x86.json",
   562:         "bin/linux.gcc.arm.json",
   563:         "bin/linux.gcc.arm64.json",
   564:         "bin/linux.gcc.x64.json",
   565:         "bin/linux.gcc.x86.json",
   566:         "bin/macos.clang.arm.json",
   567:         "bin/macos.clang.arm64.json",
   568:         "bin/macos.clang.x64.json",
   569:         "bin/macos.clang.x86.json",
   570:         "bin/macos.gcc.arm.json",
   571:         "bin/macos.gcc.arm64.json",
   572:         "bin/macos.gcc.x64.json",
   573:         "bin/macos.gcc.x86.json",
   574:         "bin/windows.clang.arm.json",
   575:         "bin/windows.clang.arm64.json",
   576:         "bin/windows.clang.x64.json",
   577:         "bin/windows.clang.x86.json",
   578:         "bin/windows.gcc.arm.json",
   579:         "bin/windows.gcc.arm64.json",
   580:         "bin/windows.gcc.x64.json",
   581:         "bin/windows.gcc.x86.json",
   582:         "bin/windows.msvc.arm.json",
   583:         "bin/windows.msvc.arm64.json",
   584:         "bin/windows.msvc.x64.json",
   585:         "bin/windows.msvc.x86.json",
   586:         "debugAdapters/bin/cppdbg.ad7Engine.json"
   587      ];
   588:     await Promise.all(jsonFiles.map(async (file) => {
   589          if (!await checkFileExists(path.join(extensionPath, file))) {
   590:             installJsonsExist = false;
   591              console.log(`Extension file ${file} is missing.`);
   592:             Telemetry.logLanguageServerEvent("missingJson", { "source": `${file}` });
   593          }
   594      }));
   595:     return installJsonsExist;
   596  }

  1033      // Replace all \<escape character> with \\<character>, except for \"
  1034:     // Otherwise, the JSON.parse result will have the \<escape character> missing.
  1035      let newResults: string = "";

  1103      if (isString(process.env.VSCODE_NLS_CONFIG)) {
  1104:         const vscodeOptions: VSCodeNlsConfig = JSON.parse(process.env.VSCODE_NLS_CONFIG) as VSCodeNlsConfig;
  1105          if (vscodeOptions.availableLanguages) {

Extension\src\githubAPI.ts:
   24  /**
   25:  * The object representation of a release in the GitHub API's release JSON.
   26   * Named Build so as to reduce confusion between a "Release" release and "Insiders" release.

  161  export async function getTargetBuildInfo(updateChannel: string, isFromSettingsChange: boolean): Promise<BuildInfo | undefined> {
  162:     const builds: Build[] | undefined = await getReleaseJson();
  163      if (!builds || builds.length === 0) {

  166  
  167:     const userVersion: PackageVersion = new PackageVersion(util.packageJson.version);
  168      const targetBuild: Build | undefined = getTargetBuild(builds, userVersion, updateChannel, isFromSettingsChange);

  268          try {
  269:             rateLimit = JSON.parse(data);
  270          } catch (error) {
  271:             throw new Error('Failed to parse rate limit JSON');
  272          }

  276          } else {
  277:             throw new Error('Rate limit JSON is not of type RateLimit');
  278          }

  282              // Only throw if the user is connected to the Internet.
  283:             throw new Error('Failed to download rate limit JSON');
  284          }

  293  /**
  294:  * Download and parse the release list JSON from the GitHub API into a Build[].
  295   * @return Information about the released builds of the C/C++ extension.
  296   */
  297: async function getReleaseJson(): Promise<Build[] | undefined> {
  298      if (await rateLimitExceeded()) {

  301  
  302:     // Download release JSON
  303      const releaseUrl: string = 'https://api.github.com/repos/Microsoft/vscode-cpptools/releases';

  312          // Parse the file
  313:         let releaseJson: any;
  314          try {
  315:             releaseJson = JSON.parse(data);
  316          } catch (error) {
  317:             throw new Error('Failed to parse release JSON');
  318          }

  320          // Find the latest released builds.
  321:         const builds: Build[] = getArrayOfBuilds(releaseJson);
  322          if (!builds || builds.length === 0) {
  323:             throw new Error('Release JSON is not of type Build[]');
  324          } else {

  329              // Only throw if the user is connected to the Internet.
  330:             throw new Error('Failed to download release JSON');
  331          }

Extension\src\main.ts:
   55  
   56:     // Register a protocol handler to serve localized versions of the schema for c_cpp_properties.json
   57      class SchemaProvider implements vscode.TextDocumentContentProvider {

   86          try {
   87:             installedPlatformAndArchitecture = <util.InstallLockContents>JSON.parse(fileContents);
   88          } catch (error) {

  121          });
  122:     } else if (!(await util.checkInstallJsonsExist())) {
  123:         // Check the Json files to declare if the extension has been installed successfully.
  124          errMsg = localize("jason.files.missing", "The C/C++ extension failed to install successfully. You will need to reinstall the extension for C/C++ language features to function properly.");

  177      if (doOfflineInstall) {
  178:         // Offline Scenario: Lock file exists but package.json has not had its activationEvents rewritten.
  179:         if (util.packageJson.activationEvents && util.packageJson.activationEvents.length === 1) {
  180              try {

  288      const promises: Thenable<void>[] = [];
  289:     const packages: IPackage[] = util.packageJson["runtimeDependencies"];
  290      packages.forEach(p => {

  300      const promises: Thenable<void>[] = [];
  301:     const packages: IPackage[] = util.packageJson["runtimeDependencies"];
  302      const logger: Logger = getOutputChannelLogger();

  446  
  447:     const packageJson: any = util.getRawPackageJson();
  448:     let writePackageJson: boolean = false;
  449:     const packageJsonPath: string = util.getExtensionFilePath("package.json");
  450:     if (packageJsonPath.includes(".vscode-insiders") || packageJsonPath.includes(".vscode-exploration")) {
  451:         if (packageJson.contributes.configuration.properties['C_Cpp.updateChannel'].default === 'Default') {
  452:             packageJson.contributes.configuration.properties['C_Cpp.updateChannel'].default = 'Insiders';
  453:             writePackageJson = true;
  454          }

  456  
  457:     if (writePackageJson) {
  458:         return util.writeFileText(util.getPackageJsonPath(), util.stringifyPackageJson(packageJson));
  459      }

  463      // Replace activationEvents with the events that the extension should be activated for subsequent sessions.
  464:     const packageJson: any = util.getRawPackageJson();
  465  
  466:     packageJson.activationEvents = [
  467          "onLanguage:c",

  472          "onCommand:C_Cpp.BuildAndDebugActiveFile",
  473:         "onCommand:C_Cpp.ConfigurationEditJSON",
  474          "onCommand:C_Cpp.ConfigurationEditUI",

  494          "onDebugResolve:cppvsdbg",
  495:         "workspaceContains:/.vscode/c_cpp_properties.json",
  496          "onFileSystem:cpptools-schema"

  498  
  499:     return util.writeFileText(util.getPackageJsonPath(), util.stringifyPackageJson(packageJson));
  500  }

Extension\src\nativeStrings.json:
   10      "include_errors_update_include_path_intellisense_disabled": "#include errors detected. Please update your includePath. IntelliSense features for this translation unit ({0}) will be provided by the Tag Parser.",
   11:     "include_errors_update_compile_commands_or_include_path_intellisense_disabled": "#include errors detected. Consider updating your compile_commands.json or includePath. IntelliSense features for this translation unit ({0}) will be provided by the Tag Parser.",
   12:     "could_not_parse_compile_commands": "\"{0}\" could not be parsed. 'includePath' from c_cpp_properties.json in folder '{1}' will be used instead.",
   13:     "could_not_find_compile_commands": "\"{0}\" could not be found. 'includePath' from c_cpp_properties.json in folder '{1}' will be used instead.",
   14:     "file_not_found_in_path": "\"{0}\" not found in \"{1}\". 'includePath' from c_cpp_properties.json in folder '{2}' will be used for this file instead.",
   15      "database_reset": "The IntelliSense database was successfully reset.",

   42      "failed_to_reset_timestamps_for": "Failed to reset timestamp for {0}: error = {1}",
   43:     "no_suitable_complier": "No suitable compiler found. Please set the \"compilerPath\" in c_cpp_properties.json.",
   44      "compiler_include_not_found": "Compiler include path not found: {0}",

  117      "error_limit_exceeded": "Error limit exceeded, {0} error(s) not reported.",
  118:     "include_errors_update_compile_commands_or_include_path_squiggles_disabled": "#include errors detected. Consider updating your compile_commands.json or includePath. Squiggles are disabled for this translation unit ({0}).",
  119      "cannot_reset_database": "The IntelliSense database could not be reset. To manually reset, close all VS Code instances and then delete this file: {0}",

  192      "cpp_compiler_from_compiler_path": "Attempting to get defaults from C++ compiler in \"compilerPath\" property: '{0}'",
  193:     "c_compiler_from_compile_commands": "Attempting to get defaults from C compiler in compile_commands.json file: '{0}'",
  194:     "cpp_compiler_from_compile_commands": "Attempting to get defaults from C++ compiler in compile_commands.json file: '{0}'",
  195      "c_intellisense_mode_changed": "For C source files, IntelliSenseMode was changed from \"{0}\" to \"{1}\".",

Extension\src\packageManager.ts:
  146              if (!this.allPackages) {
  147:                 if (util.packageJson.runtimeDependencies) {
  148:                     this.allPackages = <IPackage[]>util.packageJson.runtimeDependencies;
  149  

  232  
  233:     // reloadCpptoolsJson in main.ts uses ~25% of this function.
  234      private DownloadFile(urlString: any, pkg: IPackage, delay: number): Promise<void> {

Extension\src\telemetry.ts:
  126      return {
  127:         name: util.packageJson.publisher + "." + util.packageJson.name,
  128:         version: util.packageJson.version
  129      };

Extension\src\Debugger\configurationProvider.ts:
   19  import { IConfiguration, IConfigurationSnippet, DebuggerType, MIConfigurations, WindowsConfigurations, WSLConfigurations, PipeTransportConfigurations } from './configurations';
   20: import { parse } from 'comment-json';
   21  import { PlatformInformation } from '../platform';

   32   * Retrieves configurations from a provider and displays them in a quickpick menu to be selected.
   33:  * Ensures that the selected configuration's preLaunchTask (if existent) is populated in the user's task.json.
   34   * Automatically starts debugging for "Build and Debug" configurations.

   61              const noDetailConfig: vscode.DebugConfiguration = {...config};
   62:             // Remove the "detail" property from the DebugConfiguration that will be written in launch.json.
   63              noDetailConfig.detail = undefined;

  118      /**
  119: 	 * Returns a list of initial debug configurations based on contextual information, e.g. package.json or folder.
  120  	 */

  128  
  129:         // Import the tasks from tasks.json file.
  130:         const buildTasksJson: CppBuildTask[] = await cppBuildTaskProvider.getJsonTasks();
  131  

  134  
  135:         // Rename the provided tasks that has same name as tasks in tasks.json.
  136          const buildTasksDetectedRename: CppBuildTask[] = buildTasksDetected.map(taskDetected => {
  137:             for (const taskJson of buildTasksJson) {
  138:                 if ((taskDetected.definition.label as string) === (taskJson.definition.label as string)) {
  139:                     taskDetected.name = cppBuildTaskProvider.provideUniqueTaskLabel(taskJson.definition.label, buildTasksJson);
  140                      taskDetected.definition.label = taskDetected.name;

  147          let buildTasks: CppBuildTask[] = [];
  148:         buildTasks = buildTasks.concat(buildTasksJson, buildTasksDetectedRename);
  149  

  193              // Add the "detail" property to show the compiler path in QuickPickItem.
  194:             // This property will be removed before writing the DebugConfiguration in launch.json.
  195              newConfig.detail = task.detail ? task.detail : definition.command;

  278       * This hook is directly called after 'resolveDebugConfiguration' but with all variables substituted.
  279:      * This is also ran after the tasks.json has completed.
  280       *

  361              outputChannel.appendLine(localize("debugger.launchConfig", "Launch configuration:"));
  362:             outputChannel.appendLine(JSON.stringify(config, undefined, 2));
  363              // TODO: Enable when https://github.com/microsoft/vscode/issues/108619 is resolved.

  535          const initialConfigurations: any = configurationSnippet.filter(snippet => snippet.debuggerType === debuggerType && snippet.isInitialConfiguration)
  536:             .map(snippet => JSON.parse(snippet.bodyText));
  537  
  538:         // If configurations is empty, then it will only have an empty configurations array in launch.json. Users can still add snippets.
  539          return initialConfigurations;

Extension\src\Debugger\configurations.ts:
   26  
   27: export function indentJsonString(json: string, numTabs: number = 1): string {
   28:     return json.split('\n').map(line => '\t'.repeat(numTabs) + line).join('\n').trim();
   29  }

   74  \t"pipeProgram": "${pipeProgram}",
   75: \t"pipeArgs": ${JSON.stringify(pipeArgs)},
   76  \t"pipeCwd": ""

  112          const body: string = formatString(`{
  113: \t${indentJsonString(createLaunchString(name, this.miDebugger, this.executable))},
  114  \t"MIMode": "${this.MIMode}"{0}{1}
  115  }`, [this.miDebugger === "cppdbg" && os.platform() === "win32" ? `,${os.EOL}\t"miDebuggerPath": "/path/to/gdb"` : "",
  116:             this.additionalProperties ? `,${os.EOL}\t${indentJsonString(this.additionalProperties)}` : ""]);
  117  

  130          const body: string = formatString(`{
  131: \t${indentJsonString(createAttachString(name, this.miDebugger, this.executable))},
  132  \t"MIMode": "${this.MIMode}"{0}{1}
  133  }`, [this.miDebugger === "cppdbg" && os.platform() === "win32" ? `,${os.EOL}\t"miDebuggerPath": "/path/to/gdb"` : "",
  134:             this.additionalProperties ? `,${os.EOL}\t${indentJsonString(this.additionalProperties)}` : ""]);
  135  

  152  {
  153: \t${indentJsonString(createLaunchString(name, this.miDebugger, this.executable))},
  154: \t${indentJsonString(createPipeTransportString(this.pipeProgram, this.MIMode))},
  155  \t"MIMode": "${this.MIMode}"{0}
  156: }`, [this.additionalProperties ? `,${os.EOL}\t${indentJsonString(this.additionalProperties)}` : ""]);
  157  

  171  {
  172: \t${indentJsonString(createRemoteAttachString(name, this.miDebugger, this.executable))},
  173: \t${indentJsonString(createPipeTransportString(this.pipeProgram, this.MIMode))},
  174  \t"MIMode": "${this.MIMode}"{0}
  175: }`, [this.additionalProperties ? `,${os.EOL}\t${indentJsonString(this.additionalProperties)}` : ""]);
  176          return {

  192  {
  193: \t${indentJsonString(createLaunchString(name, this.windowsDebugger, this.executable))}
  194  }`;

  210  {
  211: \t${indentJsonString(createAttachString(name, this.windowsDebugger, this.executable))}
  212  }`;

  232  {
  233: \t${indentJsonString(createLaunchString(name, this.miDebugger, this.executable))},
  234: \t${indentJsonString(createPipeTransportString(this.bashPipeProgram, this.MIMode, ["-c"]))}{0}
  235: }`, [this.additionalProperties ? `,${os.EOL}\t${indentJsonString(this.additionalProperties)}` : ""]);
  236  

  249  {
  250: \t${indentJsonString(createRemoteAttachString(name, this.miDebugger, this.executable))},
  251: \t${indentJsonString(createPipeTransportString(this.bashPipeProgram, this.MIMode, ["-c"]))}{0}
  252: }`, [this.additionalProperties ? `,${os.EOL}\t${indentJsonString(this.additionalProperties)}` : ""]);
  253  

Extension\src\Debugger\extension.ts:
   50              // Not enabled because we do not react to single-file mode correctly yet.
   51:             // We get an ENOENT when the user's c_cpp_properties.json is attempted to be parsed.
   52              // The DefaultClient will also have its configuration accessed, but since it doesn't exist it errors out.

   95                  } catch (e) {
   96:                     if (e && e.message === util.failedToParseJson) {
   97:                         vscode.window.showErrorMessage(util.failedToParseJson);
   98                      }

  131  
  132:     const launchJsonDocumentSelector: vscode.DocumentSelector = [{
  133          scheme: 'file',
  134:         language: 'jsonc',
  135:         pattern: '**/launch.json'
  136      }];

  138      // ConfigurationSnippetProvider needs to be initiallized after configurationProvider calls getConfigurationSnippets.
  139:     disposables.push(vscode.languages.registerCompletionItemProvider(launchJsonDocumentSelector, new ConfigurationSnippetProvider(configurationProvider)));
  140  

Extension\src\LanguageServer\client.ts:
   181  interface DebugProtocolParams {
   182:     jsonrpc: string;
   183      method: string;

   614      handleConfigurationEditCommand(viewColumn?: vscode.ViewColumn): void;
   615:     handleConfigurationEditJSONCommand(viewColumn?: vscode.ViewColumn): void;
   616      handleConfigurationEditUICommand(viewColumn?: vscode.ViewColumn): void;

   871                          // Only register file watchers, providers, and the real commands after the extension has finished initializing,
   872:                         // e.g. prevents empty c_cpp_properties.json from generation.
   873                          registerCommands();

  1275                  supportCuda: util.supportCuda,
  1276:                 packageVersion: util.packageJson.version
  1277              },

  1315              for (const key in cppSettingsResourceScoped) {
  1316:                 const curSetting: any = util.packageJson.contributes.configuration.properties["C_Cpp." + key];
  1317                  if (curSetting === undefined) {

  1329          // Unlike the LSP message, the event does not contain all settings as a payload, so we need to
  1330:         // build a new JSON object with everything we need on the native side.
  1331          const settings: any = {

  1366      public sendDidChangeSettings(settings: any): void {
  1367:         // Send settings json to native side
  1368          this.notifyWhenLanguageClientReady(() => {

  1504              if (!rootFolder) {
  1505:                 return; // There is no c_cpp_properties.json to edit because there is no folder open.
  1506              }

  1510                  const ask: PersistentFolderState<boolean> = new PersistentFolderState<boolean>("Client.registerProvider", true, rootFolder);
  1511:                 // If c_cpp_properties.json and settings.json are both missing, reset our prompt
  1512:                 if (!fs.existsSync(`${this.RootPath}/.vscode/c_cpp_properties.json`) && !fs.existsSync(`${this.RootPath}/.vscode/settings.json`)) {
  1513                      ask.Value = true;

  1548                  onRegistered();
  1549:                 this.configuration.updateCustomConfigurationProvider(provider.extensionId); // v0 -> v1 upgrade. Update the configurationProvider in c_cpp_properties.json
  1550              }

  1662          const header: string = `-------- Diagnostics - ${new Date().toLocaleString()}\n`;
  1663:         const version: string = `Version: ${util.packageJson.version}\n`;
  1664:         let configJson: string = "";
  1665          if (this.configuration.CurrentConfiguration) {
  1666:             configJson = `Current Configuration:\n${JSON.stringify(this.configuration.CurrentConfiguration, null, 4)}\n`;
  1667          }

  1692          }
  1693:         diagnosticsChannel.appendLine(`${header}${version}${configJson}${this.browseConfigurationLogging}${configurationLoggingStr}${response.diagnostics}`);
  1694          diagnosticsChannel.show(false);

  2159                          ui.showConfigureIncludePathMessage(async () => {
  2160:                             const configJSON: string = localize("configure.json.button", "Configure (JSON)");
  2161                              const configUI: string = localize("configure.ui.button", "Configure (UI)");

  2165                                  localize("configure.your.intellisense.settings", "Configure your IntelliSense settings to help find missing headers.");
  2166:                             return vscode.window.showInformationMessage(fallbackMsg, configJSON, configUI, dontShowAgain).then(async (value) => {
  2167                                  let commands: string[];
  2168                                  switch (value) {
  2169:                                     case configJSON:
  2170                                          commands = await vscode.commands.getCommands(true);

  2173                                          }
  2174:                                         client.handleConfigurationEditJSONCommand();
  2175:                                         telemetry.logLanguageServerEvent("SettingsCommand", { "toast": "json" }, undefined);
  2176                                          break;

  2275  
  2276:         const aCompileCommandsFile: string = localize("a.compile.commands.file", "a compile_commands.json file");
  2277          const compileCommandStr: string = params.paths.length > 1 ? aCompileCommandsFile : params.paths[0];

  2467              if (this.isSourceFileConfigurationItem(item, providerVersion)) {
  2468:                 this.configurationLogging.set(item.uri.toString(), JSON.stringify(item.configuration, null, 4));
  2469                  if (settings.loggingLevel === "Debug") {
  2470                      out.appendLine(`  uri: ${item.uri.toString()}`);
  2471:                     out.appendLine(`  config: ${JSON.stringify(item.configuration, null, 2)}`);
  2472                  }

  2489              } else {
  2490:                 console.warn("discarding invalid SourceFileConfigurationItem: " + JSON.stringify(item));
  2491              }

  2537                      sanitized = configValue;
  2538:                     console.log("Falling back to last received browse configuration: ", JSON.stringify(sanitized, null, 2));
  2539                      break;

  2546              if (!this.isWorkspaceBrowseConfiguration(sanitized)) {
  2547:                 console.log("Received an invalid browse configuration from configuration provider: " + JSON.stringify(sanitized));
  2548                  const configValue: WorkspaceBrowseConfiguration | undefined = lastCustomBrowseConfiguration.Value;

  2550                      sanitized = configValue;
  2551:                     console.log("Falling back to last received browse configuration: ", JSON.stringify(sanitized, null, 2));
  2552                      break;

  2559                  const out: logger.Logger = logger.getOutputChannelLogger();
  2560:                 out.appendLine(localize("browse.configuration.received", "Custom browse configuration received: {0}", JSON.stringify(sanitized, null, 2)));
  2561              }

  2580  
  2581:         this.browseConfigurationLogging = `Custom browse configuration: \n${JSON.stringify(sanitized, null, 4)}\n`;
  2582  

  2654  
  2655:     public handleConfigurationEditJSONCommand(viewColumn: vscode.ViewColumn = vscode.ViewColumn.Active): void {
  2656:         this.notifyWhenLanguageClientReady(() => this.configuration.handleConfigurationEditJSONCommand(undefined, vscode.window.showTextDocument, viewColumn));
  2657      }

  2879      handleConfigurationEditCommand(viewColumn?: vscode.ViewColumn): void { }
  2880:     handleConfigurationEditJSONCommand(viewColumn?: vscode.ViewColumn): void { }
  2881      handleConfigurationEditUICommand(viewColumn?: vscode.ViewColumn): void { }

Extension\src\LanguageServer\configurations.ts:
    17  import escapeStringRegExp = require('escape-string-regexp');
    18: import * as jsonc from 'comment-json';
    19  import * as nls from 'vscode-nls';

    43  
    44: function getDefaultCppProperties(): ConfigurationJson {
    45      return {

    50  
    51: export interface ConfigurationJson {
    52      configurations: Configuration[];

   119      private readonly configFolder: string;
   120:     private configurationJson?: ConfigurationJson;
   121      private currentConfigurationIndex: PersistentFolderState<number> | undefined;

   138      private defaultCustomConfigurationVariables?: { [key: string]: string };
   139:     private readonly configurationGlobPattern: string = "c_cpp_properties.json";
   140      private disposables: vscode.Disposable[] = [];

   150  
   151:     // Any time the default settings are parsed and assigned to `this.configurationJson`,
   152      // we want to track when the default includes have been added to it.

   175      public get CompileCommandsChanged(): vscode.Event<string> { return this.compileCommandsChanged.event; }
   176:     public get Configurations(): Configuration[] | undefined { return this.configurationJson ? this.configurationJson.configurations : undefined; }
   177      public get CurrentConfigurationIndex(): number { return this.currentConfigurationIndex === undefined ? 0 : this.currentConfigurationIndex.Value; }

   192          const result: string[] = [];
   193:         if (this.configurationJson) {
   194:             this.configurationJson.configurations.forEach((config: Configuration) => {
   195                  result.push(config.name);

   211  
   212:         // defaultPaths is only used when there isn't a c_cpp_properties.json, but we don't send the configuration changed event
   213          // to the language server until the default include paths and frameworks have been sent.
   214:         const configFilePath: string = path.join(this.configFolder, "c_cpp_properties.json");
   215          if (this.rootUri !== null && fs.existsSync(configFilePath)) {

   323      private resetToDefaultSettings(resetIndex: boolean): void {
   324:         this.configurationJson = getDefaultCppProperties();
   325          if (resetIndex || this.CurrentConfigurationIndex < 0 ||
   326:             this.CurrentConfigurationIndex >= this.configurationJson.configurations.length) {
   327:             const index: number | undefined = this.getConfigIndexForPlatform(this.configurationJson);
   328              if (this.currentConfigurationIndex !== undefined) {

   355          // So if a property is currently unset, but has a vscode setting, don't set it yet, otherwise the linkage
   356:         // to the setting will be lost if this configuration is saved into a c_cpp_properties.json file.
   357  

   380              (isUnset(settings.defaultCompileCommands) || settings.defaultCompileCommands === "") && !configuration.compileCommands) {
   381:             // compile_commands.json already specifies a compiler. compilerPath overrides the compile_commands.json compiler so
   382              // don't set a default when compileCommands is in use.

   400          const result: Environment = {};
   401:         if (this.configurationJson?.env) {
   402:             Object.assign(result, this.configurationJson.env);
   403          }

   444          let pdjFound: boolean = false;
   445:         let packageJson: any;
   446          try {
   447:             packageJson = JSON.parse(await fs.promises.readFile(path.join(rootPath, "package.json"), "utf8"));
   448              pdjFound = true;

   469                  for (const [dep, execCmd] of nodeAddonMap) {
   470:                     if (dep in packageJson.dependencies) {
   471                          try {

   509              if (pdjFound) {
   510:                 // only log an error if package.json exists.
   511                  console.log('readNodeAddonIncludeLocations', error.message);

   518      private getConfigIndexForPlatform(config: any): number | undefined {
   519:         if (!this.configurationJson) {
   520              return undefined;

   529          }
   530:         for (let i: number = 0; i < this.configurationJson.configurations.length; i++) {
   531              if (config.configurations[i].name === plat) {

   534          }
   535:         return this.configurationJson.configurations.length - 1;
   536      }

   590                  config.includePath.splice(config.includePath.length, 0, path);
   591:                 this.writeToJson();
   592                  this.handleConfigurationChange();

   599              if (this.propertiesFile) {
   600:                 this.handleConfigurationEditJSONCommand(() => {
   601                      this.parsePropertiesFile(); // Clear out any modifications we may have made internally.

   608                          }
   609:                         this.writeToJson();
   610                          this.handleConfigurationChange();

   630      public setCompileCommands(path: string): void {
   631:         this.handleConfigurationEditJSONCommand(() => {
   632              this.parsePropertiesFile(); // Clear out any modifications we may have made internally.

   635                  config.compileCommands = path;
   636:                 this.writeToJson();
   637                  this.handleConfigurationChange();

   642      public select(index: number): Configuration | undefined {
   643:         if (this.configurationJson) {
   644:             if (index === this.configurationJson.configurations.length) {
   645                  this.handleConfigurationEditUICommand(() => {}, vscode.window.showTextDocument);

   647              }
   648:             if (index === this.configurationJson.configurations.length + 1) {
   649:                 this.handleConfigurationEditJSONCommand(() => {}, vscode.window.showTextDocument);
   650                  return;

   663              if (entry === "${default}") {
   664:                 // package.json default values for string[] properties is null.
   665                  // If no default is set, return an empty array instead of an array with `null` in it.

   749      private updateServerOnFolderSettingsChange(): void {
   750:         if (!this.configurationJson) {
   751              return;

   755          const env: Environment = this.ExtendedEnvironment;
   756:         for (let i: number = 0; i < this.configurationJson.configurations.length; i++) {
   757:             const configuration: Configuration = this.configurationJson.configurations[i];
   758  

   779              if (!configuration.compileCommands) {
   780:                 // compile_commands.json already specifies a compiler. compilerPath overrides the compile_commands.json compiler so
   781                  // don't set a default when compileCommands is in use.

   852              if (i === this.CurrentConfigurationIndex) {
   853:                 // If there is no c_cpp_properties.json, there are no relevant C_Cpp.default.* settings set,
   854                  // and there is only 1 registered custom config provider, default to using that provider.

   905      public updateCompileCommandsFileWatchers(): void {
   906:         if (this.configurationJson) {
   907              this.compileCommandsFileWatchers.forEach((watcher: fs.FSWatcher) => watcher.close());

   909              const filePaths: Set<string> = new Set<string>();
   910:             this.configurationJson.configurations.forEach(c => {
   911                  if (c.compileCommands) {

   944  
   945:     // onBeforeOpen will be called after c_cpp_properties.json have been created (if it did not exist), but before the document is opened.
   946      public handleConfigurationEditCommand(onBeforeOpen: (() => void) | undefined, showDocument: (document: vscode.TextDocument, column?: vscode.ViewColumn) => void, viewColumn?: vscode.ViewColumn): void {

   950          } else {
   951:             this.handleConfigurationEditJSONCommand(onBeforeOpen, showDocument, viewColumn);
   952          }

   954  
   955:     // onBeforeOpen will be called after c_cpp_properties.json have been created (if it did not exist), but before the document is opened.
   956:     public async handleConfigurationEditJSONCommand(onBeforeOpen: (() => void) | undefined, showDocument: (document: vscode.TextDocument, column?: vscode.ViewColumn) => void, viewColumn?: vscode.ViewColumn): Promise<void> {
   957          await this.ensurePropertiesFile();

   961          }
   962:         // Directly open the json file
   963          if (this.propertiesFile) {

   987  
   988:     // onBeforeOpen will be called after c_cpp_properties.json have been created (if it did not exist), but before the document is opened.
   989      public async handleConfigurationEditUICommand(onBeforeOpen: (() => void) | undefined, showDocument: (document: vscode.TextDocument, column?: vscode.ViewColumn) => void, viewColumn?: vscode.ViewColumn): Promise<void> {

   998                      const configNames: string[] | undefined = this.ConfigurationNames;
   999:                     if (configNames && this.configurationJson) {
  1000                          // Use the active configuration as the default selected configuration to load on UI editor

  1002                          this.settingsPanel.createOrShow(configNames,
  1003:                             this.configurationJson.configurations[this.settingsPanel.selectedConfigIndex],
  1004                              this.getErrorsForConfigUI(this.settingsPanel.selectedConfigIndex),

  1008              } else {
  1009:                 // Parse failed, open json file
  1010                  const document: vscode.TextDocument = await vscode.workspace.openTextDocument(this.propertiesFile);

  1018      private async onSettingsPanelActivated(): Promise<void> {
  1019:         if (this.configurationJson) {
  1020              await this.ensurePropertiesFile();

  1023                      const configNames: string[] | undefined = this.ConfigurationNames;
  1024:                     if (configNames && this.settingsPanel && this.configurationJson) {
  1025                          // The settings UI became visible or active.
  1026                          // Ensure settingsPanel has copy of latest current configuration
  1027:                         if (this.settingsPanel.selectedConfigIndex >= this.configurationJson.configurations.length) {
  1028                              this.settingsPanel.selectedConfigIndex = this.CurrentConfigurationIndex;

  1030                          this.settingsPanel.updateConfigUI(configNames,
  1031:                             this.configurationJson.configurations[this.settingsPanel.selectedConfigIndex],
  1032                              this.getErrorsForConfigUI(this.settingsPanel.selectedConfigIndex));
  1033                      } else {
  1034:                         // Parse failed, open json file
  1035                          vscode.workspace.openTextDocument(this.propertiesFile);

  1043          this.parsePropertiesFile(); // Clear out any modifications we may have made internally.
  1044:         if (this.settingsPanel && this.configurationJson) {
  1045              const config: Configuration = this.settingsPanel.getLastValuesFromConfigUI();
  1046:             this.configurationJson.configurations[this.settingsPanel.selectedConfigIndex] = config;
  1047              this.settingsPanel.updateErrors(this.getErrorsForConfigUI(this.settingsPanel.selectedConfigIndex));
  1048:             this.writeToJson();
  1049          }

  1053          const configNames: string[] | undefined = this.ConfigurationNames;
  1054:         if (configNames && this.settingsPanel && this.configurationJson) {
  1055              this.settingsPanel.updateConfigUI(configNames,
  1056:                 this.configurationJson.configurations[this.settingsPanel.selectedConfigIndex],
  1057                  this.getErrorsForConfigUI(this.settingsPanel.selectedConfigIndex));

  1067          const configNames: string[] | undefined = this.ConfigurationNames;
  1068:         if (configNames && this.settingsPanel && this.configurationJson) {
  1069:             this.configurationJson.configurations.push(newConfig);
  1070  
  1071              // Update UI
  1072:             this.settingsPanel.selectedConfigIndex = this.configurationJson.configurations.length - 1;
  1073              this.settingsPanel.updateConfigUI(configNames,
  1074:                 this.configurationJson.configurations[this.settingsPanel.selectedConfigIndex],
  1075                  null);

  1077              // Save new config to file
  1078:             this.writeToJson();
  1079          }

  1088              this.parsePropertiesFile();
  1089:             // parsePropertiesFile can fail, but it won't overwrite an existing configurationJson in the event of failure.
  1090:             // this.configurationJson should only be undefined here if we have never successfully parsed the propertiesFile.
  1091:             if (this.configurationJson) {
  1092                  if (this.CurrentConfigurationIndex < 0 ||
  1093:                     this.CurrentConfigurationIndex >= this.configurationJson.configurations.length) {
  1094                      // If the index is out of bounds (during initialization or due to removal of configs), fix it.
  1095:                     const index: number | undefined = this.getConfigIndexForPlatform(this.configurationJson);
  1096                      if (this.currentConfigurationIndex !== undefined) {

  1106  
  1107:         if (!this.configurationJson) {
  1108              this.resetToDefaultSettings(true);  // I don't think there's a case where this will be hit anymore.

  1123  
  1124:                 const fullPathToFile: string = path.join(this.configFolder, "c_cpp_properties.json");
  1125                  // Since the properties files does not exist, there will be exactly 1 configuration.

  1128                  let providerId: string | undefined = settings.defaultConfigurationProvider;
  1129:                 if (this.configurationJson) {
  1130                      if (!providerId) {
  1131:                         providerId = this.configurationJson.configurations[0].configurationProvider;
  1132                      }

  1136                  if (providerId) {
  1137:                     if (this.configurationJson) {
  1138:                         this.configurationJson.configurations[0].configurationProvider = providerId;
  1139                      }

  1141  
  1142:                 await util.writeFileText(fullPathToFile, jsonc.stringify(this.configurationJson, null, 4));
  1143  
  1144:                 this.propertiesFile = vscode.Uri.file(path.join(this.configFolder, "c_cpp_properties.json"));
  1145  

  1165              // Try to use the same configuration as before the change.
  1166:             const newJson: ConfigurationJson = jsonc.parse(readResults);
  1167:             if (!newJson || !newJson.configurations || newJson.configurations.length === 0) {
  1168                  throw { message: localize("invalid.configuration.file", "Invalid configuration file. There must be at least one configuration present in the array.") };
  1169              }
  1170:             if (!this.configurationIncomplete && this.configurationJson && this.configurationJson.configurations &&
  1171:                 this.CurrentConfigurationIndex >= 0 && this.CurrentConfigurationIndex < this.configurationJson.configurations.length) {
  1172:                 for (let i: number = 0; i < newJson.configurations.length; i++) {
  1173:                     if (newJson.configurations[i].name === this.configurationJson.configurations[this.CurrentConfigurationIndex].name) {
  1174                          if (this.currentConfigurationIndex !== undefined) {

  1180              }
  1181:             this.configurationJson = newJson;
  1182:             if (this.CurrentConfigurationIndex < 0 || this.CurrentConfigurationIndex >= newJson.configurations.length) {
  1183:                 const index: number | undefined = this.getConfigIndexForPlatform(newJson);
  1184                  if (this.currentConfigurationIndex !== undefined) {

  1193              let dirty: boolean = false;
  1194:             for (let i: number = 0; i < this.configurationJson.configurations.length; i++) {
  1195:                 const newId: string | undefined = getCustomConfigProviders().checkId(this.configurationJson.configurations[i].configurationProvider);
  1196:                 if (newId !== this.configurationJson.configurations[i].configurationProvider) {
  1197                      dirty = true;
  1198:                     this.configurationJson.configurations[i].configurationProvider = newId;
  1199                  }

  1202              // Remove disallowed variable overrides
  1203:             if (this.configurationJson.env) {
  1204:                 delete this.configurationJson.env['workspaceRoot'];
  1205:                 delete this.configurationJson.env['workspaceFolder'];
  1206:                 delete this.configurationJson.env['workspaceFolderBasename'];
  1207:                 delete this.configurationJson.env['default'];
  1208              }
  1209  
  1210:             // Warning: There is a chance that this is incorrect in the event that the c_cpp_properties.json file was created before
  1211              // the system includes were available.

  1213  
  1214:             if (this.configurationJson.version !== configVersion) {
  1215                  dirty = true;
  1216:                 if (this.configurationJson.version === undefined) {
  1217                      this.updateToVersion2();

  1219  
  1220:                 if (this.configurationJson.version === 2) {
  1221                      this.updateToVersion3();

  1223  
  1224:                 if (this.configurationJson.version === 3) {
  1225                      this.updateToVersion4();
  1226                  } else {
  1227:                     this.configurationJson.version = configVersion;
  1228:                     vscode.window.showErrorMessage(localize("unknown.properties.version", 'Unknown version number found in c_cpp_properties.json. Some features may not work as expected.'));
  1229                  }

  1231  
  1232:             this.configurationJson.configurations.forEach(e => {
  1233                  if ((<any>e).knownCompilers !== undefined) {

  1238  
  1239:             for (let i: number = 0; i < this.configurationJson.configurations.length; i++) {
  1240:                 if ((this.configurationJson.configurations[i].compilerPathIsExplicit !== undefined)
  1241:                     || (this.configurationJson.configurations[i].cStandardIsExplicit !== undefined)
  1242:                     || (this.configurationJson.configurations[i].cppStandardIsExplicit !== undefined)
  1243:                     || (this.configurationJson.configurations[i].intelliSenseModeIsExplicit !== undefined)) {
  1244                      dirty = true;

  1250                  try {
  1251:                     this.writeToJson();
  1252                  } catch (err) {

  1258  
  1259:             this.configurationJson.configurations.forEach(e => {
  1260                  e.compilerPathIsExplicit = e.compilerPath !== undefined;

  1319          const errors: ConfigurationErrors = {};
  1320:         if (!this.configurationJson) {
  1321              return errors;

  1323          const isWindows: boolean = os.platform() === 'win32';
  1324:         const config: Configuration = this.configurationJson.configurations[configIndex];
  1325  

  1493          // Disable squiggles if
  1494:         // this.configurationJson.enableConfigurationSquiggles is false OR
  1495:         // this.configurationJson.enableConfigurationSquiggles is undefined and settings.defaultEnableConfigurationSquiggles is false.
  1496          const settings: CppSettings = new CppSettings(this.rootUri);
  1497:         if (!this.configurationJson) {
  1498              return;
  1499          }
  1500:         if ((this.configurationJson.enableConfigurationSquiggles !== undefined && !this.configurationJson.enableConfigurationSquiggles) ||
  1501:             (this.configurationJson.enableConfigurationSquiggles === undefined && !settings.defaultEnableConfigurationSquiggles)) {
  1502              this.diagnosticCollection.clear();

  1511              // Replace all \<escape character> with \\<character>, except for \"
  1512:             // Otherwise, the JSON.parse result will have the \<escape character> missing.
  1513              const configurationsText: string = util.escapeForSquiggles(curText);
  1514:             const configurations: ConfigurationJson = jsonc.parse(configurationsText);
  1515              const currentConfiguration: Configuration = configurations.configurations[this.CurrentConfigurationIndex];

  1833      private updateToVersion2(): void {
  1834:         if (this.configurationJson) {
  1835:             this.configurationJson.version = 2;
  1836              // no-op. We don't automatically populate the browse.path anymore.

  1841      private updateToVersion3(): void {
  1842:         if (this.configurationJson) {
  1843:             this.configurationJson.version = 3;
  1844:             for (let i: number = 0; i < this.configurationJson.configurations.length; i++) {
  1845:                 const config: Configuration = this.configurationJson.configurations[i];
  1846                  // Look for Mac configs and extra configs on Mac systems

  1859      private updateToVersion4(): void {
  1860:         if (this.configurationJson) {
  1861:             this.configurationJson.version = 4;
  1862              // Update intelliSenseMode, compilerPath, cStandard, and cppStandard with the defaults if they're missing.
  1863:             // If VS Code settings exist for these properties, don't add them to c_cpp_properties.json
  1864              const settings: CppSettings = new CppSettings(this.rootUri);
  1865:             for (let i: number = 0; i < this.configurationJson.configurations.length; i++) {
  1866:                 const config: Configuration = this.configurationJson.configurations[i];
  1867  

  1884  
  1885:     private writeToJson(): void {
  1886          // Set aside IsExplicit values, and restore them after writing.

  1891  
  1892:         if (this.configurationJson) {
  1893:             this.configurationJson.configurations.forEach(e => {
  1894                  savedCompilerPathIsExplicit.push(!!e.compilerPathIsExplicit);

  1914          if (this.propertiesFile) {
  1915:             fs.writeFileSync(this.propertiesFile.fsPath, jsonc.stringify(this.configurationJson, null, 4));
  1916          }
  1917  
  1918:         if (this.configurationJson) {
  1919:             for (let i: number = 0; i < this.configurationJson.configurations.length; i++) {
  1920:                 this.configurationJson.configurations[i].compilerPathIsExplicit = savedCompilerPathIsExplicit[i];
  1921:                 this.configurationJson.configurations[i].cStandardIsExplicit = savedCStandardIsExplicit[i];
  1922:                 this.configurationJson.configurations[i].cppStandardIsExplicit = savedCppStandardIsExplicit[i];
  1923:                 this.configurationJson.configurations[i].intelliSenseModeIsExplicit = savedIntelliSenseModeIsExplicit[i];
  1924              }

  1929          // Check for change properties in case of file watcher failure.
  1930:         const propertiesFile: string = path.join(this.configFolder, "c_cpp_properties.json");
  1931          fs.stat(propertiesFile, (err, stats) => {

Extension\src\LanguageServer\cppBuildTaskProvider.ts:
   24      type: string;
   25:     label: string; // The label appears in tasks.json file.
   26      command: string;

  209  
  210:     public async getJsonTasks(): Promise<CppBuildTask[]> {
  211:         const rawJson: any = await this.getRawTasksJson();
  212:         const rawTasksJson: any = (!rawJson.tasks) ? new Array() : rawJson.tasks;
  213:         const buildTasksJson: CppBuildTask[] = rawTasksJson.map((task: any) => {
  214              if (!task.label) {

  227          });
  228:         return buildTasksJson.filter((task: CppBuildTask) => task !== null);
  229      }

  231      public async ensureBuildTaskExists(taskLabel: string): Promise<void> {
  232:         const rawTasksJson: any = await this.getRawTasksJson();
  233:         if (!rawTasksJson.tasks) {
  234:             rawTasksJson.tasks = new Array();
  235          }
  236:         // Ensure that the task exists in the user's task.json. Task will not be found otherwise.
  237:         let selectedTask: any = rawTasksJson.tasks.find((task: any) => task.label && task.label === taskLabel);
  238          if (selectedTask) {

  252          }
  253:         rawTasksJson.version = "2.0.0";
  254  
  255          // Modify the current default task
  256:         rawTasksJson.tasks.forEach((task: any) => {
  257              if (task.label === selectedTask?.definition.label) {

  263  
  264:         if (!rawTasksJson.tasks.find((task: any) => task.label === selectedTask?.definition.label)) {
  265              const newTask: any = {

  270              };
  271:             rawTasksJson.tasks.push(newTask);
  272          }

  274          const settings: OtherSettings = new OtherSettings();
  275:         const tasksJsonPath: string | undefined = this.getTasksJsonPath();
  276:         if (!tasksJsonPath) {
  277:             throw new Error("Failed to get tasksJsonPath in ensureBuildTaskExists()");
  278          }
  279  
  280:         await util.writeFileText(tasksJsonPath, JSON.stringify(rawTasksJson, null, settings.editorTabSize));
  281      }

  283      public async ensureDebugConfigExists(configName: string): Promise<void> {
  284:         const launchJsonPath: string | undefined = this.getLaunchJsonPath();
  285:         if (!launchJsonPath) {
  286:             throw new Error("Failed to get launchJsonPath in ensureDebugConfigExists()");
  287          }
  288  
  289:         const rawLaunchJson: any = await this.getRawLaunchJson();
  290:         // Ensure that the debug configurations exists in the user's launch.json. Config will not be found otherwise.
  291:         if (!rawLaunchJson || !rawLaunchJson.configurations) {
  292:             throw new Error(`Configuration '${configName}' is missing in 'launch.json'.`);
  293          }
  294:         const selectedConfig: any | undefined = rawLaunchJson.configurations.find((config: any) => config.name && config.name === configName);
  295          if (!selectedConfig) {
  296:             throw new Error(`Configuration '${configName}' is missing in 'launch.json'.`);
  297          }

  300  
  301:     // Provide a unique name for a newly defined tasks, which is different from tasks' names in tasks.json.
  302:     public provideUniqueTaskLabel(label: string, buildTasksJson: CppBuildTask[]): string {
  303          const taskNameDictionary: {[key: string]: any} = {};
  304:         buildTasksJson.forEach(task => {
  305              taskNameDictionary[task.definition.label] = {};

  317  
  318:     private getLaunchJsonPath(): string | undefined {
  319:         return util.getJsonPath("launch.json");
  320      }
  321  
  322:     private getTasksJsonPath(): string | undefined {
  323:         return util.getJsonPath("tasks.json");
  324      }
  325  
  326:     public getRawLaunchJson(): Promise<any> {
  327:         const path: string | undefined = this.getLaunchJsonPath();
  328:         return util.getRawJson(path);
  329      }
  330  
  331:     public getRawTasksJson(): Promise<any> {
  332:         const path: string | undefined = this.getTasksJsonPath();
  333:         return util.getRawJson(path);
  334      }

Extension\src\LanguageServer\extension.ts:
  170  
  171:     // handle "workspaceContains:/.vscode/c_cpp_properties.json" activation event.
  172      let cppPropertiesExists: boolean = false;

  174          for (let i: number = 0; i < vscode.workspace.workspaceFolders.length; ++i) {
  175:             const config: string = path.join(vscode.workspace.workspaceFolders[i].uri.fsPath, ".vscode/c_cpp_properties.json");
  176              if (await util.checkFileExists(config)) {

  178                  const doc: vscode.TextDocument = await vscode.workspace.openTextDocument(config);
  179:                 vscode.languages.setTextDocumentLanguage(doc, "jsonc");
  180              }

  291          sendActivationTelemetry();
  292:         const checkForConflictingExtensions: PersistentState<boolean> = new PersistentState<boolean>("CPP." + util.packageJson.version + ".checkForConflictingExtensions", true);
  293          if (checkForConflictingExtensions.Value) {

  345                      if (settings.updateChannel === 'Default') {
  346:                         const userVersion: PackageVersion = new PackageVersion(util.packageJson.version);
  347                          if (userVersion.suffix === "insiders") {

  727  /**
  728:  * Query package.json and the GitHub API to determine whether the user should update, if so then install the update.
  729   * The update can be an upgrade or downgrade depending on the the updateChannel setting.

  767      disposables.push(vscode.commands.registerCommand('C_Cpp.ConfigurationProviderSelect', onSelectConfigurationProvider));
  768:     disposables.push(vscode.commands.registerCommand('C_Cpp.ConfigurationEditJSON', onEditConfigurationJSON));
  769      disposables.push(vscode.commands.registerCommand('C_Cpp.ConfigurationEditUI', onEditConfigurationUI));

  886  
  887: function onEditConfigurationJSON(viewColumn: vscode.ViewColumn = vscode.ViewColumn.Active): void {
  888      onActivationEvent();
  889:     telemetry.logLanguageServerEvent("SettingsCommand", { "palette": "json" }, undefined);
  890      if (!isFolderOpen()) {

  892      } else {
  893:         selectClient().then(client => client.handleConfigurationEditJSONCommand(viewColumn), rejected => {});
  894      }

Extension\src\LanguageServer\settings.ts:
  189      public get vcFormatIndentMultiLineRelativeTo(): string {
  190:         // These strings have default values in package.json, so should never be undefined.
  191          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  195      public get vcFormatIndentWithinParentheses(): string {
  196:         // These strings have default values in package.json, so should never be undefined.
  197          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  221      public get vcFormatIndentGotoLables(): string {
  222:         // These strings have default values in package.json, so should never be undefined.
  223          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  227      public get vcFormatIndentPreprocessor(): string {
  228:         // These strings have default values in package.json, so should never be undefined.
  229          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  245      public get vcFormatNewlineBeforeOpenBraceNamespace(): string {
  246:         // These strings have default values in package.json, so should never be undefined.
  247          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  251      public get vcFormatNewlineBeforeOpenBraceType(): string {
  252:         // These strings have default values in package.json, so should never be undefined.
  253          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  257      public get vcFormatNewlineBeforeOpenBraceFunction(): string {
  258:         // These strings have default values in package.json, so should never be undefined.
  259          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  263      public get vcFormatNewlineBeforeOpenBraceBlock(): string {
  264:         // These strings have default values in package.json, so should never be undefined.
  265          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  269      public get vcFormatNewlineBeforeOpenBraceLambda(): string {
  270:         // These strings have default values in package.json, so should never be undefined.
  271          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  299      public get vcFormatSpaceBeforeFunctionOpenParenthesis(): string {
  300:         // These strings have default values in package.json, so should never be undefined.
  301          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  417      public get vcFormatSpaceAroundBinaryOperator(): string {
  418:         // These strings have default values in package.json, so should never be undefined.
  419          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  423      public get vcFormatSpaceAroundAssignmentOperator(): string {
  424:         // These strings have default values in package.json, so should never be undefined.
  425          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  429      public get vcFormatSpacePointerReferenceAlignment(): string {
  430:         // These strings have default values in package.json, so should never be undefined.
  431          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  435      public get vcFormatSpaceAroundTernaryOperator(): string {
  436:         // These strings have default values in package.json, so should never be undefined.
  437          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  441      public get vcFormatWrapPreserveBlocks(): string {
  442:         // These strings have default values in package.json, so should never be undefined.
  443          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

Extension\src\LanguageServer\settingsTracker.ts:
   44          for (const key in settingsResourceScope) {
   45:             const rawSetting: any = util.packageJson.contributes.configuration.properties["C_Cpp." + key];
   46              const correctlyScopedSettings: vscode.WorkspaceConfiguration = selectCorrectlyScopedSettings(rawSetting);

   59                      const newKey: string = key + "." + subKey;
   60:                     const newRawSetting: any = util.packageJson.contributes.configuration.properties["C_Cpp." + newKey];
   61                      const correctlyScopedSubSettings: vscode.WorkspaceConfiguration = selectCorrectlyScopedSettings(newRawSetting);

   98              // Only return values that match the setting's type and enum (if applicable).
   99:             const curSetting: any = util.packageJson.contributes.configuration.properties["C_Cpp." + key];
  100              if (curSetting) {

  196          if (value1 instanceof Object && value2 instanceof Object) {
  197:             return JSON.stringify(value1) === JSON.stringify(value2);
  198          }

Extension\src\LanguageServer\ui.ts:
  166  
  167:             let isCppPropertiesJson: boolean = false;
  168:             if (activeEditor.document.languageId === "json" || activeEditor.document.languageId === "jsonc") {
  169:                 isCppPropertiesJson = activeEditor.document.fileName.endsWith("c_cpp_properties.json");
  170:                 if (isCppPropertiesJson) {
  171:                     vscode.languages.setTextDocumentLanguage(activeEditor.document, "jsonc");
  172                  }

  176              // TODO: Check some "AlwaysShow" setting here.
  177:             this.ShowConfiguration = isCpp || isCppPropertiesJson ||
  178                  activeEditor.document.uri.scheme === "output" ||
  179:                 activeEditor.document.fileName.endsWith("settings.json") ||
  180:                 activeEditor.document.fileName.endsWith("tasks.json") ||
  181:                 activeEditor.document.fileName.endsWith("launch.json") ||
  182                  activeEditor.document.fileName.endsWith(".code-workspace");

  202          items.push({ label: localize("edit.configuration.ui", "Edit Configurations (UI)"), description: "", index: configurationNames.length });
  203:         items.push({ label: localize("edit.configuration.json", "Edit Configurations (JSON)"), description: "", index: configurationNames.length + 1 });
  204  

  229          const options: vscode.QuickPickOptions = {};
  230:         options.placeHolder = localize("select.compile.commands", "Select a compile_commands.json...");
  231  

Extension\test\.eslintrc.js:
  2      "parserOptions": {
  3:         "project": "test.tsconfig.json",
  4          "sourceType": "module"

Extension\test\integrationTests\debug\integration.test.ts:
  20      test("Starting (gdb) Launch from the workspace root should create an Active Debug Session", async () => {
  21:         // If it is failing on startDebugging. Investigate the SimpleCppProject's tasks.json or launch.json.
  22          await vscode.debug.startDebugging(vscode.workspace.workspaceFolders[0], "(gdb) Launch");

Extension\test\integrationTests\debug\runTest.ts:
  6      try {
  7:         // The folder containing the Extension Manifest package.json
  8          // Passed to `--extensionDevelopmentPath`

Extension\test\integrationTests\IntelliSenseFeatures\runTest.ts:
   6      try {
   7:         // The folder containing the Extension Manifest package.json
   8          // Passed to `--extensionDevelopmentPath`

  15          // Note, when running tests locally, replace testWorkspace with local path to "~/Vcls-vscode-test/SingleRootProject"
  16:         // in the Launch.json file.
  17          let testWorkspace: string | undefined = process.env.TESTS_WORKSPACE;

Extension\test\integrationTests\languageServer\languageServer.integration.test.ts:
   83  function cppPropertiesPath(): string {
   84:     return vscode.workspace.workspaceFolders[0].uri.fsPath + "/.vscode/c_cpp_properties.json";
   85  }
   86  
   87: async function changeCppProperties(cppProperties: config.ConfigurationJson, disposables: vscode.Disposable[]): Promise<void> {
   88:     await util.writeFileText(cppPropertiesPath(), JSON.stringify(cppProperties));
   89      const contents: string = await util.readFileText(cppPropertiesPath());
   90:     console.log("    wrote c_cpp_properties.json: " + contents);
   91  

  458      suiteTeardown(async function() {
  459:         // Delete c_cpp_properties.json
  460      });

  472              assert.deepEqual(configurations[0], defaultConfig);
  473:             console.log(JSON.stringify(configurations, null, 2));
  474  

Extension\test\integrationTests\languageServer\runTest.ts:
  6      try {
  7:         // The folder containing the Extension Manifest package.json
  8          // Passed to `--extensionDevelopmentPath`

Extension\test\unitTests\common.test.ts:
  243                      const actual: string = resolveVariables(input, additionalEnvironment);
  244:                     const msg: string = `Expected ${expected}. Got ${actual} with input ${input} and environment ${JSON.stringify(additionalEnvironment)}.`;
  245                      assert.equal(actual, expected, msg);

Extension\test\unitTests\runTest.ts:
  6      try {
  7:         // The folder containing the Extension Manifest package.json
  8          // Passed to `--extensionDevelopmentPath`

Extension\tools\.eslintrc.js:
  2      "parserOptions": {
  3:         "project": "test.tsconfig.json",
  4          "sourceType": "module"

Extension\tools\copyDebuggerDependencies.ts:
   87  function copySourceDependencies(): void {
   88:     copy("./", DebugAdapterBinPath, "cppdbg.ad7Engine.json");
   89  }

  131      copy(openDebugRoot, DebugAdapterBinPath, "OpenDebugAD7.exe.mdb");
  132:     copy(openDebugRoot, DebugAdapterBinPath, "Newtonsoft.Json.dll");
  133      copy(openDebugRoot, DebugAdapterBinPath, "WindowsDebugLauncher.exe");

Extension\tools\GenerateOptionsSchema.ts:
   66      // Need to deep copy, there are no functions in these objects.
   67:     const reference: any = JSON.parse(JSON.stringify(definitions[referenceName]));
   68  

  116  function generateOptionsSchema(): void {
  117:     const packageJSON: any = JSON.parse(fs.readFileSync('package.json').toString());
  118:     const schemaJSON: any = JSON.parse(fs.readFileSync('tools/OptionsSchema.json').toString());
  119:     let symbolSettingsJSON: any = JSON.parse(fs.readFileSync('tools/VSSymbolSettings.json').toString());
  120  
  121:     mergeReferences(schemaJSON.definitions, symbolSettingsJSON.definitions);
  122  
  123:     schemaJSON.definitions = replaceReferences(schemaJSON.definitions, schemaJSON.definitions);
  124  

  126      // cppdbg
  127:     packageJSON.contributes.debuggers[0].configurationAttributes.launch = schemaJSON.definitions.CppdbgLaunchOptions;
  128:     packageJSON.contributes.debuggers[0].configurationAttributes.attach = schemaJSON.definitions.CppdbgAttachOptions;
  129  
  130      // cppvsdbg
  131:     packageJSON.contributes.debuggers[1].configurationAttributes.launch = schemaJSON.definitions.CppvsdbgLaunchOptions;
  132:     packageJSON.contributes.debuggers[1].configurationAttributes.attach = schemaJSON.definitions.CppvsdbgAttachOptions;
  133  
  134:     let content: string = JSON.stringify(packageJSON, null, 2);
  135      if (os.platform() === 'win32') {

  142  
  143:     fs.writeFileSync('package.json', content);
  144  }

Extension\tools\link-binaries:
  87  # Link dependencies
  88: link_files ${EXTENSION_BIN} ${OPENDEBUG_PATH}/out/Desktop.Debug Newtonsoft.Json.dll
  89  link_files ${EXTENSION_BIN} ${MIENGINE_PATH}/bin/Desktop.Debug Microsoft.VisualStudio.Debugger.Interop.10.0.dll Microsoft.VisualStudio.Debugger.Interop.11.0.dll Microsoft.VisualStudio.Debugger.Interop.12.0.dll Microsoft.VisualStudio.Debugger.InteropA.dll
  90  
  91: # Link engine JSON to real assembly location
  92: if [ ! -e ${OPENDEBUG_PATH}/out/Desktop.Debug/cppdbg.ad7Engine.json ] ; then
  93:     link_files ${OPENDEBUG_PATH}/out/Desktop.Debug ${EXTENSION_BIN} cppdbg.ad7Engine.json
  94  fi

Extension\tools\OptionsSchema.json:
  2    "_comment": "See README.md for information about this file",
  3:   "$schema": "http://json-schema.org/draft-04/schema#",
  4    "title": "VS Code launch/attach options",
  5:   "description": "A json schema for the VS Code attach and launch options",
  6    "type": "object",

Extension\tools\prepublish.js:
  36  // If the required debugger file doesn't exist, make sure it is copied.
  37: if (process.env.CPPTOOLS_DEV || !fs.existsSync('./debugAdapters/bin/cppdbg.ad7Engine.json')) {
  38      const copyDebuggerDependenciesJSFile = './out/tools/copyDebuggerDependencies.js';

Extension\tools\README.md:
   1  # OptionsSchema
   2: OptionsSchema.json defines the type for Launch/Attach options.
   3  
   4  # GenerateOptionsSchema
   5: If there are any modifications to the OptionsSchema.json file. Please run `yarn run generateOptionsSchema` at the repo root.
   6: This will call GenerateOptionsSchema and update the package.json file.
   7  

   9  
  10: 1. Any manual changes to package.json's object.contributes.debuggers[0].configurationAttributes (cppdbg) or object.contributes.debuggers[0].configurationAttributes (cppvsdbg) will be
  11  replaced by this generator.

  13  If there is any other type of options added in the future, you will need to modify the GenerateOptionsSchema function
  14: to have it appear in package.json. It only adds launch and attach.

Extension\tools\VSSymbolSettings.json:
  1  {
  2:     "$schema": "http://json-schema.org/draft-04/schema#",
  3    

Extension\ui\.eslintrc.js:
  2      "parserOptions": {
  3:         "project": "test.tsconfig.json",
  4          "sourceType": "module"

Extension\ui\settings.html:
  423  
  424:         <span data-loc-id="switch.to.json">Switch to the <a href="command:C_Cpp.ConfigurationEditJSON" title="Edit configurations in JSON file" data-loc-id-title="edit.configurations.in.json">c_cpp_properties.json</a> file by clicking on the file link or using the command:</span><br> 
  425:         <code data-loc-id="edit.configurations.json">C/C++: Edit configurations (JSON)</code>
  426  

  440        <div style="color: var(--vscode-foreground);">
  441:         <span data-loc-id="intellisense.configurations.description">Use this editor to edit IntelliSense settings defined in the underlying <a href="command:C_Cpp.ConfigurationEditJSON" title="Edit configurations in JSON file" data-loc-id-title="edit.configurations.in.json">c_cpp_properties.json</a> file. Changes made in this editor only apply to the selected configuration. To edit multiple configurations at once go to <a href="command:C_Cpp.ConfigurationEditJSON" title="Edit configurations in JSON file" data-loc-id-title="edit.configurations.in.json">c_cpp_properties.json</a>.</span>
  442        </div>

  661              <div class="section-text">
  662:                 <span data-loc-id="compile.commands.description">The full path to the <code>compile_commands.json</code> file for the workspace. The include paths and defines discovered in this file will be used instead of the values set for <code>includePath</code> and <code>defines</code> settings. If the compile commands database does not contain an entry for the translation unit that corresponds to the file you opened in the editor, then a warning message will appear and the extension will use the <code>includePath</code> and <code>defines</code> settings instead.</span>
  663              </div>

Extension\ui\settings.ts:
  233      private onMessageReceived(e: MessageEvent): void {
  234:         const message: any = e.data; // The json data that the extension sent
  235          switch (message.command) {

Extension\walkthrough\debugconfig\run-and-debug-project-linux.md:
  12  
  13: After running and debugging your C++ file for the first time, you'll notice two new files inside your project's **.vscode** folder: **tasks.json** and **launch.json**.
  14  
  15: For more complex build and debug scenarios, you can customize your build tasks and debug configurations in tasks.json and launch.json. For example, if you normally pass arguments to your compiler when building from the command line, you can specify those arguments in tasks.json using the **compilerArgs** property. Similarly, you can define arguments to pass to your program for debugging in launch.json.

Extension\walkthrough\debugconfig\run-and-debug-project-mac.md:
  12  
  13: After running and debugging your C++ file for the first time, you'll notice two new files inside your project's **.vscode** folder: **tasks.json** and **launch.json**.
  14  
  15: For more complex build and debug scenarios, you can customize your build tasks and debug configurations in tasks.json and launch.json. For example, if you normally pass arguments to your compiler when building from the command line, you can specify those arguments in tasks.json using the **compilerArgs** property. Similarly, you can define arguments to pass to your program for debugging in launch.json.

Extension\walkthrough\debugconfig\run-and-debug-project-windows.md:
  12  
  13: After running and debugging your C++ file for the first time, you'll notice two new files inside your project's **.vscode** folder: **tasks.json** and **launch.json**.
  14  
  15: For more complex build and debug scenarios, you can customize your build tasks and debug configurations in tasks.json and launch.json. For example, if you normally pass arguments to your compiler when building from the command line, you can specify those arguments in tasks.json using the **compilerArgs** property. Similarly, you can define arguments to pass to your program for debugging in launch.json.

Themes\.vscodeignore:
  4  # ignore package lock
  5: package-lock.json

Themes\package.json:
  42          "uiTheme": "vs-dark",
  43:         "path": "./themes/cpptools_dark_vs.json"
  44        },

  48          "uiTheme": "vs",
  49:         "path": "./themes/cpptools_light_vs.json"
  50        }

Themes\.vscode\launch.json:
  13  			"outFiles": [
  14: 				"${workspaceFolder}/themes/*.json"
  15  			]

Themes\themes\cpptools_light_vs.json:
  305  			"scope": [
  306: 				"support.type.property-name.json"
  307  			],
